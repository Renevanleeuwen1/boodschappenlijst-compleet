{"ast":null,"code":"import { ReadableStreamFrom } from \"./shims.mjs\";\nexport const checkFileSupport = () => {\n  if (typeof File === 'undefined') {\n    const {\n      process\n    } = globalThis;\n    const isOldNode = typeof process?.versions?.node === 'string' && parseInt(process.versions.node.split('.')) < 20;\n    throw new Error('`File` is not defined as a global, which is required for file uploads.' + (isOldNode ? \" Update to Node 20 LTS or newer, or set `globalThis.File` to `import('node:buffer').File`.\" : ''));\n  }\n};\n/**\r\n * Construct a `File` instance. This is used to ensure a helpful error is thrown\r\n * for environments that don't define a global `File` yet.\r\n */\nexport function makeFile(fileBits, fileName, options) {\n  checkFileSupport();\n  return new File(fileBits, fileName ?? 'unknown_file', options);\n}\nexport function getName(value) {\n  return (typeof value === 'object' && value !== null && ('name' in value && value.name && String(value.name) || 'url' in value && value.url && String(value.url) || 'filename' in value && value.filename && String(value.filename) || 'path' in value && value.path && String(value.path)) || '').split(/[\\\\/]/).pop() || undefined;\n}\nexport const isAsyncIterable = value => value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\n/**\r\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\r\n * Otherwise returns the request as is.\r\n */\nexport const maybeMultipartFormRequestOptions = async (opts, fetch) => {\n  if (!hasUploadableValue(opts.body)) return opts;\n  return {\n    ...opts,\n    body: await createForm(opts.body, fetch)\n  };\n};\nexport const multipartFormRequestOptions = async (opts, fetch) => {\n  return {\n    ...opts,\n    body: await createForm(opts.body, fetch)\n  };\n};\nconst supportsFormDataMap = /** @__PURE__ */new WeakMap();\n/**\r\n * node-fetch doesn't support the global FormData object in recent node versions. Instead of sending\r\n * properly-encoded form data, it just stringifies the object, resulting in a request body of \"[object FormData]\".\r\n * This function detects if the fetch function provided supports the global FormData object to avoid\r\n * confusing error messages later on.\r\n */\nfunction supportsFormData(fetchObject) {\n  const fetch = typeof fetchObject === 'function' ? fetchObject : fetchObject.fetch;\n  const cached = supportsFormDataMap.get(fetch);\n  if (cached) return cached;\n  const promise = (async () => {\n    try {\n      const FetchResponse = 'Response' in fetch ? fetch.Response : (await fetch('data:,')).constructor;\n      const data = new FormData();\n      if (data.toString() === (await new FetchResponse(data).text())) {\n        return false;\n      }\n      return true;\n    } catch {\n      // avoid false negatives\n      return true;\n    }\n  })();\n  supportsFormDataMap.set(fetch, promise);\n  return promise;\n}\nexport const createForm = async (body, fetch) => {\n  if (!(await supportsFormData(fetch))) {\n    throw new TypeError('The provided fetch function does not support file uploads with the current global FormData class.');\n  }\n  const form = new FormData();\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\n  return form;\n};\n// We check for Blob not File because Bun.File doesn't inherit from File,\n// but they both inherit from Blob and have a `name` property at runtime.\nconst isNamedBlob = value => value instanceof Blob && 'name' in value;\nconst isUploadable = value => typeof value === 'object' && value !== null && (value instanceof Response || isAsyncIterable(value) || isNamedBlob(value));\nconst hasUploadableValue = value => {\n  if (isUploadable(value)) return true;\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\n  if (value && typeof value === 'object') {\n    for (const k in value) {\n      if (hasUploadableValue(value[k])) return true;\n    }\n  }\n  return false;\n};\nconst addFormValue = async (form, key, value) => {\n  if (value === undefined) return;\n  if (value == null) {\n    throw new TypeError(`Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`);\n  }\n  // TODO: make nested formats configurable\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\n    form.append(key, String(value));\n  } else if (value instanceof Response) {\n    form.append(key, makeFile([await value.blob()], getName(value)));\n  } else if (isAsyncIterable(value)) {\n    form.append(key, makeFile([await new Response(ReadableStreamFrom(value)).blob()], getName(value)));\n  } else if (isNamedBlob(value)) {\n    form.append(key, value, getName(value));\n  } else if (Array.isArray(value)) {\n    await Promise.all(value.map(entry => addFormValue(form, key + '[]', entry)));\n  } else if (typeof value === 'object') {\n    await Promise.all(Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)));\n  } else {\n    throw new TypeError(`Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`);\n  }\n};","map":{"version":3,"names":["ReadableStreamFrom","checkFileSupport","File","process","globalThis","isOldNode","versions","node","parseInt","split","Error","makeFile","fileBits","fileName","options","getName","value","name","String","url","filename","path","pop","undefined","isAsyncIterable","Symbol","asyncIterator","maybeMultipartFormRequestOptions","opts","fetch","hasUploadableValue","body","createForm","multipartFormRequestOptions","supportsFormDataMap","WeakMap","supportsFormData","fetchObject","cached","get","promise","FetchResponse","Response","constructor","data","FormData","toString","text","set","TypeError","form","Promise","all","Object","entries","map","key","addFormValue","isNamedBlob","Blob","isUploadable","Array","isArray","some","k","append","blob","entry","prop"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-compleet\\node_modules\\openai\\src\\internal\\uploads.ts"],"sourcesContent":["import { type RequestOptions } from './request-options';\r\nimport type { FilePropertyBag, Fetch } from './builtin-types';\r\nimport type { OpenAI } from '../client';\r\nimport { ReadableStreamFrom } from './shims';\r\n\r\nexport type BlobPart = string | ArrayBuffer | ArrayBufferView | Blob | DataView;\r\ntype FsReadStream = AsyncIterable<Uint8Array> & { path: string | { toString(): string } };\r\n\r\n// https://github.com/oven-sh/bun/issues/5980\r\ninterface BunFile extends Blob {\r\n  readonly name?: string | undefined;\r\n}\r\n\r\nexport const checkFileSupport = () => {\r\n  if (typeof File === 'undefined') {\r\n    const { process } = globalThis as any;\r\n    const isOldNode =\r\n      typeof process?.versions?.node === 'string' && parseInt(process.versions.node.split('.')) < 20;\r\n    throw new Error(\r\n      '`File` is not defined as a global, which is required for file uploads.' +\r\n        (isOldNode ?\r\n          \" Update to Node 20 LTS or newer, or set `globalThis.File` to `import('node:buffer').File`.\"\r\n        : ''),\r\n    );\r\n  }\r\n};\r\n\r\n/**\r\n * Typically, this is a native \"File\" class.\r\n *\r\n * We provide the {@link toFile} utility to convert a variety of objects\r\n * into the File class.\r\n *\r\n * For convenience, you can also pass a fetch Response, or in Node,\r\n * the result of fs.createReadStream().\r\n */\r\nexport type Uploadable = File | Response | FsReadStream | BunFile;\r\n\r\n/**\r\n * Construct a `File` instance. This is used to ensure a helpful error is thrown\r\n * for environments that don't define a global `File` yet.\r\n */\r\nexport function makeFile(\r\n  fileBits: BlobPart[],\r\n  fileName: string | undefined,\r\n  options?: FilePropertyBag,\r\n): File {\r\n  checkFileSupport();\r\n  return new File(fileBits as any, fileName ?? 'unknown_file', options);\r\n}\r\n\r\nexport function getName(value: any): string | undefined {\r\n  return (\r\n    (\r\n      (typeof value === 'object' &&\r\n        value !== null &&\r\n        (('name' in value && value.name && String(value.name)) ||\r\n          ('url' in value && value.url && String(value.url)) ||\r\n          ('filename' in value && value.filename && String(value.filename)) ||\r\n          ('path' in value && value.path && String(value.path)))) ||\r\n      ''\r\n    )\r\n      .split(/[\\\\/]/)\r\n      .pop() || undefined\r\n  );\r\n}\r\n\r\nexport const isAsyncIterable = (value: any): value is AsyncIterable<any> =>\r\n  value != null && typeof value === 'object' && typeof value[Symbol.asyncIterator] === 'function';\r\n\r\n/**\r\n * Returns a multipart/form-data request if any part of the given request body contains a File / Blob value.\r\n * Otherwise returns the request as is.\r\n */\r\nexport const maybeMultipartFormRequestOptions = async (\r\n  opts: RequestOptions,\r\n  fetch: OpenAI | Fetch,\r\n): Promise<RequestOptions> => {\r\n  if (!hasUploadableValue(opts.body)) return opts;\r\n\r\n  return { ...opts, body: await createForm(opts.body, fetch) };\r\n};\r\n\r\ntype MultipartFormRequestOptions = Omit<RequestOptions, 'body'> & { body: unknown };\r\n\r\nexport const multipartFormRequestOptions = async (\r\n  opts: MultipartFormRequestOptions,\r\n  fetch: OpenAI | Fetch,\r\n): Promise<RequestOptions> => {\r\n  return { ...opts, body: await createForm(opts.body, fetch) };\r\n};\r\n\r\nconst supportsFormDataMap = /** @__PURE__ */ new WeakMap<Fetch, Promise<boolean>>();\r\n\r\n/**\r\n * node-fetch doesn't support the global FormData object in recent node versions. Instead of sending\r\n * properly-encoded form data, it just stringifies the object, resulting in a request body of \"[object FormData]\".\r\n * This function detects if the fetch function provided supports the global FormData object to avoid\r\n * confusing error messages later on.\r\n */\r\nfunction supportsFormData(fetchObject: OpenAI | Fetch): Promise<boolean> {\r\n  const fetch: Fetch = typeof fetchObject === 'function' ? fetchObject : (fetchObject as any).fetch;\r\n  const cached = supportsFormDataMap.get(fetch);\r\n  if (cached) return cached;\r\n  const promise = (async () => {\r\n    try {\r\n      const FetchResponse = (\r\n        'Response' in fetch ?\r\n          fetch.Response\r\n        : (await fetch('data:,')).constructor) as typeof Response;\r\n      const data = new FormData();\r\n      if (data.toString() === (await new FetchResponse(data).text())) {\r\n        return false;\r\n      }\r\n      return true;\r\n    } catch {\r\n      // avoid false negatives\r\n      return true;\r\n    }\r\n  })();\r\n  supportsFormDataMap.set(fetch, promise);\r\n  return promise;\r\n}\r\n\r\nexport const createForm = async <T = Record<string, unknown>>(\r\n  body: T | undefined,\r\n  fetch: OpenAI | Fetch,\r\n): Promise<FormData> => {\r\n  if (!(await supportsFormData(fetch))) {\r\n    throw new TypeError(\r\n      'The provided fetch function does not support file uploads with the current global FormData class.',\r\n    );\r\n  }\r\n  const form = new FormData();\r\n  await Promise.all(Object.entries(body || {}).map(([key, value]) => addFormValue(form, key, value)));\r\n  return form;\r\n};\r\n\r\n// We check for Blob not File because Bun.File doesn't inherit from File,\r\n// but they both inherit from Blob and have a `name` property at runtime.\r\nconst isNamedBlob = (value: unknown) => value instanceof Blob && 'name' in value;\r\n\r\nconst isUploadable = (value: unknown) =>\r\n  typeof value === 'object' &&\r\n  value !== null &&\r\n  (value instanceof Response || isAsyncIterable(value) || isNamedBlob(value));\r\n\r\nconst hasUploadableValue = (value: unknown): boolean => {\r\n  if (isUploadable(value)) return true;\r\n  if (Array.isArray(value)) return value.some(hasUploadableValue);\r\n  if (value && typeof value === 'object') {\r\n    for (const k in value) {\r\n      if (hasUploadableValue((value as any)[k])) return true;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nconst addFormValue = async (form: FormData, key: string, value: unknown): Promise<void> => {\r\n  if (value === undefined) return;\r\n  if (value == null) {\r\n    throw new TypeError(\r\n      `Received null for \"${key}\"; to pass null in FormData, you must use the string 'null'`,\r\n    );\r\n  }\r\n\r\n  // TODO: make nested formats configurable\r\n  if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {\r\n    form.append(key, String(value));\r\n  } else if (value instanceof Response) {\r\n    form.append(key, makeFile([await value.blob()], getName(value)));\r\n  } else if (isAsyncIterable(value)) {\r\n    form.append(key, makeFile([await new Response(ReadableStreamFrom(value)).blob()], getName(value)));\r\n  } else if (isNamedBlob(value)) {\r\n    form.append(key, value, getName(value));\r\n  } else if (Array.isArray(value)) {\r\n    await Promise.all(value.map((entry) => addFormValue(form, key + '[]', entry)));\r\n  } else if (typeof value === 'object') {\r\n    await Promise.all(\r\n      Object.entries(value).map(([name, prop]) => addFormValue(form, `${key}[${name}]`, prop)),\r\n    );\r\n  } else {\r\n    throw new TypeError(\r\n      `Invalid value given to form, expected a string, number, boolean, object, Array, File or Blob but got ${value} instead`,\r\n    );\r\n  }\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}