{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nimport { CursorPage } from \"../core/pagination.mjs\";\nimport { path } from \"../internal/utils/path.mjs\";\nexport class Batches extends APIResource {\n  /**\r\n   * Creates and executes a batch from an uploaded file of requests\r\n   */\n  create(body, options) {\n    return this._client.post('/batches', {\n      body,\n      ...options\n    });\n  }\n  /**\r\n   * Retrieves a batch.\r\n   */\n  retrieve(batchID, options) {\n    return this._client.get(path`/batches/${batchID}`, options);\n  }\n  /**\r\n   * List your organization's batches.\r\n   */\n  list(query = {}, options) {\n    return this._client.getAPIList('/batches', CursorPage, {\n      query,\n      ...options\n    });\n  }\n  /**\r\n   * Cancels an in-progress batch. The batch will be in status `cancelling` for up to\r\n   * 10 minutes, before changing to `cancelled`, where it will have partial results\r\n   * (if any) available in the output file.\r\n   */\n  cancel(batchID, options) {\n    return this._client.post(path`/batches/${batchID}/cancel`, options);\n  }\n}","map":{"version":3,"names":["APIResource","CursorPage","path","Batches","create","body","options","_client","post","retrieve","batchID","get","list","query","getAPIList","cancel"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-compleet\\node_modules\\openai\\src\\resources\\batches.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../core/resource';\r\nimport * as BatchesAPI from './batches';\r\nimport * as Shared from './shared';\r\nimport { APIPromise } from '../core/api-promise';\r\nimport { CursorPage, type CursorPageParams, PagePromise } from '../core/pagination';\r\nimport { RequestOptions } from '../internal/request-options';\r\nimport { path } from '../internal/utils/path';\r\n\r\nexport class Batches extends APIResource {\r\n  /**\r\n   * Creates and executes a batch from an uploaded file of requests\r\n   */\r\n  create(body: BatchCreateParams, options?: RequestOptions): APIPromise<Batch> {\r\n    return this._client.post('/batches', { body, ...options });\r\n  }\r\n\r\n  /**\r\n   * Retrieves a batch.\r\n   */\r\n  retrieve(batchID: string, options?: RequestOptions): APIPromise<Batch> {\r\n    return this._client.get(path`/batches/${batchID}`, options);\r\n  }\r\n\r\n  /**\r\n   * List your organization's batches.\r\n   */\r\n  list(\r\n    query: BatchListParams | null | undefined = {},\r\n    options?: RequestOptions,\r\n  ): PagePromise<BatchesPage, Batch> {\r\n    return this._client.getAPIList('/batches', CursorPage<Batch>, { query, ...options });\r\n  }\r\n\r\n  /**\r\n   * Cancels an in-progress batch. The batch will be in status `cancelling` for up to\r\n   * 10 minutes, before changing to `cancelled`, where it will have partial results\r\n   * (if any) available in the output file.\r\n   */\r\n  cancel(batchID: string, options?: RequestOptions): APIPromise<Batch> {\r\n    return this._client.post(path`/batches/${batchID}/cancel`, options);\r\n  }\r\n}\r\n\r\nexport type BatchesPage = CursorPage<Batch>;\r\n\r\nexport interface Batch {\r\n  id: string;\r\n\r\n  /**\r\n   * The time frame within which the batch should be processed.\r\n   */\r\n  completion_window: string;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch was created.\r\n   */\r\n  created_at: number;\r\n\r\n  /**\r\n   * The OpenAI API endpoint used by the batch.\r\n   */\r\n  endpoint: string;\r\n\r\n  /**\r\n   * The ID of the input file for the batch.\r\n   */\r\n  input_file_id: string;\r\n\r\n  /**\r\n   * The object type, which is always `batch`.\r\n   */\r\n  object: 'batch';\r\n\r\n  /**\r\n   * The current status of the batch.\r\n   */\r\n  status:\r\n    | 'validating'\r\n    | 'failed'\r\n    | 'in_progress'\r\n    | 'finalizing'\r\n    | 'completed'\r\n    | 'expired'\r\n    | 'cancelling'\r\n    | 'cancelled';\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch was cancelled.\r\n   */\r\n  cancelled_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch started cancelling.\r\n   */\r\n  cancelling_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch was completed.\r\n   */\r\n  completed_at?: number;\r\n\r\n  /**\r\n   * The ID of the file containing the outputs of requests with errors.\r\n   */\r\n  error_file_id?: string;\r\n\r\n  errors?: Batch.Errors;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch expired.\r\n   */\r\n  expired_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch will expire.\r\n   */\r\n  expires_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch failed.\r\n   */\r\n  failed_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch started finalizing.\r\n   */\r\n  finalizing_at?: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the batch started processing.\r\n   */\r\n  in_progress_at?: number;\r\n\r\n  /**\r\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n   * for storing additional information about the object in a structured format, and\r\n   * querying for objects via API or the dashboard.\r\n   *\r\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n   * a maximum length of 512 characters.\r\n   */\r\n  metadata?: Shared.Metadata | null;\r\n\r\n  /**\r\n   * The ID of the file containing the outputs of successfully executed requests.\r\n   */\r\n  output_file_id?: string;\r\n\r\n  /**\r\n   * The request counts for different statuses within the batch.\r\n   */\r\n  request_counts?: BatchRequestCounts;\r\n}\r\n\r\nexport namespace Batch {\r\n  export interface Errors {\r\n    data?: Array<BatchesAPI.BatchError>;\r\n\r\n    /**\r\n     * The object type, which is always `list`.\r\n     */\r\n    object?: string;\r\n  }\r\n}\r\n\r\nexport interface BatchError {\r\n  /**\r\n   * An error code identifying the error type.\r\n   */\r\n  code?: string;\r\n\r\n  /**\r\n   * The line number of the input file where the error occurred, if applicable.\r\n   */\r\n  line?: number | null;\r\n\r\n  /**\r\n   * A human-readable message providing more details about the error.\r\n   */\r\n  message?: string;\r\n\r\n  /**\r\n   * The name of the parameter that caused the error, if applicable.\r\n   */\r\n  param?: string | null;\r\n}\r\n\r\n/**\r\n * The request counts for different statuses within the batch.\r\n */\r\nexport interface BatchRequestCounts {\r\n  /**\r\n   * Number of requests that have been completed successfully.\r\n   */\r\n  completed: number;\r\n\r\n  /**\r\n   * Number of requests that have failed.\r\n   */\r\n  failed: number;\r\n\r\n  /**\r\n   * Total number of requests in the batch.\r\n   */\r\n  total: number;\r\n}\r\n\r\nexport interface BatchCreateParams {\r\n  /**\r\n   * The time frame within which the batch should be processed. Currently only `24h`\r\n   * is supported.\r\n   */\r\n  completion_window: '24h';\r\n\r\n  /**\r\n   * The endpoint to be used for all requests in the batch. Currently\r\n   * `/v1/responses`, `/v1/chat/completions`, `/v1/embeddings`, and `/v1/completions`\r\n   * are supported. Note that `/v1/embeddings` batches are also restricted to a\r\n   * maximum of 50,000 embedding inputs across all requests in the batch.\r\n   */\r\n  endpoint: '/v1/responses' | '/v1/chat/completions' | '/v1/embeddings' | '/v1/completions';\r\n\r\n  /**\r\n   * The ID of an uploaded file that contains requests for the new batch.\r\n   *\r\n   * See [upload file](https://platform.openai.com/docs/api-reference/files/create)\r\n   * for how to upload a file.\r\n   *\r\n   * Your input file must be formatted as a\r\n   * [JSONL file](https://platform.openai.com/docs/api-reference/batch/request-input),\r\n   * and must be uploaded with the purpose `batch`. The file can contain up to 50,000\r\n   * requests, and can be up to 200 MB in size.\r\n   */\r\n  input_file_id: string;\r\n\r\n  /**\r\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n   * for storing additional information about the object in a structured format, and\r\n   * querying for objects via API or the dashboard.\r\n   *\r\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n   * a maximum length of 512 characters.\r\n   */\r\n  metadata?: Shared.Metadata | null;\r\n}\r\n\r\nexport interface BatchListParams extends CursorPageParams {}\r\n\r\nexport declare namespace Batches {\r\n  export {\r\n    type Batch as Batch,\r\n    type BatchError as BatchError,\r\n    type BatchRequestCounts as BatchRequestCounts,\r\n    type BatchesPage as BatchesPage,\r\n    type BatchCreateParams as BatchCreateParams,\r\n    type BatchListParams as BatchListParams,\r\n  };\r\n}\r\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;SAIbC,UAAU,QAAsC;SAEhDC,IAAI,QAAE;AAEf,OAAM,MAAOC,OAAQ,SAAQH,WAAW;EACtC;;;EAGAI,MAAMA,CAACC,IAAuB,EAAEC,OAAwB;IACtD,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,UAAU,EAAE;MAAEH,IAAI;MAAE,GAAGC;IAAO,CAAE,CAAC;EAC5D;EAEA;;;EAGAG,QAAQA,CAACC,OAAe,EAAEJ,OAAwB;IAChD,OAAO,IAAI,CAACC,OAAO,CAACI,GAAG,CAACT,IAAI,YAAYQ,OAAO,EAAE,EAAEJ,OAAO,CAAC;EAC7D;EAEA;;;EAGAM,IAAIA,CACFC,KAAA,GAA4C,EAAE,EAC9CP,OAAwB;IAExB,OAAO,IAAI,CAACC,OAAO,CAACO,UAAU,CAAC,UAAU,EAAEb,UAAiB,EAAE;MAAEY,KAAK;MAAE,GAAGP;IAAO,CAAE,CAAC;EACtF;EAEA;;;;;EAKAS,MAAMA,CAACL,OAAe,EAAEJ,OAAwB;IAC9C,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAACN,IAAI,YAAYQ,OAAO,SAAS,EAAEJ,OAAO,CAAC;EACrE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}