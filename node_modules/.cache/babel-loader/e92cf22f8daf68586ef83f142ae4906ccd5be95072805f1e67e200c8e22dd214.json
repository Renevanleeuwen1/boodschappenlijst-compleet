{"ast":null,"code":"import { ChatCompletionStream } from \"./ChatCompletionStream.mjs\";\nexport class ChatCompletionStreamingRunner extends ChatCompletionStream {\n  static fromReadableStream(stream) {\n    const runner = new ChatCompletionStreamingRunner(null);\n    runner._run(() => runner._fromReadableStream(stream));\n    return runner;\n  }\n  static runTools(client, params, options) {\n    const runner = new ChatCompletionStreamingRunner(\n    // @ts-expect-error TODO these types are incompatible\n    params);\n    const opts = {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'runTools'\n      }\n    };\n    runner._run(() => runner._runTools(client, params, opts));\n    return runner;\n  }\n}","map":{"version":3,"names":["ChatCompletionStream","ChatCompletionStreamingRunner","fromReadableStream","stream","runner","_run","_fromReadableStream","runTools","client","params","options","opts","headers","_runTools"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-compleet\\node_modules\\openai\\src\\lib\\ChatCompletionStreamingRunner.ts"],"sourcesContent":["import {\r\n  type ChatCompletionChunk,\r\n  type ChatCompletionCreateParamsStreaming,\r\n} from '../resources/chat/completions';\r\nimport { RunnerOptions, type AbstractChatCompletionRunnerEvents } from './AbstractChatCompletionRunner';\r\nimport { type ReadableStream } from '../internal/shim-types';\r\nimport { RunnableTools, type BaseFunctionsArgs } from './RunnableFunction';\r\nimport { ChatCompletionSnapshot, ChatCompletionStream } from './ChatCompletionStream';\r\nimport OpenAI from '../index';\r\nimport { AutoParseableTool } from '../lib/parser';\r\n\r\nexport interface ChatCompletionStreamEvents extends AbstractChatCompletionRunnerEvents {\r\n  content: (contentDelta: string, contentSnapshot: string) => void;\r\n  chunk: (chunk: ChatCompletionChunk, snapshot: ChatCompletionSnapshot) => void;\r\n}\r\n\r\nexport type ChatCompletionStreamingToolRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\r\n  ChatCompletionCreateParamsStreaming,\r\n  'tools'\r\n> & {\r\n  tools: RunnableTools<FunctionsArgs> | AutoParseableTool<any, true>[];\r\n};\r\n\r\nexport class ChatCompletionStreamingRunner<ParsedT = null>\r\n  extends ChatCompletionStream<ParsedT>\r\n  implements AsyncIterable<ChatCompletionChunk>\r\n{\r\n  static override fromReadableStream(stream: ReadableStream): ChatCompletionStreamingRunner<null> {\r\n    const runner = new ChatCompletionStreamingRunner(null);\r\n    runner._run(() => runner._fromReadableStream(stream));\r\n    return runner;\r\n  }\r\n\r\n  static runTools<T extends (string | object)[], ParsedT = null>(\r\n    client: OpenAI,\r\n    params: ChatCompletionStreamingToolRunnerParams<T>,\r\n    options?: RunnerOptions,\r\n  ): ChatCompletionStreamingRunner<ParsedT> {\r\n    const runner = new ChatCompletionStreamingRunner<ParsedT>(\r\n      // @ts-expect-error TODO these types are incompatible\r\n      params,\r\n    );\r\n    const opts = {\r\n      ...options,\r\n      headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\r\n    };\r\n    runner._run(() => runner._runTools(client, params, opts));\r\n    return runner;\r\n  }\r\n}\r\n"],"mappings":"SAOiCA,oBAAoB,QAAE;AAgBvD,OAAM,MAAOC,6BACX,SAAQD,oBAA6B;EAGrC,OAAgBE,kBAAkBA,CAACC,MAAsB;IACvD,MAAMC,MAAM,GAAG,IAAIH,6BAA6B,CAAC,IAAI,CAAC;IACtDG,MAAM,CAACC,IAAI,CAAC,MAAMD,MAAM,CAACE,mBAAmB,CAACH,MAAM,CAAC,CAAC;IACrD,OAAOC,MAAM;EACf;EAEA,OAAOG,QAAQA,CACbC,MAAc,EACdC,MAAkD,EAClDC,OAAuB;IAEvB,MAAMN,MAAM,GAAG,IAAIH,6BAA6B;IAC9C;IACAQ,MAAM,CACP;IACD,MAAME,IAAI,GAAG;MACX,GAAGD,OAAO;MACVE,OAAO,EAAE;QAAE,GAAGF,OAAO,EAAEE,OAAO;QAAE,2BAA2B,EAAE;MAAU;KACxE;IACDR,MAAM,CAACC,IAAI,CAAC,MAAMD,MAAM,CAACS,SAAS,CAACL,MAAM,EAAEC,MAAM,EAAEE,IAAI,CAAC,CAAC;IACzD,OAAOP,MAAM;EACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}