{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { buildHeaders } from \"../../../internal/headers.mjs\";\nexport class TranscriptionSessions extends APIResource {\n  /**\r\n   * Create an ephemeral API token for use in client-side applications with the\r\n   * Realtime API specifically for realtime transcriptions. Can be configured with\r\n   * the same session parameters as the `transcription_session.update` client event.\r\n   *\r\n   * It responds with a session object, plus a `client_secret` key which contains a\r\n   * usable ephemeral API token that can be used to authenticate browser clients for\r\n   * the Realtime API.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const transcriptionSession =\r\n   *   await client.beta.realtime.transcriptionSessions.create();\r\n   * ```\r\n   */\n  create(body, options) {\n    return this._client.post('/realtime/transcription_sessions', {\n      body,\n      ...options,\n      headers: buildHeaders([{\n        'OpenAI-Beta': 'assistants=v2'\n      }, options?.headers])\n    });\n  }\n}","map":{"version":3,"names":["APIResource","buildHeaders","TranscriptionSessions","create","body","options","_client","post","headers"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-compleet\\node_modules\\openai\\src\\resources\\beta\\realtime\\transcription-sessions.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../../../core/resource';\r\nimport { APIPromise } from '../../../core/api-promise';\r\nimport { buildHeaders } from '../../../internal/headers';\r\nimport { RequestOptions } from '../../../internal/request-options';\r\n\r\nexport class TranscriptionSessions extends APIResource {\r\n  /**\r\n   * Create an ephemeral API token for use in client-side applications with the\r\n   * Realtime API specifically for realtime transcriptions. Can be configured with\r\n   * the same session parameters as the `transcription_session.update` client event.\r\n   *\r\n   * It responds with a session object, plus a `client_secret` key which contains a\r\n   * usable ephemeral API token that can be used to authenticate browser clients for\r\n   * the Realtime API.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const transcriptionSession =\r\n   *   await client.beta.realtime.transcriptionSessions.create();\r\n   * ```\r\n   */\r\n  create(body: TranscriptionSessionCreateParams, options?: RequestOptions): APIPromise<TranscriptionSession> {\r\n    return this._client.post('/realtime/transcription_sessions', {\r\n      body,\r\n      ...options,\r\n      headers: buildHeaders([{ 'OpenAI-Beta': 'assistants=v2' }, options?.headers]),\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * A new Realtime transcription session configuration.\r\n *\r\n * When a session is created on the server via REST API, the session object also\r\n * contains an ephemeral key. Default TTL for keys is 10 minutes. This property is\r\n * not present when a session is updated via the WebSocket API.\r\n */\r\nexport interface TranscriptionSession {\r\n  /**\r\n   * Ephemeral key returned by the API. Only present when the session is created on\r\n   * the server via REST API.\r\n   */\r\n  client_secret: TranscriptionSession.ClientSecret;\r\n\r\n  /**\r\n   * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\r\n   */\r\n  input_audio_format?: string;\r\n\r\n  /**\r\n   * Configuration of the transcription model.\r\n   */\r\n  input_audio_transcription?: TranscriptionSession.InputAudioTranscription;\r\n\r\n  /**\r\n   * The set of modalities the model can respond with. To disable audio, set this to\r\n   * [\"text\"].\r\n   */\r\n  modalities?: Array<'text' | 'audio'>;\r\n\r\n  /**\r\n   * Configuration for turn detection. Can be set to `null` to turn off. Server VAD\r\n   * means that the model will detect the start and end of speech based on audio\r\n   * volume and respond at the end of user speech.\r\n   */\r\n  turn_detection?: TranscriptionSession.TurnDetection;\r\n}\r\n\r\nexport namespace TranscriptionSession {\r\n  /**\r\n   * Ephemeral key returned by the API. Only present when the session is created on\r\n   * the server via REST API.\r\n   */\r\n  export interface ClientSecret {\r\n    /**\r\n     * Timestamp for when the token expires. Currently, all tokens expire after one\r\n     * minute.\r\n     */\r\n    expires_at: number;\r\n\r\n    /**\r\n     * Ephemeral key usable in client environments to authenticate connections to the\r\n     * Realtime API. Use this in client-side environments rather than a standard API\r\n     * token, which should only be used server-side.\r\n     */\r\n    value: string;\r\n  }\r\n\r\n  /**\r\n   * Configuration of the transcription model.\r\n   */\r\n  export interface InputAudioTranscription {\r\n    /**\r\n     * The language of the input audio. Supplying the input language in\r\n     * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`)\r\n     * format will improve accuracy and latency.\r\n     */\r\n    language?: string;\r\n\r\n    /**\r\n     * The model to use for transcription. Can be `gpt-4o-transcribe`,\r\n     * `gpt-4o-mini-transcribe`, or `whisper-1`.\r\n     */\r\n    model?: 'gpt-4o-transcribe' | 'gpt-4o-mini-transcribe' | 'whisper-1';\r\n\r\n    /**\r\n     * An optional text to guide the model's style or continue a previous audio\r\n     * segment. The\r\n     * [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting)\r\n     * should match the audio language.\r\n     */\r\n    prompt?: string;\r\n  }\r\n\r\n  /**\r\n   * Configuration for turn detection. Can be set to `null` to turn off. Server VAD\r\n   * means that the model will detect the start and end of speech based on audio\r\n   * volume and respond at the end of user speech.\r\n   */\r\n  export interface TurnDetection {\r\n    /**\r\n     * Amount of audio to include before the VAD detected speech (in milliseconds).\r\n     * Defaults to 300ms.\r\n     */\r\n    prefix_padding_ms?: number;\r\n\r\n    /**\r\n     * Duration of silence to detect speech stop (in milliseconds). Defaults to 500ms.\r\n     * With shorter values the model will respond more quickly, but may jump in on\r\n     * short pauses from the user.\r\n     */\r\n    silence_duration_ms?: number;\r\n\r\n    /**\r\n     * Activation threshold for VAD (0.0 to 1.0), this defaults to 0.5. A higher\r\n     * threshold will require louder audio to activate the model, and thus might\r\n     * perform better in noisy environments.\r\n     */\r\n    threshold?: number;\r\n\r\n    /**\r\n     * Type of turn detection, only `server_vad` is currently supported.\r\n     */\r\n    type?: string;\r\n  }\r\n}\r\n\r\nexport interface TranscriptionSessionCreateParams {\r\n  /**\r\n   * Configuration options for the generated client secret.\r\n   */\r\n  client_secret?: TranscriptionSessionCreateParams.ClientSecret;\r\n\r\n  /**\r\n   * The set of items to include in the transcription. Current available items are:\r\n   *\r\n   * - `item.input_audio_transcription.logprobs`\r\n   */\r\n  include?: Array<string>;\r\n\r\n  /**\r\n   * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For\r\n   * `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, single channel\r\n   * (mono), and little-endian byte order.\r\n   */\r\n  input_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\r\n\r\n  /**\r\n   * Configuration for input audio noise reduction. This can be set to `null` to turn\r\n   * off. Noise reduction filters audio added to the input audio buffer before it is\r\n   * sent to VAD and the model. Filtering the audio can improve VAD and turn\r\n   * detection accuracy (reducing false positives) and model performance by improving\r\n   * perception of the input audio.\r\n   */\r\n  input_audio_noise_reduction?: TranscriptionSessionCreateParams.InputAudioNoiseReduction;\r\n\r\n  /**\r\n   * Configuration for input audio transcription. The client can optionally set the\r\n   * language and prompt for transcription, these offer additional guidance to the\r\n   * transcription service.\r\n   */\r\n  input_audio_transcription?: TranscriptionSessionCreateParams.InputAudioTranscription;\r\n\r\n  /**\r\n   * The set of modalities the model can respond with. To disable audio, set this to\r\n   * [\"text\"].\r\n   */\r\n  modalities?: Array<'text' | 'audio'>;\r\n\r\n  /**\r\n   * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\r\n   * set to `null` to turn off, in which case the client must manually trigger model\r\n   * response. Server VAD means that the model will detect the start and end of\r\n   * speech based on audio volume and respond at the end of user speech. Semantic VAD\r\n   * is more advanced and uses a turn detection model (in conjuction with VAD) to\r\n   * semantically estimate whether the user has finished speaking, then dynamically\r\n   * sets a timeout based on this probability. For example, if user audio trails off\r\n   * with \"uhhm\", the model will score a low probability of turn end and wait longer\r\n   * for the user to continue speaking. This can be useful for more natural\r\n   * conversations, but may have a higher latency.\r\n   */\r\n  turn_detection?: TranscriptionSessionCreateParams.TurnDetection;\r\n}\r\n\r\nexport namespace TranscriptionSessionCreateParams {\r\n  /**\r\n   * Configuration options for the generated client secret.\r\n   */\r\n  export interface ClientSecret {\r\n    /**\r\n     * Configuration for the ephemeral token expiration.\r\n     */\r\n    expires_at?: ClientSecret.ExpiresAt;\r\n  }\r\n\r\n  export namespace ClientSecret {\r\n    /**\r\n     * Configuration for the ephemeral token expiration.\r\n     */\r\n    export interface ExpiresAt {\r\n      /**\r\n       * The anchor point for the ephemeral token expiration. Only `created_at` is\r\n       * currently supported.\r\n       */\r\n      anchor?: 'created_at';\r\n\r\n      /**\r\n       * The number of seconds from the anchor point to the expiration. Select a value\r\n       * between `10` and `7200`.\r\n       */\r\n      seconds?: number;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Configuration for input audio noise reduction. This can be set to `null` to turn\r\n   * off. Noise reduction filters audio added to the input audio buffer before it is\r\n   * sent to VAD and the model. Filtering the audio can improve VAD and turn\r\n   * detection accuracy (reducing false positives) and model performance by improving\r\n   * perception of the input audio.\r\n   */\r\n  export interface InputAudioNoiseReduction {\r\n    /**\r\n     * Type of noise reduction. `near_field` is for close-talking microphones such as\r\n     * headphones, `far_field` is for far-field microphones such as laptop or\r\n     * conference room microphones.\r\n     */\r\n    type?: 'near_field' | 'far_field';\r\n  }\r\n\r\n  /**\r\n   * Configuration for input audio transcription. The client can optionally set the\r\n   * language and prompt for transcription, these offer additional guidance to the\r\n   * transcription service.\r\n   */\r\n  export interface InputAudioTranscription {\r\n    /**\r\n     * The language of the input audio. Supplying the input language in\r\n     * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`)\r\n     * format will improve accuracy and latency.\r\n     */\r\n    language?: string;\r\n\r\n    /**\r\n     * The model to use for transcription, current options are `gpt-4o-transcribe`,\r\n     * `gpt-4o-mini-transcribe`, and `whisper-1`.\r\n     */\r\n    model?: 'gpt-4o-transcribe' | 'gpt-4o-mini-transcribe' | 'whisper-1';\r\n\r\n    /**\r\n     * An optional text to guide the model's style or continue a previous audio\r\n     * segment. For `whisper-1`, the\r\n     * [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).\r\n     * For `gpt-4o-transcribe` models, the prompt is a free text string, for example\r\n     * \"expect words related to technology\".\r\n     */\r\n    prompt?: string;\r\n  }\r\n\r\n  /**\r\n   * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\r\n   * set to `null` to turn off, in which case the client must manually trigger model\r\n   * response. Server VAD means that the model will detect the start and end of\r\n   * speech based on audio volume and respond at the end of user speech. Semantic VAD\r\n   * is more advanced and uses a turn detection model (in conjuction with VAD) to\r\n   * semantically estimate whether the user has finished speaking, then dynamically\r\n   * sets a timeout based on this probability. For example, if user audio trails off\r\n   * with \"uhhm\", the model will score a low probability of turn end and wait longer\r\n   * for the user to continue speaking. This can be useful for more natural\r\n   * conversations, but may have a higher latency.\r\n   */\r\n  export interface TurnDetection {\r\n    /**\r\n     * Whether or not to automatically generate a response when a VAD stop event\r\n     * occurs. Not available for transcription sessions.\r\n     */\r\n    create_response?: boolean;\r\n\r\n    /**\r\n     * Used only for `semantic_vad` mode. The eagerness of the model to respond. `low`\r\n     * will wait longer for the user to continue speaking, `high` will respond more\r\n     * quickly. `auto` is the default and is equivalent to `medium`.\r\n     */\r\n    eagerness?: 'low' | 'medium' | 'high' | 'auto';\r\n\r\n    /**\r\n     * Whether or not to automatically interrupt any ongoing response with output to\r\n     * the default conversation (i.e. `conversation` of `auto`) when a VAD start event\r\n     * occurs. Not available for transcription sessions.\r\n     */\r\n    interrupt_response?: boolean;\r\n\r\n    /**\r\n     * Used only for `server_vad` mode. Amount of audio to include before the VAD\r\n     * detected speech (in milliseconds). Defaults to 300ms.\r\n     */\r\n    prefix_padding_ms?: number;\r\n\r\n    /**\r\n     * Used only for `server_vad` mode. Duration of silence to detect speech stop (in\r\n     * milliseconds). Defaults to 500ms. With shorter values the model will respond\r\n     * more quickly, but may jump in on short pauses from the user.\r\n     */\r\n    silence_duration_ms?: number;\r\n\r\n    /**\r\n     * Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this\r\n     * defaults to 0.5. A higher threshold will require louder audio to activate the\r\n     * model, and thus might perform better in noisy environments.\r\n     */\r\n    threshold?: number;\r\n\r\n    /**\r\n     * Type of turn detection.\r\n     */\r\n    type?: 'server_vad' | 'semantic_vad';\r\n  }\r\n}\r\n\r\nexport declare namespace TranscriptionSessions {\r\n  export {\r\n    type TranscriptionSession as TranscriptionSession,\r\n    type TranscriptionSessionCreateParams as TranscriptionSessionCreateParams,\r\n  };\r\n}\r\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;SAEbC,YAAY,QAAE;AAGvB,OAAM,MAAOC,qBAAsB,SAAQF,WAAW;EACpD;;;;;;;;;;;;;;;EAeAG,MAAMA,CAACC,IAAsC,EAAEC,OAAwB;IACrE,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,kCAAkC,EAAE;MAC3DH,IAAI;MACJ,GAAGC,OAAO;MACVG,OAAO,EAAEP,YAAY,CAAC,CAAC;QAAE,aAAa,EAAE;MAAe,CAAE,EAAEI,OAAO,EAAEG,OAAO,CAAC;KAC7E,CAAC;EACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}