{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class Messages extends APIResource {\n  /**\r\n   * Get the messages in a stored chat completion. Only Chat Completions that have\r\n   * been created with the `store` parameter set to `true` will be returned.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * // Automatically fetches more pages as needed.\r\n   * for await (const chatCompletionStoreMessage of client.chat.completions.messages.list(\r\n   *   'completion_id',\r\n   * )) {\r\n   *   // ...\r\n   * }\r\n   * ```\r\n   */\n  list(completionID, query = {}, options) {\n    return this._client.getAPIList(path`/chat/completions/${completionID}/messages`, CursorPage, {\n      query,\n      ...options\n    });\n  }\n}","map":{"version":3,"names":["APIResource","CursorPage","path","Messages","list","completionID","query","options","_client","getAPIList"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-compleet\\node_modules\\openai\\src\\resources\\chat\\completions\\messages.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../../../core/resource';\r\nimport * as CompletionsAPI from './completions';\r\nimport { ChatCompletionStoreMessagesPage } from './completions';\r\nimport { CursorPage, type CursorPageParams, PagePromise } from '../../../core/pagination';\r\nimport { RequestOptions } from '../../../internal/request-options';\r\nimport { path } from '../../../internal/utils/path';\r\n\r\nexport class Messages extends APIResource {\r\n  /**\r\n   * Get the messages in a stored chat completion. Only Chat Completions that have\r\n   * been created with the `store` parameter set to `true` will be returned.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * // Automatically fetches more pages as needed.\r\n   * for await (const chatCompletionStoreMessage of client.chat.completions.messages.list(\r\n   *   'completion_id',\r\n   * )) {\r\n   *   // ...\r\n   * }\r\n   * ```\r\n   */\r\n  list(\r\n    completionID: string,\r\n    query: MessageListParams | null | undefined = {},\r\n    options?: RequestOptions,\r\n  ): PagePromise<ChatCompletionStoreMessagesPage, CompletionsAPI.ChatCompletionStoreMessage> {\r\n    return this._client.getAPIList(\r\n      path`/chat/completions/${completionID}/messages`,\r\n      CursorPage<CompletionsAPI.ChatCompletionStoreMessage>,\r\n      { query, ...options },\r\n    );\r\n  }\r\n}\r\n\r\nexport interface MessageListParams extends CursorPageParams {\r\n  /**\r\n   * Sort order for messages by timestamp. Use `asc` for ascending order or `desc`\r\n   * for descending order. Defaults to `asc`.\r\n   */\r\n  order?: 'asc' | 'desc';\r\n}\r\n\r\nexport declare namespace Messages {\r\n  export { type MessageListParams as MessageListParams };\r\n}\r\n\r\nexport { type ChatCompletionStoreMessagesPage };\r\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;SAGbC,UAAU,QAAsC;SAEhDC,IAAI,QAAE;AAEf,OAAM,MAAOC,QAAS,SAAQH,WAAW;EACvC;;;;;;;;;;;;;;EAcAI,IAAIA,CACFC,YAAoB,EACpBC,KAAA,GAA8C,EAAE,EAChDC,OAAwB;IAExB,OAAO,IAAI,CAACC,OAAO,CAACC,UAAU,CAC5BP,IAAI,qBAAqBG,YAAY,WAAW,EAChDJ,UAAqD,EACrD;MAAEK,KAAK;MAAE,GAAGC;IAAO,CAAE,CACtB;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}