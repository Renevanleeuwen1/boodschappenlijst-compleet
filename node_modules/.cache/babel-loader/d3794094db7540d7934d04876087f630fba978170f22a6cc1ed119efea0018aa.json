{"ast":null,"code":"import * as Errors from \"./error.mjs\";\nimport { isObj, readEnv } from \"./internal/utils.mjs\";\nimport { OpenAI } from \"./client.mjs\";\nimport { buildHeaders } from \"./internal/headers.mjs\";\n/** API Client for interfacing with the Azure OpenAI API. */\nexport class AzureOpenAI extends OpenAI {\n  /**\r\n   * API Client for interfacing with the Azure OpenAI API.\r\n   *\r\n   * @param {string | undefined} [opts.apiVersion=process.env['OPENAI_API_VERSION'] ?? undefined]\r\n   * @param {string | undefined} [opts.endpoint=process.env['AZURE_OPENAI_ENDPOINT'] ?? undefined] - Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`\r\n   * @param {string | undefined} [opts.apiKey=process.env['AZURE_OPENAI_API_KEY'] ?? undefined]\r\n   * @param {string | undefined} opts.deployment - A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.\r\n   * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\r\n   * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL']] - Sets the base URL for the API, e.g. `https://example-resource.azure.openai.com/openai/`.\r\n   * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\r\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\r\n   * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\r\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\r\n   * @param {Headers} opts.defaultHeaders - Default headers to include with every request to the API.\r\n   * @param {DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\r\n   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\r\n   */\n  constructor({\n    baseURL = readEnv('OPENAI_BASE_URL'),\n    apiKey = readEnv('AZURE_OPENAI_API_KEY'),\n    apiVersion = readEnv('OPENAI_API_VERSION'),\n    endpoint,\n    deployment,\n    azureADTokenProvider,\n    dangerouslyAllowBrowser,\n    ...opts\n  } = {}) {\n    if (!apiVersion) {\n      throw new Errors.OpenAIError(\"The OPENAI_API_VERSION environment variable is missing or empty; either provide it, or instantiate the AzureOpenAI client with an apiVersion option, like new AzureOpenAI({ apiVersion: 'My API Version' }).\");\n    }\n    if (typeof azureADTokenProvider === 'function') {\n      dangerouslyAllowBrowser = true;\n    }\n    if (!azureADTokenProvider && !apiKey) {\n      throw new Errors.OpenAIError('Missing credentials. Please pass one of `apiKey` and `azureADTokenProvider`, or set the `AZURE_OPENAI_API_KEY` environment variable.');\n    }\n    if (azureADTokenProvider && apiKey) {\n      throw new Errors.OpenAIError('The `apiKey` and `azureADTokenProvider` arguments are mutually exclusive; only one can be passed at a time.');\n    }\n    // define a sentinel value to avoid any typing issues\n    apiKey ?? (apiKey = API_KEY_SENTINEL);\n    opts.defaultQuery = {\n      ...opts.defaultQuery,\n      'api-version': apiVersion\n    };\n    if (!baseURL) {\n      if (!endpoint) {\n        endpoint = process.env['AZURE_OPENAI_ENDPOINT'];\n      }\n      if (!endpoint) {\n        throw new Errors.OpenAIError('Must provide one of the `baseURL` or `endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable');\n      }\n      baseURL = `${endpoint}/openai`;\n    } else {\n      if (endpoint) {\n        throw new Errors.OpenAIError('baseURL and endpoint are mutually exclusive');\n      }\n    }\n    super({\n      apiKey,\n      baseURL,\n      ...opts,\n      ...(dangerouslyAllowBrowser !== undefined ? {\n        dangerouslyAllowBrowser\n      } : {})\n    });\n    this.apiVersion = '';\n    this._azureADTokenProvider = azureADTokenProvider;\n    this.apiVersion = apiVersion;\n    this.deploymentName = deployment;\n  }\n  buildRequest(options, props = {}) {\n    if (_deployments_endpoints.has(options.path) && options.method === 'post' && options.body !== undefined) {\n      if (!isObj(options.body)) {\n        throw new Error('Expected request body to be an object');\n      }\n      const model = this.deploymentName || options.body['model'] || options.__metadata?.['model'];\n      if (model !== undefined && !this.baseURL.includes('/deployments')) {\n        options.path = `/deployments/${model}${options.path}`;\n      }\n    }\n    return super.buildRequest(options, props);\n  }\n  async _getAzureADToken() {\n    if (typeof this._azureADTokenProvider === 'function') {\n      const token = await this._azureADTokenProvider();\n      if (!token || typeof token !== 'string') {\n        throw new Errors.OpenAIError(`Expected 'azureADTokenProvider' argument to return a string but it returned ${token}`);\n      }\n      return token;\n    }\n    return undefined;\n  }\n  authHeaders(opts) {\n    return;\n  }\n  async prepareOptions(opts) {\n    opts.headers = buildHeaders([opts.headers]);\n    /**\r\n     * The user should provide a bearer token provider if they want\r\n     * to use Azure AD authentication. The user shouldn't set the\r\n     * Authorization header manually because the header is overwritten\r\n     * with the Azure AD token if a bearer token provider is provided.\r\n     */\n    if (opts.headers.values.get('Authorization') || opts.headers.values.get('api-key')) {\n      return super.prepareOptions(opts);\n    }\n    const token = await this._getAzureADToken();\n    if (token) {\n      opts.headers.values.set('Authorization', `Bearer ${token}`);\n    } else if (this.apiKey !== API_KEY_SENTINEL) {\n      opts.headers.values.set('api-key', this.apiKey);\n    } else {\n      throw new Errors.OpenAIError('Unable to handle auth');\n    }\n    return super.prepareOptions(opts);\n  }\n}\nconst _deployments_endpoints = new Set(['/completions', '/chat/completions', '/embeddings', '/audio/transcriptions', '/audio/translations', '/audio/speech', '/images/generations', '/batches', '/images/edits']);\nconst API_KEY_SENTINEL = '<Missing Key>';","map":{"version":3,"names":["Errors","isObj","readEnv","OpenAI","buildHeaders","AzureOpenAI","constructor","baseURL","apiKey","apiVersion","endpoint","deployment","azureADTokenProvider","dangerouslyAllowBrowser","opts","OpenAIError","API_KEY_SENTINEL","defaultQuery","process","env","undefined","_azureADTokenProvider","deploymentName","buildRequest","options","props","_deployments_endpoints","has","path","method","body","Error","model","__metadata","includes","_getAzureADToken","token","authHeaders","prepareOptions","headers","values","get","set","Set"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-nieuw\\node_modules\\openai\\src\\azure.ts"],"sourcesContent":["import type { RequestInit } from './internal/builtin-types';\r\nimport * as Errors from './error';\r\nimport { FinalRequestOptions } from './internal/request-options';\r\nimport { isObj, readEnv } from './internal/utils';\r\nimport { ClientOptions, OpenAI } from './client';\r\nimport { buildHeaders, NullableHeaders } from './internal/headers';\r\n\r\n/** API Client for interfacing with the Azure OpenAI API. */\r\nexport interface AzureClientOptions extends ClientOptions {\r\n  /**\r\n   * Defaults to process.env['OPENAI_API_VERSION'].\r\n   */\r\n  apiVersion?: string | undefined;\r\n\r\n  /**\r\n   * Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`\r\n   */\r\n  endpoint?: string | undefined;\r\n\r\n  /**\r\n   * A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.\r\n   * Note: this means you won't be able to use non-deployment endpoints. Not supported with Assistants APIs.\r\n   */\r\n  deployment?: string | undefined;\r\n\r\n  /**\r\n   * Defaults to process.env['AZURE_OPENAI_API_KEY'].\r\n   */\r\n  apiKey?: string | undefined;\r\n\r\n  /**\r\n   * A function that returns an access token for Microsoft Entra (formerly known as Azure Active Directory),\r\n   * which will be invoked on every request.\r\n   */\r\n  azureADTokenProvider?: (() => Promise<string>) | undefined;\r\n}\r\n\r\n/** API Client for interfacing with the Azure OpenAI API. */\r\nexport class AzureOpenAI extends OpenAI {\r\n  private _azureADTokenProvider: (() => Promise<string>) | undefined;\r\n  deploymentName: string | undefined;\r\n  apiVersion: string = '';\r\n\r\n  /**\r\n   * API Client for interfacing with the Azure OpenAI API.\r\n   *\r\n   * @param {string | undefined} [opts.apiVersion=process.env['OPENAI_API_VERSION'] ?? undefined]\r\n   * @param {string | undefined} [opts.endpoint=process.env['AZURE_OPENAI_ENDPOINT'] ?? undefined] - Your Azure endpoint, including the resource, e.g. `https://example-resource.azure.openai.com/`\r\n   * @param {string | undefined} [opts.apiKey=process.env['AZURE_OPENAI_API_KEY'] ?? undefined]\r\n   * @param {string | undefined} opts.deployment - A model deployment, if given, sets the base client URL to include `/deployments/{deployment}`.\r\n   * @param {string | null | undefined} [opts.organization=process.env['OPENAI_ORG_ID'] ?? null]\r\n   * @param {string} [opts.baseURL=process.env['OPENAI_BASE_URL']] - Sets the base URL for the API, e.g. `https://example-resource.azure.openai.com/openai/`.\r\n   * @param {number} [opts.timeout=10 minutes] - The maximum amount of time (in milliseconds) the client will wait for a response before timing out.\r\n   * @param {number} [opts.httpAgent] - An HTTP agent used to manage HTTP(s) connections.\r\n   * @param {Fetch} [opts.fetch] - Specify a custom `fetch` function implementation.\r\n   * @param {number} [opts.maxRetries=2] - The maximum number of times the client will retry a request.\r\n   * @param {Headers} opts.defaultHeaders - Default headers to include with every request to the API.\r\n   * @param {DefaultQuery} opts.defaultQuery - Default query parameters to include with every request to the API.\r\n   * @param {boolean} [opts.dangerouslyAllowBrowser=false] - By default, client-side use of this library is not allowed, as it risks exposing your secret API credentials to attackers.\r\n   */\r\n  constructor({\r\n    baseURL = readEnv('OPENAI_BASE_URL'),\r\n    apiKey = readEnv('AZURE_OPENAI_API_KEY'),\r\n    apiVersion = readEnv('OPENAI_API_VERSION'),\r\n    endpoint,\r\n    deployment,\r\n    azureADTokenProvider,\r\n    dangerouslyAllowBrowser,\r\n    ...opts\r\n  }: AzureClientOptions = {}) {\r\n    if (!apiVersion) {\r\n      throw new Errors.OpenAIError(\r\n        \"The OPENAI_API_VERSION environment variable is missing or empty; either provide it, or instantiate the AzureOpenAI client with an apiVersion option, like new AzureOpenAI({ apiVersion: 'My API Version' }).\",\r\n      );\r\n    }\r\n\r\n    if (typeof azureADTokenProvider === 'function') {\r\n      dangerouslyAllowBrowser = true;\r\n    }\r\n\r\n    if (!azureADTokenProvider && !apiKey) {\r\n      throw new Errors.OpenAIError(\r\n        'Missing credentials. Please pass one of `apiKey` and `azureADTokenProvider`, or set the `AZURE_OPENAI_API_KEY` environment variable.',\r\n      );\r\n    }\r\n\r\n    if (azureADTokenProvider && apiKey) {\r\n      throw new Errors.OpenAIError(\r\n        'The `apiKey` and `azureADTokenProvider` arguments are mutually exclusive; only one can be passed at a time.',\r\n      );\r\n    }\r\n\r\n    // define a sentinel value to avoid any typing issues\r\n    apiKey ??= API_KEY_SENTINEL;\r\n\r\n    opts.defaultQuery = { ...opts.defaultQuery, 'api-version': apiVersion };\r\n\r\n    if (!baseURL) {\r\n      if (!endpoint) {\r\n        endpoint = process.env['AZURE_OPENAI_ENDPOINT'];\r\n      }\r\n\r\n      if (!endpoint) {\r\n        throw new Errors.OpenAIError(\r\n          'Must provide one of the `baseURL` or `endpoint` arguments, or the `AZURE_OPENAI_ENDPOINT` environment variable',\r\n        );\r\n      }\r\n\r\n      baseURL = `${endpoint}/openai`;\r\n    } else {\r\n      if (endpoint) {\r\n        throw new Errors.OpenAIError('baseURL and endpoint are mutually exclusive');\r\n      }\r\n    }\r\n\r\n    super({\r\n      apiKey,\r\n      baseURL,\r\n      ...opts,\r\n      ...(dangerouslyAllowBrowser !== undefined ? { dangerouslyAllowBrowser } : {}),\r\n    });\r\n\r\n    this._azureADTokenProvider = azureADTokenProvider;\r\n    this.apiVersion = apiVersion;\r\n    this.deploymentName = deployment;\r\n  }\r\n\r\n  override buildRequest(\r\n    options: FinalRequestOptions,\r\n    props: { retryCount?: number } = {},\r\n  ): { req: RequestInit & { headers: Headers }; url: string; timeout: number } {\r\n    if (_deployments_endpoints.has(options.path) && options.method === 'post' && options.body !== undefined) {\r\n      if (!isObj(options.body)) {\r\n        throw new Error('Expected request body to be an object');\r\n      }\r\n      const model = this.deploymentName || options.body['model'] || options.__metadata?.['model'];\r\n      if (model !== undefined && !this.baseURL.includes('/deployments')) {\r\n        options.path = `/deployments/${model}${options.path}`;\r\n      }\r\n    }\r\n    return super.buildRequest(options, props);\r\n  }\r\n\r\n  async _getAzureADToken(): Promise<string | undefined> {\r\n    if (typeof this._azureADTokenProvider === 'function') {\r\n      const token = await this._azureADTokenProvider();\r\n      if (!token || typeof token !== 'string') {\r\n        throw new Errors.OpenAIError(\r\n          `Expected 'azureADTokenProvider' argument to return a string but it returned ${token}`,\r\n        );\r\n      }\r\n      return token;\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  protected override authHeaders(opts: FinalRequestOptions): NullableHeaders | undefined {\r\n    return;\r\n  }\r\n\r\n  protected override async prepareOptions(opts: FinalRequestOptions): Promise<void> {\r\n    opts.headers = buildHeaders([opts.headers]);\r\n\r\n    /**\r\n     * The user should provide a bearer token provider if they want\r\n     * to use Azure AD authentication. The user shouldn't set the\r\n     * Authorization header manually because the header is overwritten\r\n     * with the Azure AD token if a bearer token provider is provided.\r\n     */\r\n    if (opts.headers.values.get('Authorization') || opts.headers.values.get('api-key')) {\r\n      return super.prepareOptions(opts);\r\n    }\r\n\r\n    const token = await this._getAzureADToken();\r\n    if (token) {\r\n      opts.headers.values.set('Authorization', `Bearer ${token}`);\r\n    } else if (this.apiKey !== API_KEY_SENTINEL) {\r\n      opts.headers.values.set('api-key', this.apiKey);\r\n    } else {\r\n      throw new Errors.OpenAIError('Unable to handle auth');\r\n    }\r\n    return super.prepareOptions(opts);\r\n  }\r\n}\r\n\r\nconst _deployments_endpoints = new Set([\r\n  '/completions',\r\n  '/chat/completions',\r\n  '/embeddings',\r\n  '/audio/transcriptions',\r\n  '/audio/translations',\r\n  '/audio/speech',\r\n  '/images/generations',\r\n  '/batches',\r\n  '/images/edits',\r\n]);\r\n\r\nconst API_KEY_SENTINEL = '<Missing Key>';\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}