{"ast":null,"code":"import { ContentFilterFinishReasonError, LengthFinishReasonError, OpenAIError } from \"../error.mjs\";\nexport function makeParseableResponseFormat(response_format, parser) {\n  const obj = {\n    ...response_format\n  };\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-response-format',\n      enumerable: false\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false\n    }\n  });\n  return obj;\n}\nexport function makeParseableTextFormat(response_format, parser) {\n  const obj = {\n    ...response_format\n  };\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-response-format',\n      enumerable: false\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false\n    }\n  });\n  return obj;\n}\nexport function isAutoParsableResponseFormat(response_format) {\n  return response_format?.['$brand'] === 'auto-parseable-response-format';\n}\nexport function makeParseableTool(tool, {\n  parser,\n  callback\n}) {\n  const obj = {\n    ...tool\n  };\n  Object.defineProperties(obj, {\n    $brand: {\n      value: 'auto-parseable-tool',\n      enumerable: false\n    },\n    $parseRaw: {\n      value: parser,\n      enumerable: false\n    },\n    $callback: {\n      value: callback,\n      enumerable: false\n    }\n  });\n  return obj;\n}\nexport function isAutoParsableTool(tool) {\n  return tool?.['$brand'] === 'auto-parseable-tool';\n}\nexport function maybeParseChatCompletion(completion, params) {\n  if (!params || !hasAutoParseableInput(params)) {\n    return {\n      ...completion,\n      choices: completion.choices.map(choice => ({\n        ...choice,\n        message: {\n          ...choice.message,\n          parsed: null,\n          ...(choice.message.tool_calls ? {\n            tool_calls: choice.message.tool_calls\n          } : undefined)\n        }\n      }))\n    };\n  }\n  return parseChatCompletion(completion, params);\n}\nexport function parseChatCompletion(completion, params) {\n  const choices = completion.choices.map(choice => {\n    if (choice.finish_reason === 'length') {\n      throw new LengthFinishReasonError();\n    }\n    if (choice.finish_reason === 'content_filter') {\n      throw new ContentFilterFinishReasonError();\n    }\n    return {\n      ...choice,\n      message: {\n        ...choice.message,\n        ...(choice.message.tool_calls ? {\n          tool_calls: choice.message.tool_calls?.map(toolCall => parseToolCall(params, toolCall)) ?? undefined\n        } : undefined),\n        parsed: choice.message.content && !choice.message.refusal ? parseResponseFormat(params, choice.message.content) : null\n      }\n    };\n  });\n  return {\n    ...completion,\n    choices\n  };\n}\nfunction parseResponseFormat(params, content) {\n  if (params.response_format?.type !== 'json_schema') {\n    return null;\n  }\n  if (params.response_format?.type === 'json_schema') {\n    if ('$parseRaw' in params.response_format) {\n      const response_format = params.response_format;\n      return response_format.$parseRaw(content);\n    }\n    return JSON.parse(content);\n  }\n  return null;\n}\nfunction parseToolCall(params, toolCall) {\n  const inputTool = params.tools?.find(inputTool => inputTool.function?.name === toolCall.function.name);\n  return {\n    ...toolCall,\n    function: {\n      ...toolCall.function,\n      parsed_arguments: isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments) : inputTool?.function.strict ? JSON.parse(toolCall.function.arguments) : null\n    }\n  };\n}\nexport function shouldParseToolCall(params, toolCall) {\n  if (!params) {\n    return false;\n  }\n  const inputTool = params.tools?.find(inputTool => inputTool.function?.name === toolCall.function.name);\n  return isAutoParsableTool(inputTool) || inputTool?.function.strict || false;\n}\nexport function hasAutoParseableInput(params) {\n  if (isAutoParsableResponseFormat(params.response_format)) {\n    return true;\n  }\n  return params.tools?.some(t => isAutoParsableTool(t) || t.type === 'function' && t.function.strict === true) ?? false;\n}\nexport function validateInputTools(tools) {\n  for (const tool of tools ?? []) {\n    if (tool.type !== 'function') {\n      throw new OpenAIError(`Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``);\n    }\n    if (tool.function.strict !== true) {\n      throw new OpenAIError(`The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`);\n    }\n  }\n}","map":{"version":3,"names":["ContentFilterFinishReasonError","LengthFinishReasonError","OpenAIError","makeParseableResponseFormat","response_format","parser","obj","Object","defineProperties","$brand","value","enumerable","$parseRaw","makeParseableTextFormat","isAutoParsableResponseFormat","makeParseableTool","tool","callback","$callback","isAutoParsableTool","maybeParseChatCompletion","completion","params","hasAutoParseableInput","choices","map","choice","message","parsed","tool_calls","undefined","parseChatCompletion","finish_reason","toolCall","parseToolCall","content","refusal","parseResponseFormat","type","JSON","parse","inputTool","tools","find","function","name","parsed_arguments","arguments","strict","shouldParseToolCall","some","t","validateInputTools"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-compleet\\node_modules\\openai\\src\\lib\\parser.ts"],"sourcesContent":["import {\r\n  ChatCompletion,\r\n  ChatCompletionCreateParams,\r\n  ChatCompletionMessageToolCall,\r\n  ChatCompletionTool,\r\n} from '../resources/chat/completions';\r\nimport {\r\n  ChatCompletionStreamingToolRunnerParams,\r\n  ChatCompletionStreamParams,\r\n  ChatCompletionToolRunnerParams,\r\n  ParsedChatCompletion,\r\n  ParsedChoice,\r\n  ParsedFunctionToolCall,\r\n} from '../resources/chat/completions';\r\nimport { ResponseFormatJSONSchema } from '../resources/shared';\r\nimport { ContentFilterFinishReasonError, LengthFinishReasonError, OpenAIError } from '../error';\r\nimport { type ResponseFormatTextJSONSchemaConfig } from '../resources/responses/responses';\r\n\r\ntype AnyChatCompletionCreateParams =\r\n  | ChatCompletionCreateParams\r\n  | ChatCompletionToolRunnerParams<any>\r\n  | ChatCompletionStreamingToolRunnerParams<any>\r\n  | ChatCompletionStreamParams;\r\n\r\nexport type ExtractParsedContentFromParams<Params extends AnyChatCompletionCreateParams> =\r\n  Params['response_format'] extends AutoParseableResponseFormat<infer P> ? P : null;\r\n\r\nexport type AutoParseableResponseFormat<ParsedT> = ResponseFormatJSONSchema & {\r\n  __output: ParsedT; // type-level only\r\n\r\n  $brand: 'auto-parseable-response-format';\r\n  $parseRaw(content: string): ParsedT;\r\n};\r\n\r\nexport function makeParseableResponseFormat<ParsedT>(\r\n  response_format: ResponseFormatJSONSchema,\r\n  parser: (content: string) => ParsedT,\r\n): AutoParseableResponseFormat<ParsedT> {\r\n  const obj = { ...response_format };\r\n\r\n  Object.defineProperties(obj, {\r\n    $brand: {\r\n      value: 'auto-parseable-response-format',\r\n      enumerable: false,\r\n    },\r\n    $parseRaw: {\r\n      value: parser,\r\n      enumerable: false,\r\n    },\r\n  });\r\n\r\n  return obj as AutoParseableResponseFormat<ParsedT>;\r\n}\r\n\r\nexport type AutoParseableTextFormat<ParsedT> = ResponseFormatTextJSONSchemaConfig & {\r\n  __output: ParsedT; // type-level only\r\n\r\n  $brand: 'auto-parseable-response-format';\r\n  $parseRaw(content: string): ParsedT;\r\n};\r\n\r\nexport function makeParseableTextFormat<ParsedT>(\r\n  response_format: ResponseFormatTextJSONSchemaConfig,\r\n  parser: (content: string) => ParsedT,\r\n): AutoParseableTextFormat<ParsedT> {\r\n  const obj = { ...response_format };\r\n\r\n  Object.defineProperties(obj, {\r\n    $brand: {\r\n      value: 'auto-parseable-response-format',\r\n      enumerable: false,\r\n    },\r\n    $parseRaw: {\r\n      value: parser,\r\n      enumerable: false,\r\n    },\r\n  });\r\n\r\n  return obj as AutoParseableTextFormat<ParsedT>;\r\n}\r\n\r\nexport function isAutoParsableResponseFormat<ParsedT>(\r\n  response_format: any,\r\n): response_format is AutoParseableResponseFormat<ParsedT> {\r\n  return response_format?.['$brand'] === 'auto-parseable-response-format';\r\n}\r\n\r\ntype ToolOptions = {\r\n  name: string;\r\n  arguments: any;\r\n  function?: ((args: any) => any) | undefined;\r\n};\r\n\r\nexport type AutoParseableTool<\r\n  OptionsT extends ToolOptions,\r\n  HasFunction = OptionsT['function'] extends Function ? true : false,\r\n> = ChatCompletionTool & {\r\n  __arguments: OptionsT['arguments']; // type-level only\r\n  __name: OptionsT['name']; // type-level only\r\n  __hasFunction: HasFunction; // type-level only\r\n\r\n  $brand: 'auto-parseable-tool';\r\n  $callback: ((args: OptionsT['arguments']) => any) | undefined;\r\n  $parseRaw(args: string): OptionsT['arguments'];\r\n};\r\n\r\nexport function makeParseableTool<OptionsT extends ToolOptions>(\r\n  tool: ChatCompletionTool,\r\n  {\r\n    parser,\r\n    callback,\r\n  }: {\r\n    parser: (content: string) => OptionsT['arguments'];\r\n    callback: ((args: any) => any) | undefined;\r\n  },\r\n): AutoParseableTool<OptionsT['arguments']> {\r\n  const obj = { ...tool };\r\n\r\n  Object.defineProperties(obj, {\r\n    $brand: {\r\n      value: 'auto-parseable-tool',\r\n      enumerable: false,\r\n    },\r\n    $parseRaw: {\r\n      value: parser,\r\n      enumerable: false,\r\n    },\r\n    $callback: {\r\n      value: callback,\r\n      enumerable: false,\r\n    },\r\n  });\r\n\r\n  return obj as AutoParseableTool<OptionsT['arguments']>;\r\n}\r\n\r\nexport function isAutoParsableTool(tool: any): tool is AutoParseableTool<any> {\r\n  return tool?.['$brand'] === 'auto-parseable-tool';\r\n}\r\n\r\nexport function maybeParseChatCompletion<\r\n  Params extends ChatCompletionCreateParams | null,\r\n  ParsedT = Params extends null ? null : ExtractParsedContentFromParams<NonNullable<Params>>,\r\n>(completion: ChatCompletion, params: Params): ParsedChatCompletion<ParsedT> {\r\n  if (!params || !hasAutoParseableInput(params)) {\r\n    return {\r\n      ...completion,\r\n      choices: completion.choices.map((choice) => ({\r\n        ...choice,\r\n        message: {\r\n          ...choice.message,\r\n          parsed: null,\r\n          ...(choice.message.tool_calls ?\r\n            {\r\n              tool_calls: choice.message.tool_calls,\r\n            }\r\n          : undefined),\r\n        },\r\n      })),\r\n    };\r\n  }\r\n\r\n  return parseChatCompletion(completion, params);\r\n}\r\n\r\nexport function parseChatCompletion<\r\n  Params extends ChatCompletionCreateParams,\r\n  ParsedT = ExtractParsedContentFromParams<Params>,\r\n>(completion: ChatCompletion, params: Params): ParsedChatCompletion<ParsedT> {\r\n  const choices: Array<ParsedChoice<ParsedT>> = completion.choices.map((choice): ParsedChoice<ParsedT> => {\r\n    if (choice.finish_reason === 'length') {\r\n      throw new LengthFinishReasonError();\r\n    }\r\n\r\n    if (choice.finish_reason === 'content_filter') {\r\n      throw new ContentFilterFinishReasonError();\r\n    }\r\n\r\n    return {\r\n      ...choice,\r\n      message: {\r\n        ...choice.message,\r\n        ...(choice.message.tool_calls ?\r\n          {\r\n            tool_calls:\r\n              choice.message.tool_calls?.map((toolCall) => parseToolCall(params, toolCall)) ?? undefined,\r\n          }\r\n        : undefined),\r\n        parsed:\r\n          choice.message.content && !choice.message.refusal ?\r\n            parseResponseFormat(params, choice.message.content)\r\n          : null,\r\n      },\r\n    };\r\n  });\r\n\r\n  return { ...completion, choices };\r\n}\r\n\r\nfunction parseResponseFormat<\r\n  Params extends ChatCompletionCreateParams,\r\n  ParsedT = ExtractParsedContentFromParams<Params>,\r\n>(params: Params, content: string): ParsedT | null {\r\n  if (params.response_format?.type !== 'json_schema') {\r\n    return null;\r\n  }\r\n\r\n  if (params.response_format?.type === 'json_schema') {\r\n    if ('$parseRaw' in params.response_format) {\r\n      const response_format = params.response_format as AutoParseableResponseFormat<ParsedT>;\r\n\r\n      return response_format.$parseRaw(content);\r\n    }\r\n\r\n    return JSON.parse(content);\r\n  }\r\n\r\n  return null;\r\n}\r\n\r\nfunction parseToolCall<Params extends ChatCompletionCreateParams>(\r\n  params: Params,\r\n  toolCall: ChatCompletionMessageToolCall,\r\n): ParsedFunctionToolCall {\r\n  const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);\r\n  return {\r\n    ...toolCall,\r\n    function: {\r\n      ...toolCall.function,\r\n      parsed_arguments:\r\n        isAutoParsableTool(inputTool) ? inputTool.$parseRaw(toolCall.function.arguments)\r\n        : inputTool?.function.strict ? JSON.parse(toolCall.function.arguments)\r\n        : null,\r\n    },\r\n  };\r\n}\r\n\r\nexport function shouldParseToolCall(\r\n  params: ChatCompletionCreateParams | null | undefined,\r\n  toolCall: ChatCompletionMessageToolCall,\r\n): boolean {\r\n  if (!params) {\r\n    return false;\r\n  }\r\n\r\n  const inputTool = params.tools?.find((inputTool) => inputTool.function?.name === toolCall.function.name);\r\n  return isAutoParsableTool(inputTool) || inputTool?.function.strict || false;\r\n}\r\n\r\nexport function hasAutoParseableInput(params: AnyChatCompletionCreateParams): boolean {\r\n  if (isAutoParsableResponseFormat(params.response_format)) {\r\n    return true;\r\n  }\r\n\r\n  return (\r\n    params.tools?.some(\r\n      (t) => isAutoParsableTool(t) || (t.type === 'function' && t.function.strict === true),\r\n    ) ?? false\r\n  );\r\n}\r\n\r\nexport function validateInputTools(tools: ChatCompletionTool[] | undefined) {\r\n  for (const tool of tools ?? []) {\r\n    if (tool.type !== 'function') {\r\n      throw new OpenAIError(\r\n        `Currently only \\`function\\` tool types support auto-parsing; Received \\`${tool.type}\\``,\r\n      );\r\n    }\r\n\r\n    if (tool.function.strict !== true) {\r\n      throw new OpenAIError(\r\n        `The \\`${tool.function.name}\\` tool is not marked with \\`strict: true\\`. Only strict function tools can be auto-parsed`,\r\n      );\r\n    }\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}