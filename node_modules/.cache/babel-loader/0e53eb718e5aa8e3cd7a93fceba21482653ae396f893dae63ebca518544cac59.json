{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../core/resource.mjs\";\nexport class Moderations extends APIResource {\n  /**\r\n   * Classifies if text and/or image inputs are potentially harmful. Learn more in\r\n   * the [moderation guide](https://platform.openai.com/docs/guides/moderation).\r\n   */\n  create(body, options) {\n    return this._client.post('/moderations', {\n      body,\n      ...options\n    });\n  }\n}","map":{"version":3,"names":["APIResource","Moderations","create","body","options","_client","post"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-compleet\\node_modules\\openai\\src\\resources\\moderations.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../core/resource';\r\nimport { APIPromise } from '../core/api-promise';\r\nimport { RequestOptions } from '../internal/request-options';\r\n\r\nexport class Moderations extends APIResource {\r\n  /**\r\n   * Classifies if text and/or image inputs are potentially harmful. Learn more in\r\n   * the [moderation guide](https://platform.openai.com/docs/guides/moderation).\r\n   */\r\n  create(body: ModerationCreateParams, options?: RequestOptions): APIPromise<ModerationCreateResponse> {\r\n    return this._client.post('/moderations', { body, ...options });\r\n  }\r\n}\r\n\r\nexport interface Moderation {\r\n  /**\r\n   * A list of the categories, and whether they are flagged or not.\r\n   */\r\n  categories: Moderation.Categories;\r\n\r\n  /**\r\n   * A list of the categories along with the input type(s) that the score applies to.\r\n   */\r\n  category_applied_input_types: Moderation.CategoryAppliedInputTypes;\r\n\r\n  /**\r\n   * A list of the categories along with their scores as predicted by model.\r\n   */\r\n  category_scores: Moderation.CategoryScores;\r\n\r\n  /**\r\n   * Whether any of the below categories are flagged.\r\n   */\r\n  flagged: boolean;\r\n}\r\n\r\nexport namespace Moderation {\r\n  /**\r\n   * A list of the categories, and whether they are flagged or not.\r\n   */\r\n  export interface Categories {\r\n    /**\r\n     * Content that expresses, incites, or promotes harassing language towards any\r\n     * target.\r\n     */\r\n    harassment: boolean;\r\n\r\n    /**\r\n     * Harassment content that also includes violence or serious harm towards any\r\n     * target.\r\n     */\r\n    'harassment/threatening': boolean;\r\n\r\n    /**\r\n     * Content that expresses, incites, or promotes hate based on race, gender,\r\n     * ethnicity, religion, nationality, sexual orientation, disability status, or\r\n     * caste. Hateful content aimed at non-protected groups (e.g., chess players) is\r\n     * harassment.\r\n     */\r\n    hate: boolean;\r\n\r\n    /**\r\n     * Hateful content that also includes violence or serious harm towards the targeted\r\n     * group based on race, gender, ethnicity, religion, nationality, sexual\r\n     * orientation, disability status, or caste.\r\n     */\r\n    'hate/threatening': boolean;\r\n\r\n    /**\r\n     * Content that includes instructions or advice that facilitate the planning or\r\n     * execution of wrongdoing, or that gives advice or instruction on how to commit\r\n     * illicit acts. For example, \"how to shoplift\" would fit this category.\r\n     */\r\n    illicit: boolean | null;\r\n\r\n    /**\r\n     * Content that includes instructions or advice that facilitate the planning or\r\n     * execution of wrongdoing that also includes violence, or that gives advice or\r\n     * instruction on the procurement of any weapon.\r\n     */\r\n    'illicit/violent': boolean | null;\r\n\r\n    /**\r\n     * Content that promotes, encourages, or depicts acts of self-harm, such as\r\n     * suicide, cutting, and eating disorders.\r\n     */\r\n    'self-harm': boolean;\r\n\r\n    /**\r\n     * Content that encourages performing acts of self-harm, such as suicide, cutting,\r\n     * and eating disorders, or that gives instructions or advice on how to commit such\r\n     * acts.\r\n     */\r\n    'self-harm/instructions': boolean;\r\n\r\n    /**\r\n     * Content where the speaker expresses that they are engaging or intend to engage\r\n     * in acts of self-harm, such as suicide, cutting, and eating disorders.\r\n     */\r\n    'self-harm/intent': boolean;\r\n\r\n    /**\r\n     * Content meant to arouse sexual excitement, such as the description of sexual\r\n     * activity, or that promotes sexual services (excluding sex education and\r\n     * wellness).\r\n     */\r\n    sexual: boolean;\r\n\r\n    /**\r\n     * Sexual content that includes an individual who is under 18 years old.\r\n     */\r\n    'sexual/minors': boolean;\r\n\r\n    /**\r\n     * Content that depicts death, violence, or physical injury.\r\n     */\r\n    violence: boolean;\r\n\r\n    /**\r\n     * Content that depicts death, violence, or physical injury in graphic detail.\r\n     */\r\n    'violence/graphic': boolean;\r\n  }\r\n\r\n  /**\r\n   * A list of the categories along with the input type(s) that the score applies to.\r\n   */\r\n  export interface CategoryAppliedInputTypes {\r\n    /**\r\n     * The applied input type(s) for the category 'harassment'.\r\n     */\r\n    harassment: Array<'text'>;\r\n\r\n    /**\r\n     * The applied input type(s) for the category 'harassment/threatening'.\r\n     */\r\n    'harassment/threatening': Array<'text'>;\r\n\r\n    /**\r\n     * The applied input type(s) for the category 'hate'.\r\n     */\r\n    hate: Array<'text'>;\r\n\r\n    /**\r\n     * The applied input type(s) for the category 'hate/threatening'.\r\n     */\r\n    'hate/threatening': Array<'text'>;\r\n\r\n    /**\r\n     * The applied input type(s) for the category 'illicit'.\r\n     */\r\n    illicit: Array<'text'>;\r\n\r\n    /**\r\n     * The applied input type(s) for the category 'illicit/violent'.\r\n     */\r\n    'illicit/violent': Array<'text'>;\r\n\r\n    /**\r\n     * The applied input type(s) for the category 'self-harm'.\r\n     */\r\n    'self-harm': Array<'text' | 'image'>;\r\n\r\n    /**\r\n     * The applied input type(s) for the category 'self-harm/instructions'.\r\n     */\r\n    'self-harm/instructions': Array<'text' | 'image'>;\r\n\r\n    /**\r\n     * The applied input type(s) for the category 'self-harm/intent'.\r\n     */\r\n    'self-harm/intent': Array<'text' | 'image'>;\r\n\r\n    /**\r\n     * The applied input type(s) for the category 'sexual'.\r\n     */\r\n    sexual: Array<'text' | 'image'>;\r\n\r\n    /**\r\n     * The applied input type(s) for the category 'sexual/minors'.\r\n     */\r\n    'sexual/minors': Array<'text'>;\r\n\r\n    /**\r\n     * The applied input type(s) for the category 'violence'.\r\n     */\r\n    violence: Array<'text' | 'image'>;\r\n\r\n    /**\r\n     * The applied input type(s) for the category 'violence/graphic'.\r\n     */\r\n    'violence/graphic': Array<'text' | 'image'>;\r\n  }\r\n\r\n  /**\r\n   * A list of the categories along with their scores as predicted by model.\r\n   */\r\n  export interface CategoryScores {\r\n    /**\r\n     * The score for the category 'harassment'.\r\n     */\r\n    harassment: number;\r\n\r\n    /**\r\n     * The score for the category 'harassment/threatening'.\r\n     */\r\n    'harassment/threatening': number;\r\n\r\n    /**\r\n     * The score for the category 'hate'.\r\n     */\r\n    hate: number;\r\n\r\n    /**\r\n     * The score for the category 'hate/threatening'.\r\n     */\r\n    'hate/threatening': number;\r\n\r\n    /**\r\n     * The score for the category 'illicit'.\r\n     */\r\n    illicit: number;\r\n\r\n    /**\r\n     * The score for the category 'illicit/violent'.\r\n     */\r\n    'illicit/violent': number;\r\n\r\n    /**\r\n     * The score for the category 'self-harm'.\r\n     */\r\n    'self-harm': number;\r\n\r\n    /**\r\n     * The score for the category 'self-harm/instructions'.\r\n     */\r\n    'self-harm/instructions': number;\r\n\r\n    /**\r\n     * The score for the category 'self-harm/intent'.\r\n     */\r\n    'self-harm/intent': number;\r\n\r\n    /**\r\n     * The score for the category 'sexual'.\r\n     */\r\n    sexual: number;\r\n\r\n    /**\r\n     * The score for the category 'sexual/minors'.\r\n     */\r\n    'sexual/minors': number;\r\n\r\n    /**\r\n     * The score for the category 'violence'.\r\n     */\r\n    violence: number;\r\n\r\n    /**\r\n     * The score for the category 'violence/graphic'.\r\n     */\r\n    'violence/graphic': number;\r\n  }\r\n}\r\n\r\n/**\r\n * An object describing an image to classify.\r\n */\r\nexport interface ModerationImageURLInput {\r\n  /**\r\n   * Contains either an image URL or a data URL for a base64 encoded image.\r\n   */\r\n  image_url: ModerationImageURLInput.ImageURL;\r\n\r\n  /**\r\n   * Always `image_url`.\r\n   */\r\n  type: 'image_url';\r\n}\r\n\r\nexport namespace ModerationImageURLInput {\r\n  /**\r\n   * Contains either an image URL or a data URL for a base64 encoded image.\r\n   */\r\n  export interface ImageURL {\r\n    /**\r\n     * Either a URL of the image or the base64 encoded image data.\r\n     */\r\n    url: string;\r\n  }\r\n}\r\n\r\nexport type ModerationModel =\r\n  | 'omni-moderation-latest'\r\n  | 'omni-moderation-2024-09-26'\r\n  | 'text-moderation-latest'\r\n  | 'text-moderation-stable';\r\n\r\n/**\r\n * An object describing an image to classify.\r\n */\r\nexport type ModerationMultiModalInput = ModerationImageURLInput | ModerationTextInput;\r\n\r\n/**\r\n * An object describing text to classify.\r\n */\r\nexport interface ModerationTextInput {\r\n  /**\r\n   * A string of text to classify.\r\n   */\r\n  text: string;\r\n\r\n  /**\r\n   * Always `text`.\r\n   */\r\n  type: 'text';\r\n}\r\n\r\n/**\r\n * Represents if a given text input is potentially harmful.\r\n */\r\nexport interface ModerationCreateResponse {\r\n  /**\r\n   * The unique identifier for the moderation request.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The model used to generate the moderation results.\r\n   */\r\n  model: string;\r\n\r\n  /**\r\n   * A list of moderation objects.\r\n   */\r\n  results: Array<Moderation>;\r\n}\r\n\r\nexport interface ModerationCreateParams {\r\n  /**\r\n   * Input (or inputs) to classify. Can be a single string, an array of strings, or\r\n   * an array of multi-modal input objects similar to other models.\r\n   */\r\n  input: string | Array<string> | Array<ModerationMultiModalInput>;\r\n\r\n  /**\r\n   * The content moderation model you would like to use. Learn more in\r\n   * [the moderation guide](https://platform.openai.com/docs/guides/moderation), and\r\n   * learn about available models\r\n   * [here](https://platform.openai.com/docs/models#moderation).\r\n   */\r\n  model?: (string & {}) | ModerationModel;\r\n}\r\n\r\nexport declare namespace Moderations {\r\n  export {\r\n    type Moderation as Moderation,\r\n    type ModerationImageURLInput as ModerationImageURLInput,\r\n    type ModerationModel as ModerationModel,\r\n    type ModerationMultiModalInput as ModerationMultiModalInput,\r\n    type ModerationTextInput as ModerationTextInput,\r\n    type ModerationCreateResponse as ModerationCreateResponse,\r\n    type ModerationCreateParams as ModerationCreateParams,\r\n  };\r\n}\r\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;AAItB,OAAM,MAAOC,WAAY,SAAQD,WAAW;EAC1C;;;;EAIAE,MAAMA,CAACC,IAA4B,EAAEC,OAAwB;IAC3D,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,cAAc,EAAE;MAAEH,IAAI;MAAE,GAAGC;IAAO,CAAE,CAAC;EAChE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}