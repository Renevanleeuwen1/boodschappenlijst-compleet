{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport { CursorPage } from \"../../../core/pagination.mjs\";\nimport { path } from \"../../../internal/utils/path.mjs\";\nexport class OutputItems extends APIResource {\n  /**\r\n   * Get an evaluation run output item by ID.\r\n   */\n  retrieve(outputItemID, params, options) {\n    const {\n      eval_id,\n      run_id\n    } = params;\n    return this._client.get(path`/evals/${eval_id}/runs/${run_id}/output_items/${outputItemID}`, options);\n  }\n  /**\r\n   * Get a list of output items for an evaluation run.\r\n   */\n  list(runID, params, options) {\n    const {\n      eval_id,\n      ...query\n    } = params;\n    return this._client.getAPIList(path`/evals/${eval_id}/runs/${runID}/output_items`, CursorPage, {\n      query,\n      ...options\n    });\n  }\n}","map":{"version":3,"names":["APIResource","CursorPage","path","OutputItems","retrieve","outputItemID","params","options","eval_id","run_id","_client","get","list","runID","query","getAPIList"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-nieuw\\node_modules\\openai\\src\\resources\\evals\\runs\\output-items.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../../../core/resource';\r\nimport * as RunsAPI from './runs';\r\nimport { APIPromise } from '../../../core/api-promise';\r\nimport { CursorPage, type CursorPageParams, PagePromise } from '../../../core/pagination';\r\nimport { RequestOptions } from '../../../internal/request-options';\r\nimport { path } from '../../../internal/utils/path';\r\n\r\nexport class OutputItems extends APIResource {\r\n  /**\r\n   * Get an evaluation run output item by ID.\r\n   */\r\n  retrieve(\r\n    outputItemID: string,\r\n    params: OutputItemRetrieveParams,\r\n    options?: RequestOptions,\r\n  ): APIPromise<OutputItemRetrieveResponse> {\r\n    const { eval_id, run_id } = params;\r\n    return this._client.get(path`/evals/${eval_id}/runs/${run_id}/output_items/${outputItemID}`, options);\r\n  }\r\n\r\n  /**\r\n   * Get a list of output items for an evaluation run.\r\n   */\r\n  list(\r\n    runID: string,\r\n    params: OutputItemListParams,\r\n    options?: RequestOptions,\r\n  ): PagePromise<OutputItemListResponsesPage, OutputItemListResponse> {\r\n    const { eval_id, ...query } = params;\r\n    return this._client.getAPIList(\r\n      path`/evals/${eval_id}/runs/${runID}/output_items`,\r\n      CursorPage<OutputItemListResponse>,\r\n      { query, ...options },\r\n    );\r\n  }\r\n}\r\n\r\nexport type OutputItemListResponsesPage = CursorPage<OutputItemListResponse>;\r\n\r\n/**\r\n * A schema representing an evaluation run output item.\r\n */\r\nexport interface OutputItemRetrieveResponse {\r\n  /**\r\n   * Unique identifier for the evaluation run output item.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * Unix timestamp (in seconds) when the evaluation run was created.\r\n   */\r\n  created_at: number;\r\n\r\n  /**\r\n   * Details of the input data source item.\r\n   */\r\n  datasource_item: Record<string, unknown>;\r\n\r\n  /**\r\n   * The identifier for the data source item.\r\n   */\r\n  datasource_item_id: number;\r\n\r\n  /**\r\n   * The identifier of the evaluation group.\r\n   */\r\n  eval_id: string;\r\n\r\n  /**\r\n   * The type of the object. Always \"eval.run.output_item\".\r\n   */\r\n  object: 'eval.run.output_item';\r\n\r\n  /**\r\n   * A list of results from the evaluation run.\r\n   */\r\n  results: Array<Record<string, unknown>>;\r\n\r\n  /**\r\n   * The identifier of the evaluation run associated with this output item.\r\n   */\r\n  run_id: string;\r\n\r\n  /**\r\n   * A sample containing the input and output of the evaluation run.\r\n   */\r\n  sample: OutputItemRetrieveResponse.Sample;\r\n\r\n  /**\r\n   * The status of the evaluation run.\r\n   */\r\n  status: string;\r\n}\r\n\r\nexport namespace OutputItemRetrieveResponse {\r\n  /**\r\n   * A sample containing the input and output of the evaluation run.\r\n   */\r\n  export interface Sample {\r\n    /**\r\n     * An object representing an error response from the Eval API.\r\n     */\r\n    error: RunsAPI.EvalAPIError;\r\n\r\n    /**\r\n     * The reason why the sample generation was finished.\r\n     */\r\n    finish_reason: string;\r\n\r\n    /**\r\n     * An array of input messages.\r\n     */\r\n    input: Array<Sample.Input>;\r\n\r\n    /**\r\n     * The maximum number of tokens allowed for completion.\r\n     */\r\n    max_completion_tokens: number;\r\n\r\n    /**\r\n     * The model used for generating the sample.\r\n     */\r\n    model: string;\r\n\r\n    /**\r\n     * An array of output messages.\r\n     */\r\n    output: Array<Sample.Output>;\r\n\r\n    /**\r\n     * The seed used for generating the sample.\r\n     */\r\n    seed: number;\r\n\r\n    /**\r\n     * The sampling temperature used.\r\n     */\r\n    temperature: number;\r\n\r\n    /**\r\n     * The top_p value used for sampling.\r\n     */\r\n    top_p: number;\r\n\r\n    /**\r\n     * Token usage details for the sample.\r\n     */\r\n    usage: Sample.Usage;\r\n  }\r\n\r\n  export namespace Sample {\r\n    /**\r\n     * An input message.\r\n     */\r\n    export interface Input {\r\n      /**\r\n       * The content of the message.\r\n       */\r\n      content: string;\r\n\r\n      /**\r\n       * The role of the message sender (e.g., system, user, developer).\r\n       */\r\n      role: string;\r\n    }\r\n\r\n    export interface Output {\r\n      /**\r\n       * The content of the message.\r\n       */\r\n      content?: string;\r\n\r\n      /**\r\n       * The role of the message (e.g. \"system\", \"assistant\", \"user\").\r\n       */\r\n      role?: string;\r\n    }\r\n\r\n    /**\r\n     * Token usage details for the sample.\r\n     */\r\n    export interface Usage {\r\n      /**\r\n       * The number of tokens retrieved from cache.\r\n       */\r\n      cached_tokens: number;\r\n\r\n      /**\r\n       * The number of completion tokens generated.\r\n       */\r\n      completion_tokens: number;\r\n\r\n      /**\r\n       * The number of prompt tokens used.\r\n       */\r\n      prompt_tokens: number;\r\n\r\n      /**\r\n       * The total number of tokens used.\r\n       */\r\n      total_tokens: number;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * A schema representing an evaluation run output item.\r\n */\r\nexport interface OutputItemListResponse {\r\n  /**\r\n   * Unique identifier for the evaluation run output item.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * Unix timestamp (in seconds) when the evaluation run was created.\r\n   */\r\n  created_at: number;\r\n\r\n  /**\r\n   * Details of the input data source item.\r\n   */\r\n  datasource_item: Record<string, unknown>;\r\n\r\n  /**\r\n   * The identifier for the data source item.\r\n   */\r\n  datasource_item_id: number;\r\n\r\n  /**\r\n   * The identifier of the evaluation group.\r\n   */\r\n  eval_id: string;\r\n\r\n  /**\r\n   * The type of the object. Always \"eval.run.output_item\".\r\n   */\r\n  object: 'eval.run.output_item';\r\n\r\n  /**\r\n   * A list of results from the evaluation run.\r\n   */\r\n  results: Array<Record<string, unknown>>;\r\n\r\n  /**\r\n   * The identifier of the evaluation run associated with this output item.\r\n   */\r\n  run_id: string;\r\n\r\n  /**\r\n   * A sample containing the input and output of the evaluation run.\r\n   */\r\n  sample: OutputItemListResponse.Sample;\r\n\r\n  /**\r\n   * The status of the evaluation run.\r\n   */\r\n  status: string;\r\n}\r\n\r\nexport namespace OutputItemListResponse {\r\n  /**\r\n   * A sample containing the input and output of the evaluation run.\r\n   */\r\n  export interface Sample {\r\n    /**\r\n     * An object representing an error response from the Eval API.\r\n     */\r\n    error: RunsAPI.EvalAPIError;\r\n\r\n    /**\r\n     * The reason why the sample generation was finished.\r\n     */\r\n    finish_reason: string;\r\n\r\n    /**\r\n     * An array of input messages.\r\n     */\r\n    input: Array<Sample.Input>;\r\n\r\n    /**\r\n     * The maximum number of tokens allowed for completion.\r\n     */\r\n    max_completion_tokens: number;\r\n\r\n    /**\r\n     * The model used for generating the sample.\r\n     */\r\n    model: string;\r\n\r\n    /**\r\n     * An array of output messages.\r\n     */\r\n    output: Array<Sample.Output>;\r\n\r\n    /**\r\n     * The seed used for generating the sample.\r\n     */\r\n    seed: number;\r\n\r\n    /**\r\n     * The sampling temperature used.\r\n     */\r\n    temperature: number;\r\n\r\n    /**\r\n     * The top_p value used for sampling.\r\n     */\r\n    top_p: number;\r\n\r\n    /**\r\n     * Token usage details for the sample.\r\n     */\r\n    usage: Sample.Usage;\r\n  }\r\n\r\n  export namespace Sample {\r\n    /**\r\n     * An input message.\r\n     */\r\n    export interface Input {\r\n      /**\r\n       * The content of the message.\r\n       */\r\n      content: string;\r\n\r\n      /**\r\n       * The role of the message sender (e.g., system, user, developer).\r\n       */\r\n      role: string;\r\n    }\r\n\r\n    export interface Output {\r\n      /**\r\n       * The content of the message.\r\n       */\r\n      content?: string;\r\n\r\n      /**\r\n       * The role of the message (e.g. \"system\", \"assistant\", \"user\").\r\n       */\r\n      role?: string;\r\n    }\r\n\r\n    /**\r\n     * Token usage details for the sample.\r\n     */\r\n    export interface Usage {\r\n      /**\r\n       * The number of tokens retrieved from cache.\r\n       */\r\n      cached_tokens: number;\r\n\r\n      /**\r\n       * The number of completion tokens generated.\r\n       */\r\n      completion_tokens: number;\r\n\r\n      /**\r\n       * The number of prompt tokens used.\r\n       */\r\n      prompt_tokens: number;\r\n\r\n      /**\r\n       * The total number of tokens used.\r\n       */\r\n      total_tokens: number;\r\n    }\r\n  }\r\n}\r\n\r\nexport interface OutputItemRetrieveParams {\r\n  /**\r\n   * The ID of the evaluation to retrieve runs for.\r\n   */\r\n  eval_id: string;\r\n\r\n  /**\r\n   * The ID of the run to retrieve.\r\n   */\r\n  run_id: string;\r\n}\r\n\r\nexport interface OutputItemListParams extends CursorPageParams {\r\n  /**\r\n   * Path param: The ID of the evaluation to retrieve runs for.\r\n   */\r\n  eval_id: string;\r\n\r\n  /**\r\n   * Query param: Sort order for output items by timestamp. Use `asc` for ascending\r\n   * order or `desc` for descending order. Defaults to `asc`.\r\n   */\r\n  order?: 'asc' | 'desc';\r\n\r\n  /**\r\n   * Query param: Filter output items by status. Use `failed` to filter by failed\r\n   * output items or `pass` to filter by passed output items.\r\n   */\r\n  status?: 'fail' | 'pass';\r\n}\r\n\r\nexport declare namespace OutputItems {\r\n  export {\r\n    type OutputItemRetrieveResponse as OutputItemRetrieveResponse,\r\n    type OutputItemListResponse as OutputItemListResponse,\r\n    type OutputItemListResponsesPage as OutputItemListResponsesPage,\r\n    type OutputItemRetrieveParams as OutputItemRetrieveParams,\r\n    type OutputItemListParams as OutputItemListParams,\r\n  };\r\n}\r\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;SAGbC,UAAU,QAAsC;SAEhDC,IAAI,QAAE;AAEf,OAAM,MAAOC,WAAY,SAAQH,WAAW;EAC1C;;;EAGAI,QAAQA,CACNC,YAAoB,EACpBC,MAAgC,EAChCC,OAAwB;IAExB,MAAM;MAAEC,OAAO;MAAEC;IAAM,CAAE,GAAGH,MAAM;IAClC,OAAO,IAAI,CAACI,OAAO,CAACC,GAAG,CAACT,IAAI,UAAUM,OAAO,SAASC,MAAM,iBAAiBJ,YAAY,EAAE,EAAEE,OAAO,CAAC;EACvG;EAEA;;;EAGAK,IAAIA,CACFC,KAAa,EACbP,MAA4B,EAC5BC,OAAwB;IAExB,MAAM;MAAEC,OAAO;MAAE,GAAGM;IAAK,CAAE,GAAGR,MAAM;IACpC,OAAO,IAAI,CAACI,OAAO,CAACK,UAAU,CAC5Bb,IAAI,UAAUM,OAAO,SAASK,KAAK,eAAe,EAClDZ,UAAkC,EAClC;MAAEa,KAAK;MAAE,GAAGP;IAAO,CAAE,CACtB;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}