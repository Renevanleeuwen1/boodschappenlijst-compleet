{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { multipartFormRequestOptions } from \"../../internal/uploads.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Parts extends APIResource {\n  /**\r\n   * Adds a\r\n   * [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an\r\n   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.\r\n   * A Part represents a chunk of bytes from the file you are trying to upload.\r\n   *\r\n   * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload\r\n   * maximum of 8 GB.\r\n   *\r\n   * It is possible to add multiple Parts in parallel. You can decide the intended\r\n   * order of the Parts when you\r\n   * [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).\r\n   */\n  create(uploadID, body, options) {\n    return this._client.post(path`/uploads/${uploadID}/parts`, multipartFormRequestOptions({\n      body,\n      ...options\n    }, this._client));\n  }\n}","map":{"version":3,"names":["APIResource","multipartFormRequestOptions","path","Parts","create","uploadID","body","options","_client","post"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-nieuw\\node_modules\\openai\\src\\resources\\uploads\\parts.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../../core/resource';\r\nimport { APIPromise } from '../../core/api-promise';\r\nimport { type Uploadable } from '../../core/uploads';\r\nimport { RequestOptions } from '../../internal/request-options';\r\nimport { multipartFormRequestOptions } from '../../internal/uploads';\r\nimport { path } from '../../internal/utils/path';\r\n\r\nexport class Parts extends APIResource {\r\n  /**\r\n   * Adds a\r\n   * [Part](https://platform.openai.com/docs/api-reference/uploads/part-object) to an\r\n   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object.\r\n   * A Part represents a chunk of bytes from the file you are trying to upload.\r\n   *\r\n   * Each Part can be at most 64 MB, and you can add Parts until you hit the Upload\r\n   * maximum of 8 GB.\r\n   *\r\n   * It is possible to add multiple Parts in parallel. You can decide the intended\r\n   * order of the Parts when you\r\n   * [complete the Upload](https://platform.openai.com/docs/api-reference/uploads/complete).\r\n   */\r\n  create(uploadID: string, body: PartCreateParams, options?: RequestOptions): APIPromise<UploadPart> {\r\n    return this._client.post(\r\n      path`/uploads/${uploadID}/parts`,\r\n      multipartFormRequestOptions({ body, ...options }, this._client),\r\n    );\r\n  }\r\n}\r\n\r\n/**\r\n * The upload Part represents a chunk of bytes we can add to an Upload object.\r\n */\r\nexport interface UploadPart {\r\n  /**\r\n   * The upload Part unique identifier, which can be referenced in API endpoints.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the Part was created.\r\n   */\r\n  created_at: number;\r\n\r\n  /**\r\n   * The object type, which is always `upload.part`.\r\n   */\r\n  object: 'upload.part';\r\n\r\n  /**\r\n   * The ID of the Upload object that this Part was added to.\r\n   */\r\n  upload_id: string;\r\n}\r\n\r\nexport interface PartCreateParams {\r\n  /**\r\n   * The chunk of bytes for this Part.\r\n   */\r\n  data: Uploadable;\r\n}\r\n\r\nexport declare namespace Parts {\r\n  export { type UploadPart as UploadPart, type PartCreateParams as PartCreateParams };\r\n}\r\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;SAIbC,2BAA2B,QAAE;SAC7BC,IAAI,QAAE;AAEf,OAAM,MAAOC,KAAM,SAAQH,WAAW;EACpC;;;;;;;;;;;;;EAaAI,MAAMA,CAACC,QAAgB,EAAEC,IAAsB,EAAEC,OAAwB;IACvE,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CACtBP,IAAI,YAAYG,QAAQ,QAAQ,EAChCJ,2BAA2B,CAAC;MAAEK,IAAI;MAAE,GAAGC;IAAO,CAAE,EAAE,IAAI,CAACC,OAAO,CAAC,CAChE;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}