{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../../core/resource.mjs\";\nimport * as SessionsAPI from \"./sessions.mjs\";\nimport { Sessions } from \"./sessions.mjs\";\nimport * as TranscriptionSessionsAPI from \"./transcription-sessions.mjs\";\nimport { TranscriptionSessions } from \"./transcription-sessions.mjs\";\nexport class Realtime extends APIResource {\n  constructor() {\n    super(...arguments);\n    this.sessions = new SessionsAPI.Sessions(this._client);\n    this.transcriptionSessions = new TranscriptionSessionsAPI.TranscriptionSessions(this._client);\n  }\n}\nRealtime.Sessions = Sessions;\nRealtime.TranscriptionSessions = TranscriptionSessions;","map":{"version":3,"names":["APIResource","SessionsAPI","Sessions","TranscriptionSessionsAPI","TranscriptionSessions","Realtime","constructor","sessions","_client","transcriptionSessions"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-compleet\\node_modules\\openai\\src\\resources\\beta\\realtime\\realtime.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../../../core/resource';\r\nimport * as RealtimeAPI from './realtime';\r\nimport * as Shared from '../../shared';\r\nimport * as SessionsAPI from './sessions';\r\nimport {\r\n  Session as SessionsAPISession,\r\n  SessionCreateParams,\r\n  SessionCreateResponse,\r\n  Sessions,\r\n} from './sessions';\r\nimport * as TranscriptionSessionsAPI from './transcription-sessions';\r\nimport {\r\n  TranscriptionSession,\r\n  TranscriptionSessionCreateParams,\r\n  TranscriptionSessions,\r\n} from './transcription-sessions';\r\n\r\nexport class Realtime extends APIResource {\r\n  sessions: SessionsAPI.Sessions = new SessionsAPI.Sessions(this._client);\r\n  transcriptionSessions: TranscriptionSessionsAPI.TranscriptionSessions =\r\n    new TranscriptionSessionsAPI.TranscriptionSessions(this._client);\r\n}\r\n\r\n/**\r\n * Returned when a conversation is created. Emitted right after session creation.\r\n */\r\nexport interface ConversationCreatedEvent {\r\n  /**\r\n   * The conversation resource.\r\n   */\r\n  conversation: ConversationCreatedEvent.Conversation;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The event type, must be `conversation.created`.\r\n   */\r\n  type: 'conversation.created';\r\n}\r\n\r\nexport namespace ConversationCreatedEvent {\r\n  /**\r\n   * The conversation resource.\r\n   */\r\n  export interface Conversation {\r\n    /**\r\n     * The unique ID of the conversation.\r\n     */\r\n    id?: string;\r\n\r\n    /**\r\n     * The object type, must be `realtime.conversation`.\r\n     */\r\n    object?: 'realtime.conversation';\r\n  }\r\n}\r\n\r\n/**\r\n * The item to add to the conversation.\r\n */\r\nexport interface ConversationItem {\r\n  /**\r\n   * The unique ID of the item, this can be generated by the client to help manage\r\n   * server-side context, but is not required because the server will generate one if\r\n   * not provided.\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * The arguments of the function call (for `function_call` items).\r\n   */\r\n  arguments?: string;\r\n\r\n  /**\r\n   * The ID of the function call (for `function_call` and `function_call_output`\r\n   * items). If passed on a `function_call_output` item, the server will check that a\r\n   * `function_call` item with the same ID exists in the conversation history.\r\n   */\r\n  call_id?: string;\r\n\r\n  /**\r\n   * The content of the message, applicable for `message` items.\r\n   *\r\n   * - Message items of role `system` support only `input_text` content\r\n   * - Message items of role `user` support `input_text` and `input_audio` content\r\n   * - Message items of role `assistant` support `text` content.\r\n   */\r\n  content?: Array<ConversationItemContent>;\r\n\r\n  /**\r\n   * The name of the function being called (for `function_call` items).\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * Identifier for the API object being returned - always `realtime.item`.\r\n   */\r\n  object?: 'realtime.item';\r\n\r\n  /**\r\n   * The output of the function call (for `function_call_output` items).\r\n   */\r\n  output?: string;\r\n\r\n  /**\r\n   * The role of the message sender (`user`, `assistant`, `system`), only applicable\r\n   * for `message` items.\r\n   */\r\n  role?: 'user' | 'assistant' | 'system';\r\n\r\n  /**\r\n   * The status of the item (`completed`, `incomplete`). These have no effect on the\r\n   * conversation, but are accepted for consistency with the\r\n   * `conversation.item.created` event.\r\n   */\r\n  status?: 'completed' | 'incomplete';\r\n\r\n  /**\r\n   * The type of the item (`message`, `function_call`, `function_call_output`).\r\n   */\r\n  type?: 'message' | 'function_call' | 'function_call_output';\r\n}\r\n\r\nexport interface ConversationItemContent {\r\n  /**\r\n   * ID of a previous conversation item to reference (for `item_reference` content\r\n   * types in `response.create` events). These can reference both client and server\r\n   * created items.\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * Base64-encoded audio bytes, used for `input_audio` content type.\r\n   */\r\n  audio?: string;\r\n\r\n  /**\r\n   * The text content, used for `input_text` and `text` content types.\r\n   */\r\n  text?: string;\r\n\r\n  /**\r\n   * The transcript of the audio, used for `input_audio` content type.\r\n   */\r\n  transcript?: string;\r\n\r\n  /**\r\n   * The content type (`input_text`, `input_audio`, `item_reference`, `text`).\r\n   */\r\n  type?: 'input_text' | 'input_audio' | 'item_reference' | 'text';\r\n}\r\n\r\n/**\r\n * Add a new Item to the Conversation's context, including messages, function\r\n * calls, and function call responses. This event can be used both to populate a\r\n * \"history\" of the conversation and to add new items mid-stream, but has the\r\n * current limitation that it cannot populate assistant audio messages.\r\n *\r\n * If successful, the server will respond with a `conversation.item.created` event,\r\n * otherwise an `error` event will be sent.\r\n */\r\nexport interface ConversationItemCreateEvent {\r\n  /**\r\n   * The item to add to the conversation.\r\n   */\r\n  item: ConversationItem;\r\n\r\n  /**\r\n   * The event type, must be `conversation.item.create`.\r\n   */\r\n  type: 'conversation.item.create';\r\n\r\n  /**\r\n   * Optional client-generated ID used to identify this event.\r\n   */\r\n  event_id?: string;\r\n\r\n  /**\r\n   * The ID of the preceding item after which the new item will be inserted. If not\r\n   * set, the new item will be appended to the end of the conversation. If set to\r\n   * `root`, the new item will be added to the beginning of the conversation. If set\r\n   * to an existing ID, it allows an item to be inserted mid-conversation. If the ID\r\n   * cannot be found, an error will be returned and the item will not be added.\r\n   */\r\n  previous_item_id?: string;\r\n}\r\n\r\n/**\r\n * Returned when a conversation item is created. There are several scenarios that\r\n * produce this event:\r\n *\r\n * - The server is generating a Response, which if successful will produce either\r\n *   one or two Items, which will be of type `message` (role `assistant`) or type\r\n *   `function_call`.\r\n * - The input audio buffer has been committed, either by the client or the server\r\n *   (in `server_vad` mode). The server will take the content of the input audio\r\n *   buffer and add it to a new user message Item.\r\n * - The client has sent a `conversation.item.create` event to add a new Item to\r\n *   the Conversation.\r\n */\r\nexport interface ConversationItemCreatedEvent {\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The item to add to the conversation.\r\n   */\r\n  item: ConversationItem;\r\n\r\n  /**\r\n   * The ID of the preceding item in the Conversation context, allows the client to\r\n   * understand the order of the conversation.\r\n   */\r\n  previous_item_id: string;\r\n\r\n  /**\r\n   * The event type, must be `conversation.item.created`.\r\n   */\r\n  type: 'conversation.item.created';\r\n}\r\n\r\n/**\r\n * Send this event when you want to remove any item from the conversation history.\r\n * The server will respond with a `conversation.item.deleted` event, unless the\r\n * item does not exist in the conversation history, in which case the server will\r\n * respond with an error.\r\n */\r\nexport interface ConversationItemDeleteEvent {\r\n  /**\r\n   * The ID of the item to delete.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The event type, must be `conversation.item.delete`.\r\n   */\r\n  type: 'conversation.item.delete';\r\n\r\n  /**\r\n   * Optional client-generated ID used to identify this event.\r\n   */\r\n  event_id?: string;\r\n}\r\n\r\n/**\r\n * Returned when an item in the conversation is deleted by the client with a\r\n * `conversation.item.delete` event. This event is used to synchronize the server's\r\n * understanding of the conversation history with the client's view.\r\n */\r\nexport interface ConversationItemDeletedEvent {\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the item that was deleted.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The event type, must be `conversation.item.deleted`.\r\n   */\r\n  type: 'conversation.item.deleted';\r\n}\r\n\r\n/**\r\n * This event is the output of audio transcription for user audio written to the\r\n * user audio buffer. Transcription begins when the input audio buffer is committed\r\n * by the client or server (in `server_vad` mode). Transcription runs\r\n * asynchronously with Response creation, so this event may come before or after\r\n * the Response events.\r\n *\r\n * Realtime API models accept audio natively, and thus input transcription is a\r\n * separate process run on a separate ASR (Automatic Speech Recognition) model,\r\n * currently always `whisper-1`. Thus the transcript may diverge somewhat from the\r\n * model's interpretation, and should be treated as a rough guide.\r\n */\r\nexport interface ConversationItemInputAudioTranscriptionCompletedEvent {\r\n  /**\r\n   * The index of the content part containing the audio.\r\n   */\r\n  content_index: number;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the user message item containing the audio.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The transcribed text.\r\n   */\r\n  transcript: string;\r\n\r\n  /**\r\n   * The event type, must be `conversation.item.input_audio_transcription.completed`.\r\n   */\r\n  type: 'conversation.item.input_audio_transcription.completed';\r\n\r\n  /**\r\n   * The log probabilities of the transcription.\r\n   */\r\n  logprobs?: Array<ConversationItemInputAudioTranscriptionCompletedEvent.Logprob> | null;\r\n}\r\n\r\nexport namespace ConversationItemInputAudioTranscriptionCompletedEvent {\r\n  /**\r\n   * A log probability object.\r\n   */\r\n  export interface Logprob {\r\n    /**\r\n     * The token that was used to generate the log probability.\r\n     */\r\n    token: string;\r\n\r\n    /**\r\n     * The bytes that were used to generate the log probability.\r\n     */\r\n    bytes: Array<number>;\r\n\r\n    /**\r\n     * The log probability of the token.\r\n     */\r\n    logprob: number;\r\n  }\r\n}\r\n\r\n/**\r\n * Returned when the text value of an input audio transcription content part is\r\n * updated.\r\n */\r\nexport interface ConversationItemInputAudioTranscriptionDeltaEvent {\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the item.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The event type, must be `conversation.item.input_audio_transcription.delta`.\r\n   */\r\n  type: 'conversation.item.input_audio_transcription.delta';\r\n\r\n  /**\r\n   * The index of the content part in the item's content array.\r\n   */\r\n  content_index?: number;\r\n\r\n  /**\r\n   * The text delta.\r\n   */\r\n  delta?: string;\r\n\r\n  /**\r\n   * The log probabilities of the transcription.\r\n   */\r\n  logprobs?: Array<ConversationItemInputAudioTranscriptionDeltaEvent.Logprob> | null;\r\n}\r\n\r\nexport namespace ConversationItemInputAudioTranscriptionDeltaEvent {\r\n  /**\r\n   * A log probability object.\r\n   */\r\n  export interface Logprob {\r\n    /**\r\n     * The token that was used to generate the log probability.\r\n     */\r\n    token: string;\r\n\r\n    /**\r\n     * The bytes that were used to generate the log probability.\r\n     */\r\n    bytes: Array<number>;\r\n\r\n    /**\r\n     * The log probability of the token.\r\n     */\r\n    logprob: number;\r\n  }\r\n}\r\n\r\n/**\r\n * Returned when input audio transcription is configured, and a transcription\r\n * request for a user message failed. These events are separate from other `error`\r\n * events so that the client can identify the related Item.\r\n */\r\nexport interface ConversationItemInputAudioTranscriptionFailedEvent {\r\n  /**\r\n   * The index of the content part containing the audio.\r\n   */\r\n  content_index: number;\r\n\r\n  /**\r\n   * Details of the transcription error.\r\n   */\r\n  error: ConversationItemInputAudioTranscriptionFailedEvent.Error;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the user message item.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The event type, must be `conversation.item.input_audio_transcription.failed`.\r\n   */\r\n  type: 'conversation.item.input_audio_transcription.failed';\r\n}\r\n\r\nexport namespace ConversationItemInputAudioTranscriptionFailedEvent {\r\n  /**\r\n   * Details of the transcription error.\r\n   */\r\n  export interface Error {\r\n    /**\r\n     * Error code, if any.\r\n     */\r\n    code?: string;\r\n\r\n    /**\r\n     * A human-readable error message.\r\n     */\r\n    message?: string;\r\n\r\n    /**\r\n     * Parameter related to the error, if any.\r\n     */\r\n    param?: string;\r\n\r\n    /**\r\n     * The type of error.\r\n     */\r\n    type?: string;\r\n  }\r\n}\r\n\r\n/**\r\n * Send this event when you want to retrieve the server's representation of a\r\n * specific item in the conversation history. This is useful, for example, to\r\n * inspect user audio after noise cancellation and VAD. The server will respond\r\n * with a `conversation.item.retrieved` event, unless the item does not exist in\r\n * the conversation history, in which case the server will respond with an error.\r\n */\r\nexport interface ConversationItemRetrieveEvent {\r\n  /**\r\n   * The ID of the item to retrieve.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The event type, must be `conversation.item.retrieve`.\r\n   */\r\n  type: 'conversation.item.retrieve';\r\n\r\n  /**\r\n   * Optional client-generated ID used to identify this event.\r\n   */\r\n  event_id?: string;\r\n}\r\n\r\n/**\r\n * Send this event to truncate a previous assistant message’s audio. The server\r\n * will produce audio faster than realtime, so this event is useful when the user\r\n * interrupts to truncate audio that has already been sent to the client but not\r\n * yet played. This will synchronize the server's understanding of the audio with\r\n * the client's playback.\r\n *\r\n * Truncating audio will delete the server-side text transcript to ensure there is\r\n * not text in the context that hasn't been heard by the user.\r\n *\r\n * If successful, the server will respond with a `conversation.item.truncated`\r\n * event.\r\n */\r\nexport interface ConversationItemTruncateEvent {\r\n  /**\r\n   * Inclusive duration up to which audio is truncated, in milliseconds. If the\r\n   * audio_end_ms is greater than the actual audio duration, the server will respond\r\n   * with an error.\r\n   */\r\n  audio_end_ms: number;\r\n\r\n  /**\r\n   * The index of the content part to truncate. Set this to 0.\r\n   */\r\n  content_index: number;\r\n\r\n  /**\r\n   * The ID of the assistant message item to truncate. Only assistant message items\r\n   * can be truncated.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The event type, must be `conversation.item.truncate`.\r\n   */\r\n  type: 'conversation.item.truncate';\r\n\r\n  /**\r\n   * Optional client-generated ID used to identify this event.\r\n   */\r\n  event_id?: string;\r\n}\r\n\r\n/**\r\n * Returned when an earlier assistant audio message item is truncated by the client\r\n * with a `conversation.item.truncate` event. This event is used to synchronize the\r\n * server's understanding of the audio with the client's playback.\r\n *\r\n * This action will truncate the audio and remove the server-side text transcript\r\n * to ensure there is no text in the context that hasn't been heard by the user.\r\n */\r\nexport interface ConversationItemTruncatedEvent {\r\n  /**\r\n   * The duration up to which the audio was truncated, in milliseconds.\r\n   */\r\n  audio_end_ms: number;\r\n\r\n  /**\r\n   * The index of the content part that was truncated.\r\n   */\r\n  content_index: number;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the assistant message item that was truncated.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The event type, must be `conversation.item.truncated`.\r\n   */\r\n  type: 'conversation.item.truncated';\r\n}\r\n\r\n/**\r\n * The item to add to the conversation.\r\n */\r\nexport interface ConversationItemWithReference {\r\n  /**\r\n   * For an item of type (`message` | `function_call` | `function_call_output`) this\r\n   * field allows the client to assign the unique ID of the item. It is not required\r\n   * because the server will generate one if not provided.\r\n   *\r\n   * For an item of type `item_reference`, this field is required and is a reference\r\n   * to any item that has previously existed in the conversation.\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * The arguments of the function call (for `function_call` items).\r\n   */\r\n  arguments?: string;\r\n\r\n  /**\r\n   * The ID of the function call (for `function_call` and `function_call_output`\r\n   * items). If passed on a `function_call_output` item, the server will check that a\r\n   * `function_call` item with the same ID exists in the conversation history.\r\n   */\r\n  call_id?: string;\r\n\r\n  /**\r\n   * The content of the message, applicable for `message` items.\r\n   *\r\n   * - Message items of role `system` support only `input_text` content\r\n   * - Message items of role `user` support `input_text` and `input_audio` content\r\n   * - Message items of role `assistant` support `text` content.\r\n   */\r\n  content?: Array<ConversationItemContent>;\r\n\r\n  /**\r\n   * The name of the function being called (for `function_call` items).\r\n   */\r\n  name?: string;\r\n\r\n  /**\r\n   * Identifier for the API object being returned - always `realtime.item`.\r\n   */\r\n  object?: 'realtime.item';\r\n\r\n  /**\r\n   * The output of the function call (for `function_call_output` items).\r\n   */\r\n  output?: string;\r\n\r\n  /**\r\n   * The role of the message sender (`user`, `assistant`, `system`), only applicable\r\n   * for `message` items.\r\n   */\r\n  role?: 'user' | 'assistant' | 'system';\r\n\r\n  /**\r\n   * The status of the item (`completed`, `incomplete`). These have no effect on the\r\n   * conversation, but are accepted for consistency with the\r\n   * `conversation.item.created` event.\r\n   */\r\n  status?: 'completed' | 'incomplete';\r\n\r\n  /**\r\n   * The type of the item (`message`, `function_call`, `function_call_output`,\r\n   * `item_reference`).\r\n   */\r\n  type?: 'message' | 'function_call' | 'function_call_output' | 'item_reference';\r\n}\r\n\r\n/**\r\n * Returned when an error occurs, which could be a client problem or a server\r\n * problem. Most errors are recoverable and the session will stay open, we\r\n * recommend to implementors to monitor and log error messages by default.\r\n */\r\nexport interface ErrorEvent {\r\n  /**\r\n   * Details of the error.\r\n   */\r\n  error: ErrorEvent.Error;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The event type, must be `error`.\r\n   */\r\n  type: 'error';\r\n}\r\n\r\nexport namespace ErrorEvent {\r\n  /**\r\n   * Details of the error.\r\n   */\r\n  export interface Error {\r\n    /**\r\n     * A human-readable error message.\r\n     */\r\n    message: string;\r\n\r\n    /**\r\n     * The type of error (e.g., \"invalid_request_error\", \"server_error\").\r\n     */\r\n    type: string;\r\n\r\n    /**\r\n     * Error code, if any.\r\n     */\r\n    code?: string | null;\r\n\r\n    /**\r\n     * The event_id of the client event that caused the error, if applicable.\r\n     */\r\n    event_id?: string | null;\r\n\r\n    /**\r\n     * Parameter related to the error, if any.\r\n     */\r\n    param?: string | null;\r\n  }\r\n}\r\n\r\n/**\r\n * Send this event to append audio bytes to the input audio buffer. The audio\r\n * buffer is temporary storage you can write to and later commit. In Server VAD\r\n * mode, the audio buffer is used to detect speech and the server will decide when\r\n * to commit. When Server VAD is disabled, you must commit the audio buffer\r\n * manually.\r\n *\r\n * The client may choose how much audio to place in each event up to a maximum of\r\n * 15 MiB, for example streaming smaller chunks from the client may allow the VAD\r\n * to be more responsive. Unlike made other client events, the server will not send\r\n * a confirmation response to this event.\r\n */\r\nexport interface InputAudioBufferAppendEvent {\r\n  /**\r\n   * Base64-encoded audio bytes. This must be in the format specified by the\r\n   * `input_audio_format` field in the session configuration.\r\n   */\r\n  audio: string;\r\n\r\n  /**\r\n   * The event type, must be `input_audio_buffer.append`.\r\n   */\r\n  type: 'input_audio_buffer.append';\r\n\r\n  /**\r\n   * Optional client-generated ID used to identify this event.\r\n   */\r\n  event_id?: string;\r\n}\r\n\r\n/**\r\n * Send this event to clear the audio bytes in the buffer. The server will respond\r\n * with an `input_audio_buffer.cleared` event.\r\n */\r\nexport interface InputAudioBufferClearEvent {\r\n  /**\r\n   * The event type, must be `input_audio_buffer.clear`.\r\n   */\r\n  type: 'input_audio_buffer.clear';\r\n\r\n  /**\r\n   * Optional client-generated ID used to identify this event.\r\n   */\r\n  event_id?: string;\r\n}\r\n\r\n/**\r\n * Returned when the input audio buffer is cleared by the client with a\r\n * `input_audio_buffer.clear` event.\r\n */\r\nexport interface InputAudioBufferClearedEvent {\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The event type, must be `input_audio_buffer.cleared`.\r\n   */\r\n  type: 'input_audio_buffer.cleared';\r\n}\r\n\r\n/**\r\n * Send this event to commit the user input audio buffer, which will create a new\r\n * user message item in the conversation. This event will produce an error if the\r\n * input audio buffer is empty. When in Server VAD mode, the client does not need\r\n * to send this event, the server will commit the audio buffer automatically.\r\n *\r\n * Committing the input audio buffer will trigger input audio transcription (if\r\n * enabled in session configuration), but it will not create a response from the\r\n * model. The server will respond with an `input_audio_buffer.committed` event.\r\n */\r\nexport interface InputAudioBufferCommitEvent {\r\n  /**\r\n   * The event type, must be `input_audio_buffer.commit`.\r\n   */\r\n  type: 'input_audio_buffer.commit';\r\n\r\n  /**\r\n   * Optional client-generated ID used to identify this event.\r\n   */\r\n  event_id?: string;\r\n}\r\n\r\n/**\r\n * Returned when an input audio buffer is committed, either by the client or\r\n * automatically in server VAD mode. The `item_id` property is the ID of the user\r\n * message item that will be created, thus a `conversation.item.created` event will\r\n * also be sent to the client.\r\n */\r\nexport interface InputAudioBufferCommittedEvent {\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the user message item that will be created.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The ID of the preceding item after which the new item will be inserted.\r\n   */\r\n  previous_item_id: string;\r\n\r\n  /**\r\n   * The event type, must be `input_audio_buffer.committed`.\r\n   */\r\n  type: 'input_audio_buffer.committed';\r\n}\r\n\r\n/**\r\n * Sent by the server when in `server_vad` mode to indicate that speech has been\r\n * detected in the audio buffer. This can happen any time audio is added to the\r\n * buffer (unless speech is already detected). The client may want to use this\r\n * event to interrupt audio playback or provide visual feedback to the user.\r\n *\r\n * The client should expect to receive a `input_audio_buffer.speech_stopped` event\r\n * when speech stops. The `item_id` property is the ID of the user message item\r\n * that will be created when speech stops and will also be included in the\r\n * `input_audio_buffer.speech_stopped` event (unless the client manually commits\r\n * the audio buffer during VAD activation).\r\n */\r\nexport interface InputAudioBufferSpeechStartedEvent {\r\n  /**\r\n   * Milliseconds from the start of all audio written to the buffer during the\r\n   * session when speech was first detected. This will correspond to the beginning of\r\n   * audio sent to the model, and thus includes the `prefix_padding_ms` configured in\r\n   * the Session.\r\n   */\r\n  audio_start_ms: number;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the user message item that will be created when speech stops.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The event type, must be `input_audio_buffer.speech_started`.\r\n   */\r\n  type: 'input_audio_buffer.speech_started';\r\n}\r\n\r\n/**\r\n * Returned in `server_vad` mode when the server detects the end of speech in the\r\n * audio buffer. The server will also send an `conversation.item.created` event\r\n * with the user message item that is created from the audio buffer.\r\n */\r\nexport interface InputAudioBufferSpeechStoppedEvent {\r\n  /**\r\n   * Milliseconds since the session started when speech stopped. This will correspond\r\n   * to the end of audio sent to the model, and thus includes the\r\n   * `min_silence_duration_ms` configured in the Session.\r\n   */\r\n  audio_end_ms: number;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the user message item that will be created.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The event type, must be `input_audio_buffer.speech_stopped`.\r\n   */\r\n  type: 'input_audio_buffer.speech_stopped';\r\n}\r\n\r\n/**\r\n * Emitted at the beginning of a Response to indicate the updated rate limits. When\r\n * a Response is created some tokens will be \"reserved\" for the output tokens, the\r\n * rate limits shown here reflect that reservation, which is then adjusted\r\n * accordingly once the Response is completed.\r\n */\r\nexport interface RateLimitsUpdatedEvent {\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * List of rate limit information.\r\n   */\r\n  rate_limits: Array<RateLimitsUpdatedEvent.RateLimit>;\r\n\r\n  /**\r\n   * The event type, must be `rate_limits.updated`.\r\n   */\r\n  type: 'rate_limits.updated';\r\n}\r\n\r\nexport namespace RateLimitsUpdatedEvent {\r\n  export interface RateLimit {\r\n    /**\r\n     * The maximum allowed value for the rate limit.\r\n     */\r\n    limit?: number;\r\n\r\n    /**\r\n     * The name of the rate limit (`requests`, `tokens`).\r\n     */\r\n    name?: 'requests' | 'tokens';\r\n\r\n    /**\r\n     * The remaining value before the limit is reached.\r\n     */\r\n    remaining?: number;\r\n\r\n    /**\r\n     * Seconds until the rate limit resets.\r\n     */\r\n    reset_seconds?: number;\r\n  }\r\n}\r\n\r\n/**\r\n * A realtime client event.\r\n */\r\nexport type RealtimeClientEvent =\r\n  | ConversationItemCreateEvent\r\n  | ConversationItemDeleteEvent\r\n  | ConversationItemRetrieveEvent\r\n  | ConversationItemTruncateEvent\r\n  | InputAudioBufferAppendEvent\r\n  | InputAudioBufferClearEvent\r\n  | RealtimeClientEvent.OutputAudioBufferClear\r\n  | InputAudioBufferCommitEvent\r\n  | ResponseCancelEvent\r\n  | ResponseCreateEvent\r\n  | SessionUpdateEvent\r\n  | TranscriptionSessionUpdate;\r\n\r\nexport namespace RealtimeClientEvent {\r\n  /**\r\n   * **WebRTC Only:** Emit to cut off the current audio response. This will trigger\r\n   * the server to stop generating audio and emit a `output_audio_buffer.cleared`\r\n   * event. This event should be preceded by a `response.cancel` client event to stop\r\n   * the generation of the current response.\r\n   * [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).\r\n   */\r\n  export interface OutputAudioBufferClear {\r\n    /**\r\n     * The event type, must be `output_audio_buffer.clear`.\r\n     */\r\n    type: 'output_audio_buffer.clear';\r\n\r\n    /**\r\n     * The unique ID of the client event used for error handling.\r\n     */\r\n    event_id?: string;\r\n  }\r\n}\r\n\r\n/**\r\n * The response resource.\r\n */\r\nexport interface RealtimeResponse {\r\n  /**\r\n   * The unique ID of the response.\r\n   */\r\n  id?: string;\r\n\r\n  /**\r\n   * Which conversation the response is added to, determined by the `conversation`\r\n   * field in the `response.create` event. If `auto`, the response will be added to\r\n   * the default conversation and the value of `conversation_id` will be an id like\r\n   * `conv_1234`. If `none`, the response will not be added to any conversation and\r\n   * the value of `conversation_id` will be `null`. If responses are being triggered\r\n   * by server VAD, the response will be added to the default conversation, thus the\r\n   * `conversation_id` will be an id like `conv_1234`.\r\n   */\r\n  conversation_id?: string;\r\n\r\n  /**\r\n   * Maximum number of output tokens for a single assistant response, inclusive of\r\n   * tool calls, that was used in this response.\r\n   */\r\n  max_output_tokens?: number | 'inf';\r\n\r\n  /**\r\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n   * for storing additional information about the object in a structured format, and\r\n   * querying for objects via API or the dashboard.\r\n   *\r\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n   * a maximum length of 512 characters.\r\n   */\r\n  metadata?: Shared.Metadata | null;\r\n\r\n  /**\r\n   * The set of modalities the model used to respond. If there are multiple\r\n   * modalities, the model will pick one, for example if `modalities` is\r\n   * `[\"text\", \"audio\"]`, the model could be responding in either text or audio.\r\n   */\r\n  modalities?: Array<'text' | 'audio'>;\r\n\r\n  /**\r\n   * The object type, must be `realtime.response`.\r\n   */\r\n  object?: 'realtime.response';\r\n\r\n  /**\r\n   * The list of output items generated by the response.\r\n   */\r\n  output?: Array<ConversationItem>;\r\n\r\n  /**\r\n   * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\r\n   */\r\n  output_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\r\n\r\n  /**\r\n   * The final status of the response (`completed`, `cancelled`, `failed`, or\r\n   * `incomplete`).\r\n   */\r\n  status?: 'completed' | 'cancelled' | 'failed' | 'incomplete';\r\n\r\n  /**\r\n   * Additional details about the status.\r\n   */\r\n  status_details?: RealtimeResponseStatus;\r\n\r\n  /**\r\n   * Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\r\n   */\r\n  temperature?: number;\r\n\r\n  /**\r\n   * Usage statistics for the Response, this will correspond to billing. A Realtime\r\n   * API session will maintain a conversation context and append new Items to the\r\n   * Conversation, thus output from previous turns (text and audio tokens) will\r\n   * become the input for later turns.\r\n   */\r\n  usage?: RealtimeResponseUsage;\r\n\r\n  /**\r\n   * The voice the model used to respond. Current voice options are `alloy`, `ash`,\r\n   * `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`, `shimmer`, and\r\n   * `verse`.\r\n   */\r\n  voice?:\r\n    | (string & {})\r\n    | 'alloy'\r\n    | 'ash'\r\n    | 'ballad'\r\n    | 'coral'\r\n    | 'echo'\r\n    | 'fable'\r\n    | 'onyx'\r\n    | 'nova'\r\n    | 'sage'\r\n    | 'shimmer'\r\n    | 'verse';\r\n}\r\n\r\n/**\r\n * Additional details about the status.\r\n */\r\nexport interface RealtimeResponseStatus {\r\n  /**\r\n   * A description of the error that caused the response to fail, populated when the\r\n   * `status` is `failed`.\r\n   */\r\n  error?: RealtimeResponseStatus.Error;\r\n\r\n  /**\r\n   * The reason the Response did not complete. For a `cancelled` Response, one of\r\n   * `turn_detected` (the server VAD detected a new start of speech) or\r\n   * `client_cancelled` (the client sent a cancel event). For an `incomplete`\r\n   * Response, one of `max_output_tokens` or `content_filter` (the server-side safety\r\n   * filter activated and cut off the response).\r\n   */\r\n  reason?: 'turn_detected' | 'client_cancelled' | 'max_output_tokens' | 'content_filter';\r\n\r\n  /**\r\n   * The type of error that caused the response to fail, corresponding with the\r\n   * `status` field (`completed`, `cancelled`, `incomplete`, `failed`).\r\n   */\r\n  type?: 'completed' | 'cancelled' | 'incomplete' | 'failed';\r\n}\r\n\r\nexport namespace RealtimeResponseStatus {\r\n  /**\r\n   * A description of the error that caused the response to fail, populated when the\r\n   * `status` is `failed`.\r\n   */\r\n  export interface Error {\r\n    /**\r\n     * Error code, if any.\r\n     */\r\n    code?: string;\r\n\r\n    /**\r\n     * The type of error.\r\n     */\r\n    type?: string;\r\n  }\r\n}\r\n\r\n/**\r\n * Usage statistics for the Response, this will correspond to billing. A Realtime\r\n * API session will maintain a conversation context and append new Items to the\r\n * Conversation, thus output from previous turns (text and audio tokens) will\r\n * become the input for later turns.\r\n */\r\nexport interface RealtimeResponseUsage {\r\n  /**\r\n   * Details about the input tokens used in the Response.\r\n   */\r\n  input_token_details?: RealtimeResponseUsage.InputTokenDetails;\r\n\r\n  /**\r\n   * The number of input tokens used in the Response, including text and audio\r\n   * tokens.\r\n   */\r\n  input_tokens?: number;\r\n\r\n  /**\r\n   * Details about the output tokens used in the Response.\r\n   */\r\n  output_token_details?: RealtimeResponseUsage.OutputTokenDetails;\r\n\r\n  /**\r\n   * The number of output tokens sent in the Response, including text and audio\r\n   * tokens.\r\n   */\r\n  output_tokens?: number;\r\n\r\n  /**\r\n   * The total number of tokens in the Response including input and output text and\r\n   * audio tokens.\r\n   */\r\n  total_tokens?: number;\r\n}\r\n\r\nexport namespace RealtimeResponseUsage {\r\n  /**\r\n   * Details about the input tokens used in the Response.\r\n   */\r\n  export interface InputTokenDetails {\r\n    /**\r\n     * The number of audio tokens used in the Response.\r\n     */\r\n    audio_tokens?: number;\r\n\r\n    /**\r\n     * The number of cached tokens used in the Response.\r\n     */\r\n    cached_tokens?: number;\r\n\r\n    /**\r\n     * The number of text tokens used in the Response.\r\n     */\r\n    text_tokens?: number;\r\n  }\r\n\r\n  /**\r\n   * Details about the output tokens used in the Response.\r\n   */\r\n  export interface OutputTokenDetails {\r\n    /**\r\n     * The number of audio tokens used in the Response.\r\n     */\r\n    audio_tokens?: number;\r\n\r\n    /**\r\n     * The number of text tokens used in the Response.\r\n     */\r\n    text_tokens?: number;\r\n  }\r\n}\r\n\r\n/**\r\n * A realtime server event.\r\n */\r\nexport type RealtimeServerEvent =\r\n  | ConversationCreatedEvent\r\n  | ConversationItemCreatedEvent\r\n  | ConversationItemDeletedEvent\r\n  | ConversationItemInputAudioTranscriptionCompletedEvent\r\n  | ConversationItemInputAudioTranscriptionDeltaEvent\r\n  | ConversationItemInputAudioTranscriptionFailedEvent\r\n  | RealtimeServerEvent.ConversationItemRetrieved\r\n  | ConversationItemTruncatedEvent\r\n  | ErrorEvent\r\n  | InputAudioBufferClearedEvent\r\n  | InputAudioBufferCommittedEvent\r\n  | InputAudioBufferSpeechStartedEvent\r\n  | InputAudioBufferSpeechStoppedEvent\r\n  | RateLimitsUpdatedEvent\r\n  | ResponseAudioDeltaEvent\r\n  | ResponseAudioDoneEvent\r\n  | ResponseAudioTranscriptDeltaEvent\r\n  | ResponseAudioTranscriptDoneEvent\r\n  | ResponseContentPartAddedEvent\r\n  | ResponseContentPartDoneEvent\r\n  | ResponseCreatedEvent\r\n  | ResponseDoneEvent\r\n  | ResponseFunctionCallArgumentsDeltaEvent\r\n  | ResponseFunctionCallArgumentsDoneEvent\r\n  | ResponseOutputItemAddedEvent\r\n  | ResponseOutputItemDoneEvent\r\n  | ResponseTextDeltaEvent\r\n  | ResponseTextDoneEvent\r\n  | SessionCreatedEvent\r\n  | SessionUpdatedEvent\r\n  | TranscriptionSessionUpdatedEvent\r\n  | RealtimeServerEvent.OutputAudioBufferStarted\r\n  | RealtimeServerEvent.OutputAudioBufferStopped\r\n  | RealtimeServerEvent.OutputAudioBufferCleared;\r\n\r\nexport namespace RealtimeServerEvent {\r\n  /**\r\n   * Returned when a conversation item is retrieved with\r\n   * `conversation.item.retrieve`.\r\n   */\r\n  export interface ConversationItemRetrieved {\r\n    /**\r\n     * The unique ID of the server event.\r\n     */\r\n    event_id: string;\r\n\r\n    /**\r\n     * The item to add to the conversation.\r\n     */\r\n    item: RealtimeAPI.ConversationItem;\r\n\r\n    /**\r\n     * The event type, must be `conversation.item.retrieved`.\r\n     */\r\n    type: 'conversation.item.retrieved';\r\n  }\r\n\r\n  /**\r\n   * **WebRTC Only:** Emitted when the server begins streaming audio to the client.\r\n   * This event is emitted after an audio content part has been added\r\n   * (`response.content_part.added`) to the response.\r\n   * [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).\r\n   */\r\n  export interface OutputAudioBufferStarted {\r\n    /**\r\n     * The unique ID of the server event.\r\n     */\r\n    event_id: string;\r\n\r\n    /**\r\n     * The unique ID of the response that produced the audio.\r\n     */\r\n    response_id: string;\r\n\r\n    /**\r\n     * The event type, must be `output_audio_buffer.started`.\r\n     */\r\n    type: 'output_audio_buffer.started';\r\n  }\r\n\r\n  /**\r\n   * **WebRTC Only:** Emitted when the output audio buffer has been completely\r\n   * drained on the server, and no more audio is forthcoming. This event is emitted\r\n   * after the full response data has been sent to the client (`response.done`).\r\n   * [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).\r\n   */\r\n  export interface OutputAudioBufferStopped {\r\n    /**\r\n     * The unique ID of the server event.\r\n     */\r\n    event_id: string;\r\n\r\n    /**\r\n     * The unique ID of the response that produced the audio.\r\n     */\r\n    response_id: string;\r\n\r\n    /**\r\n     * The event type, must be `output_audio_buffer.stopped`.\r\n     */\r\n    type: 'output_audio_buffer.stopped';\r\n  }\r\n\r\n  /**\r\n   * **WebRTC Only:** Emitted when the output audio buffer is cleared. This happens\r\n   * either in VAD mode when the user has interrupted\r\n   * (`input_audio_buffer.speech_started`), or when the client has emitted the\r\n   * `output_audio_buffer.clear` event to manually cut off the current audio\r\n   * response.\r\n   * [Learn more](https://platform.openai.com/docs/guides/realtime-conversations#client-and-server-events-for-audio-in-webrtc).\r\n   */\r\n  export interface OutputAudioBufferCleared {\r\n    /**\r\n     * The unique ID of the server event.\r\n     */\r\n    event_id: string;\r\n\r\n    /**\r\n     * The unique ID of the response that produced the audio.\r\n     */\r\n    response_id: string;\r\n\r\n    /**\r\n     * The event type, must be `output_audio_buffer.cleared`.\r\n     */\r\n    type: 'output_audio_buffer.cleared';\r\n  }\r\n}\r\n\r\n/**\r\n * Returned when the model-generated audio is updated.\r\n */\r\nexport interface ResponseAudioDeltaEvent {\r\n  /**\r\n   * The index of the content part in the item's content array.\r\n   */\r\n  content_index: number;\r\n\r\n  /**\r\n   * Base64-encoded audio data delta.\r\n   */\r\n  delta: string;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the item.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The index of the output item in the response.\r\n   */\r\n  output_index: number;\r\n\r\n  /**\r\n   * The ID of the response.\r\n   */\r\n  response_id: string;\r\n\r\n  /**\r\n   * The event type, must be `response.audio.delta`.\r\n   */\r\n  type: 'response.audio.delta';\r\n}\r\n\r\n/**\r\n * Returned when the model-generated audio is done. Also emitted when a Response is\r\n * interrupted, incomplete, or cancelled.\r\n */\r\nexport interface ResponseAudioDoneEvent {\r\n  /**\r\n   * The index of the content part in the item's content array.\r\n   */\r\n  content_index: number;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the item.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The index of the output item in the response.\r\n   */\r\n  output_index: number;\r\n\r\n  /**\r\n   * The ID of the response.\r\n   */\r\n  response_id: string;\r\n\r\n  /**\r\n   * The event type, must be `response.audio.done`.\r\n   */\r\n  type: 'response.audio.done';\r\n}\r\n\r\n/**\r\n * Returned when the model-generated transcription of audio output is updated.\r\n */\r\nexport interface ResponseAudioTranscriptDeltaEvent {\r\n  /**\r\n   * The index of the content part in the item's content array.\r\n   */\r\n  content_index: number;\r\n\r\n  /**\r\n   * The transcript delta.\r\n   */\r\n  delta: string;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the item.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The index of the output item in the response.\r\n   */\r\n  output_index: number;\r\n\r\n  /**\r\n   * The ID of the response.\r\n   */\r\n  response_id: string;\r\n\r\n  /**\r\n   * The event type, must be `response.audio_transcript.delta`.\r\n   */\r\n  type: 'response.audio_transcript.delta';\r\n}\r\n\r\n/**\r\n * Returned when the model-generated transcription of audio output is done\r\n * streaming. Also emitted when a Response is interrupted, incomplete, or\r\n * cancelled.\r\n */\r\nexport interface ResponseAudioTranscriptDoneEvent {\r\n  /**\r\n   * The index of the content part in the item's content array.\r\n   */\r\n  content_index: number;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the item.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The index of the output item in the response.\r\n   */\r\n  output_index: number;\r\n\r\n  /**\r\n   * The ID of the response.\r\n   */\r\n  response_id: string;\r\n\r\n  /**\r\n   * The final transcript of the audio.\r\n   */\r\n  transcript: string;\r\n\r\n  /**\r\n   * The event type, must be `response.audio_transcript.done`.\r\n   */\r\n  type: 'response.audio_transcript.done';\r\n}\r\n\r\n/**\r\n * Send this event to cancel an in-progress response. The server will respond with\r\n * a `response.cancelled` event or an error if there is no response to cancel.\r\n */\r\nexport interface ResponseCancelEvent {\r\n  /**\r\n   * The event type, must be `response.cancel`.\r\n   */\r\n  type: 'response.cancel';\r\n\r\n  /**\r\n   * Optional client-generated ID used to identify this event.\r\n   */\r\n  event_id?: string;\r\n\r\n  /**\r\n   * A specific response ID to cancel - if not provided, will cancel an in-progress\r\n   * response in the default conversation.\r\n   */\r\n  response_id?: string;\r\n}\r\n\r\n/**\r\n * Returned when a new content part is added to an assistant message item during\r\n * response generation.\r\n */\r\nexport interface ResponseContentPartAddedEvent {\r\n  /**\r\n   * The index of the content part in the item's content array.\r\n   */\r\n  content_index: number;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the item to which the content part was added.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The index of the output item in the response.\r\n   */\r\n  output_index: number;\r\n\r\n  /**\r\n   * The content part that was added.\r\n   */\r\n  part: ResponseContentPartAddedEvent.Part;\r\n\r\n  /**\r\n   * The ID of the response.\r\n   */\r\n  response_id: string;\r\n\r\n  /**\r\n   * The event type, must be `response.content_part.added`.\r\n   */\r\n  type: 'response.content_part.added';\r\n}\r\n\r\nexport namespace ResponseContentPartAddedEvent {\r\n  /**\r\n   * The content part that was added.\r\n   */\r\n  export interface Part {\r\n    /**\r\n     * Base64-encoded audio data (if type is \"audio\").\r\n     */\r\n    audio?: string;\r\n\r\n    /**\r\n     * The text content (if type is \"text\").\r\n     */\r\n    text?: string;\r\n\r\n    /**\r\n     * The transcript of the audio (if type is \"audio\").\r\n     */\r\n    transcript?: string;\r\n\r\n    /**\r\n     * The content type (\"text\", \"audio\").\r\n     */\r\n    type?: 'text' | 'audio';\r\n  }\r\n}\r\n\r\n/**\r\n * Returned when a content part is done streaming in an assistant message item.\r\n * Also emitted when a Response is interrupted, incomplete, or cancelled.\r\n */\r\nexport interface ResponseContentPartDoneEvent {\r\n  /**\r\n   * The index of the content part in the item's content array.\r\n   */\r\n  content_index: number;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the item.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The index of the output item in the response.\r\n   */\r\n  output_index: number;\r\n\r\n  /**\r\n   * The content part that is done.\r\n   */\r\n  part: ResponseContentPartDoneEvent.Part;\r\n\r\n  /**\r\n   * The ID of the response.\r\n   */\r\n  response_id: string;\r\n\r\n  /**\r\n   * The event type, must be `response.content_part.done`.\r\n   */\r\n  type: 'response.content_part.done';\r\n}\r\n\r\nexport namespace ResponseContentPartDoneEvent {\r\n  /**\r\n   * The content part that is done.\r\n   */\r\n  export interface Part {\r\n    /**\r\n     * Base64-encoded audio data (if type is \"audio\").\r\n     */\r\n    audio?: string;\r\n\r\n    /**\r\n     * The text content (if type is \"text\").\r\n     */\r\n    text?: string;\r\n\r\n    /**\r\n     * The transcript of the audio (if type is \"audio\").\r\n     */\r\n    transcript?: string;\r\n\r\n    /**\r\n     * The content type (\"text\", \"audio\").\r\n     */\r\n    type?: 'text' | 'audio';\r\n  }\r\n}\r\n\r\n/**\r\n * This event instructs the server to create a Response, which means triggering\r\n * model inference. When in Server VAD mode, the server will create Responses\r\n * automatically.\r\n *\r\n * A Response will include at least one Item, and may have two, in which case the\r\n * second will be a function call. These Items will be appended to the conversation\r\n * history.\r\n *\r\n * The server will respond with a `response.created` event, events for Items and\r\n * content created, and finally a `response.done` event to indicate the Response is\r\n * complete.\r\n *\r\n * The `response.create` event includes inference configuration like\r\n * `instructions`, and `temperature`. These fields will override the Session's\r\n * configuration for this Response only.\r\n */\r\nexport interface ResponseCreateEvent {\r\n  /**\r\n   * The event type, must be `response.create`.\r\n   */\r\n  type: 'response.create';\r\n\r\n  /**\r\n   * Optional client-generated ID used to identify this event.\r\n   */\r\n  event_id?: string;\r\n\r\n  /**\r\n   * Create a new Realtime response with these parameters\r\n   */\r\n  response?: ResponseCreateEvent.Response;\r\n}\r\n\r\nexport namespace ResponseCreateEvent {\r\n  /**\r\n   * Create a new Realtime response with these parameters\r\n   */\r\n  export interface Response {\r\n    /**\r\n     * Controls which conversation the response is added to. Currently supports `auto`\r\n     * and `none`, with `auto` as the default value. The `auto` value means that the\r\n     * contents of the response will be added to the default conversation. Set this to\r\n     * `none` to create an out-of-band response which will not add items to default\r\n     * conversation.\r\n     */\r\n    conversation?: (string & {}) | 'auto' | 'none';\r\n\r\n    /**\r\n     * Input items to include in the prompt for the model. Using this field creates a\r\n     * new context for this Response instead of using the default conversation. An\r\n     * empty array `[]` will clear the context for this Response. Note that this can\r\n     * include references to items from the default conversation.\r\n     */\r\n    input?: Array<RealtimeAPI.ConversationItemWithReference>;\r\n\r\n    /**\r\n     * The default system instructions (i.e. system message) prepended to model calls.\r\n     * This field allows the client to guide the model on desired responses. The model\r\n     * can be instructed on response content and format, (e.g. \"be extremely succinct\",\r\n     * \"act friendly\", \"here are examples of good responses\") and on audio behavior\r\n     * (e.g. \"talk quickly\", \"inject emotion into your voice\", \"laugh frequently\"). The\r\n     * instructions are not guaranteed to be followed by the model, but they provide\r\n     * guidance to the model on the desired behavior.\r\n     *\r\n     * Note that the server sets default instructions which will be used if this field\r\n     * is not set and are visible in the `session.created` event at the start of the\r\n     * session.\r\n     */\r\n    instructions?: string;\r\n\r\n    /**\r\n     * Maximum number of output tokens for a single assistant response, inclusive of\r\n     * tool calls. Provide an integer between 1 and 4096 to limit output tokens, or\r\n     * `inf` for the maximum available tokens for a given model. Defaults to `inf`.\r\n     */\r\n    max_response_output_tokens?: number | 'inf';\r\n\r\n    /**\r\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n     * for storing additional information about the object in a structured format, and\r\n     * querying for objects via API or the dashboard.\r\n     *\r\n     * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n     * a maximum length of 512 characters.\r\n     */\r\n    metadata?: Shared.Metadata | null;\r\n\r\n    /**\r\n     * The set of modalities the model can respond with. To disable audio, set this to\r\n     * [\"text\"].\r\n     */\r\n    modalities?: Array<'text' | 'audio'>;\r\n\r\n    /**\r\n     * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\r\n     */\r\n    output_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\r\n\r\n    /**\r\n     * Sampling temperature for the model, limited to [0.6, 1.2]. Defaults to 0.8.\r\n     */\r\n    temperature?: number;\r\n\r\n    /**\r\n     * How the model chooses tools. Options are `auto`, `none`, `required`, or specify\r\n     * a function, like `{\"type\": \"function\", \"function\": {\"name\": \"my_function\"}}`.\r\n     */\r\n    tool_choice?: string;\r\n\r\n    /**\r\n     * Tools (functions) available to the model.\r\n     */\r\n    tools?: Array<Response.Tool>;\r\n\r\n    /**\r\n     * The voice the model uses to respond. Voice cannot be changed during the session\r\n     * once the model has responded with audio at least once. Current voice options are\r\n     * `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`,\r\n     * `shimmer`, and `verse`.\r\n     */\r\n    voice?:\r\n      | (string & {})\r\n      | 'alloy'\r\n      | 'ash'\r\n      | 'ballad'\r\n      | 'coral'\r\n      | 'echo'\r\n      | 'fable'\r\n      | 'onyx'\r\n      | 'nova'\r\n      | 'sage'\r\n      | 'shimmer'\r\n      | 'verse';\r\n  }\r\n\r\n  export namespace Response {\r\n    export interface Tool {\r\n      /**\r\n       * The description of the function, including guidance on when and how to call it,\r\n       * and guidance about what to tell the user when calling (if anything).\r\n       */\r\n      description?: string;\r\n\r\n      /**\r\n       * The name of the function.\r\n       */\r\n      name?: string;\r\n\r\n      /**\r\n       * Parameters of the function in JSON Schema.\r\n       */\r\n      parameters?: unknown;\r\n\r\n      /**\r\n       * The type of the tool, i.e. `function`.\r\n       */\r\n      type?: 'function';\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returned when a new Response is created. The first event of response creation,\r\n * where the response is in an initial state of `in_progress`.\r\n */\r\nexport interface ResponseCreatedEvent {\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The response resource.\r\n   */\r\n  response: RealtimeResponse;\r\n\r\n  /**\r\n   * The event type, must be `response.created`.\r\n   */\r\n  type: 'response.created';\r\n}\r\n\r\n/**\r\n * Returned when a Response is done streaming. Always emitted, no matter the final\r\n * state. The Response object included in the `response.done` event will include\r\n * all output Items in the Response but will omit the raw audio data.\r\n */\r\nexport interface ResponseDoneEvent {\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The response resource.\r\n   */\r\n  response: RealtimeResponse;\r\n\r\n  /**\r\n   * The event type, must be `response.done`.\r\n   */\r\n  type: 'response.done';\r\n}\r\n\r\n/**\r\n * Returned when the model-generated function call arguments are updated.\r\n */\r\nexport interface ResponseFunctionCallArgumentsDeltaEvent {\r\n  /**\r\n   * The ID of the function call.\r\n   */\r\n  call_id: string;\r\n\r\n  /**\r\n   * The arguments delta as a JSON string.\r\n   */\r\n  delta: string;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the function call item.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The index of the output item in the response.\r\n   */\r\n  output_index: number;\r\n\r\n  /**\r\n   * The ID of the response.\r\n   */\r\n  response_id: string;\r\n\r\n  /**\r\n   * The event type, must be `response.function_call_arguments.delta`.\r\n   */\r\n  type: 'response.function_call_arguments.delta';\r\n}\r\n\r\n/**\r\n * Returned when the model-generated function call arguments are done streaming.\r\n * Also emitted when a Response is interrupted, incomplete, or cancelled.\r\n */\r\nexport interface ResponseFunctionCallArgumentsDoneEvent {\r\n  /**\r\n   * The final arguments as a JSON string.\r\n   */\r\n  arguments: string;\r\n\r\n  /**\r\n   * The ID of the function call.\r\n   */\r\n  call_id: string;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the function call item.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The index of the output item in the response.\r\n   */\r\n  output_index: number;\r\n\r\n  /**\r\n   * The ID of the response.\r\n   */\r\n  response_id: string;\r\n\r\n  /**\r\n   * The event type, must be `response.function_call_arguments.done`.\r\n   */\r\n  type: 'response.function_call_arguments.done';\r\n}\r\n\r\n/**\r\n * Returned when a new Item is created during Response generation.\r\n */\r\nexport interface ResponseOutputItemAddedEvent {\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The item to add to the conversation.\r\n   */\r\n  item: ConversationItem;\r\n\r\n  /**\r\n   * The index of the output item in the Response.\r\n   */\r\n  output_index: number;\r\n\r\n  /**\r\n   * The ID of the Response to which the item belongs.\r\n   */\r\n  response_id: string;\r\n\r\n  /**\r\n   * The event type, must be `response.output_item.added`.\r\n   */\r\n  type: 'response.output_item.added';\r\n}\r\n\r\n/**\r\n * Returned when an Item is done streaming. Also emitted when a Response is\r\n * interrupted, incomplete, or cancelled.\r\n */\r\nexport interface ResponseOutputItemDoneEvent {\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The item to add to the conversation.\r\n   */\r\n  item: ConversationItem;\r\n\r\n  /**\r\n   * The index of the output item in the Response.\r\n   */\r\n  output_index: number;\r\n\r\n  /**\r\n   * The ID of the Response to which the item belongs.\r\n   */\r\n  response_id: string;\r\n\r\n  /**\r\n   * The event type, must be `response.output_item.done`.\r\n   */\r\n  type: 'response.output_item.done';\r\n}\r\n\r\n/**\r\n * Returned when the text value of a \"text\" content part is updated.\r\n */\r\nexport interface ResponseTextDeltaEvent {\r\n  /**\r\n   * The index of the content part in the item's content array.\r\n   */\r\n  content_index: number;\r\n\r\n  /**\r\n   * The text delta.\r\n   */\r\n  delta: string;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the item.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The index of the output item in the response.\r\n   */\r\n  output_index: number;\r\n\r\n  /**\r\n   * The ID of the response.\r\n   */\r\n  response_id: string;\r\n\r\n  /**\r\n   * The event type, must be `response.text.delta`.\r\n   */\r\n  type: 'response.text.delta';\r\n}\r\n\r\n/**\r\n * Returned when the text value of a \"text\" content part is done streaming. Also\r\n * emitted when a Response is interrupted, incomplete, or cancelled.\r\n */\r\nexport interface ResponseTextDoneEvent {\r\n  /**\r\n   * The index of the content part in the item's content array.\r\n   */\r\n  content_index: number;\r\n\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * The ID of the item.\r\n   */\r\n  item_id: string;\r\n\r\n  /**\r\n   * The index of the output item in the response.\r\n   */\r\n  output_index: number;\r\n\r\n  /**\r\n   * The ID of the response.\r\n   */\r\n  response_id: string;\r\n\r\n  /**\r\n   * The final text content.\r\n   */\r\n  text: string;\r\n\r\n  /**\r\n   * The event type, must be `response.text.done`.\r\n   */\r\n  type: 'response.text.done';\r\n}\r\n\r\n/**\r\n * Returned when a Session is created. Emitted automatically when a new connection\r\n * is established as the first server event. This event will contain the default\r\n * Session configuration.\r\n */\r\nexport interface SessionCreatedEvent {\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * Realtime session object configuration.\r\n   */\r\n  session: SessionsAPI.Session;\r\n\r\n  /**\r\n   * The event type, must be `session.created`.\r\n   */\r\n  type: 'session.created';\r\n}\r\n\r\n/**\r\n * Send this event to update the session’s default configuration. The client may\r\n * send this event at any time to update any field, except for `voice`. However,\r\n * note that once a session has been initialized with a particular `model`, it\r\n * can’t be changed to another model using `session.update`.\r\n *\r\n * When the server receives a `session.update`, it will respond with a\r\n * `session.updated` event showing the full, effective configuration. Only the\r\n * fields that are present are updated. To clear a field like `instructions`, pass\r\n * an empty string.\r\n */\r\nexport interface SessionUpdateEvent {\r\n  /**\r\n   * Realtime session object configuration.\r\n   */\r\n  session: SessionUpdateEvent.Session;\r\n\r\n  /**\r\n   * The event type, must be `session.update`.\r\n   */\r\n  type: 'session.update';\r\n\r\n  /**\r\n   * Optional client-generated ID used to identify this event.\r\n   */\r\n  event_id?: string;\r\n}\r\n\r\nexport namespace SessionUpdateEvent {\r\n  /**\r\n   * Realtime session object configuration.\r\n   */\r\n  export interface Session {\r\n    /**\r\n     * Configuration options for the generated client secret.\r\n     */\r\n    client_secret?: Session.ClientSecret;\r\n\r\n    /**\r\n     * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For\r\n     * `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, single channel\r\n     * (mono), and little-endian byte order.\r\n     */\r\n    input_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\r\n\r\n    /**\r\n     * Configuration for input audio noise reduction. This can be set to `null` to turn\r\n     * off. Noise reduction filters audio added to the input audio buffer before it is\r\n     * sent to VAD and the model. Filtering the audio can improve VAD and turn\r\n     * detection accuracy (reducing false positives) and model performance by improving\r\n     * perception of the input audio.\r\n     */\r\n    input_audio_noise_reduction?: Session.InputAudioNoiseReduction;\r\n\r\n    /**\r\n     * Configuration for input audio transcription, defaults to off and can be set to\r\n     * `null` to turn off once on. Input audio transcription is not native to the\r\n     * model, since the model consumes audio directly. Transcription runs\r\n     * asynchronously through\r\n     * [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)\r\n     * and should be treated as guidance of input audio content rather than precisely\r\n     * what the model heard. The client can optionally set the language and prompt for\r\n     * transcription, these offer additional guidance to the transcription service.\r\n     */\r\n    input_audio_transcription?: Session.InputAudioTranscription;\r\n\r\n    /**\r\n     * The default system instructions (i.e. system message) prepended to model calls.\r\n     * This field allows the client to guide the model on desired responses. The model\r\n     * can be instructed on response content and format, (e.g. \"be extremely succinct\",\r\n     * \"act friendly\", \"here are examples of good responses\") and on audio behavior\r\n     * (e.g. \"talk quickly\", \"inject emotion into your voice\", \"laugh frequently\"). The\r\n     * instructions are not guaranteed to be followed by the model, but they provide\r\n     * guidance to the model on the desired behavior.\r\n     *\r\n     * Note that the server sets default instructions which will be used if this field\r\n     * is not set and are visible in the `session.created` event at the start of the\r\n     * session.\r\n     */\r\n    instructions?: string;\r\n\r\n    /**\r\n     * Maximum number of output tokens for a single assistant response, inclusive of\r\n     * tool calls. Provide an integer between 1 and 4096 to limit output tokens, or\r\n     * `inf` for the maximum available tokens for a given model. Defaults to `inf`.\r\n     */\r\n    max_response_output_tokens?: number | 'inf';\r\n\r\n    /**\r\n     * The set of modalities the model can respond with. To disable audio, set this to\r\n     * [\"text\"].\r\n     */\r\n    modalities?: Array<'text' | 'audio'>;\r\n\r\n    /**\r\n     * The Realtime model used for this session.\r\n     */\r\n    model?:\r\n      | 'gpt-4o-realtime-preview'\r\n      | 'gpt-4o-realtime-preview-2024-10-01'\r\n      | 'gpt-4o-realtime-preview-2024-12-17'\r\n      | 'gpt-4o-realtime-preview-2025-06-03'\r\n      | 'gpt-4o-mini-realtime-preview'\r\n      | 'gpt-4o-mini-realtime-preview-2024-12-17';\r\n\r\n    /**\r\n     * The format of output audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`.\r\n     * For `pcm16`, output audio is sampled at a rate of 24kHz.\r\n     */\r\n    output_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\r\n\r\n    /**\r\n     * The speed of the model's spoken response. 1.0 is the default speed. 0.25 is the\r\n     * minimum speed. 1.5 is the maximum speed. This value can only be changed in\r\n     * between model turns, not while a response is in progress.\r\n     */\r\n    speed?: number;\r\n\r\n    /**\r\n     * Sampling temperature for the model, limited to [0.6, 1.2]. For audio models a\r\n     * temperature of 0.8 is highly recommended for best performance.\r\n     */\r\n    temperature?: number;\r\n\r\n    /**\r\n     * How the model chooses tools. Options are `auto`, `none`, `required`, or specify\r\n     * a function.\r\n     */\r\n    tool_choice?: string;\r\n\r\n    /**\r\n     * Tools (functions) available to the model.\r\n     */\r\n    tools?: Array<Session.Tool>;\r\n\r\n    /**\r\n     * Configuration options for tracing. Set to null to disable tracing. Once tracing\r\n     * is enabled for a session, the configuration cannot be modified.\r\n     *\r\n     * `auto` will create a trace for the session with default values for the workflow\r\n     * name, group id, and metadata.\r\n     */\r\n    tracing?: 'auto' | Session.TracingConfiguration;\r\n\r\n    /**\r\n     * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\r\n     * set to `null` to turn off, in which case the client must manually trigger model\r\n     * response. Server VAD means that the model will detect the start and end of\r\n     * speech based on audio volume and respond at the end of user speech. Semantic VAD\r\n     * is more advanced and uses a turn detection model (in conjuction with VAD) to\r\n     * semantically estimate whether the user has finished speaking, then dynamically\r\n     * sets a timeout based on this probability. For example, if user audio trails off\r\n     * with \"uhhm\", the model will score a low probability of turn end and wait longer\r\n     * for the user to continue speaking. This can be useful for more natural\r\n     * conversations, but may have a higher latency.\r\n     */\r\n    turn_detection?: Session.TurnDetection;\r\n\r\n    /**\r\n     * The voice the model uses to respond. Voice cannot be changed during the session\r\n     * once the model has responded with audio at least once. Current voice options are\r\n     * `alloy`, `ash`, `ballad`, `coral`, `echo`, `fable`, `onyx`, `nova`, `sage`,\r\n     * `shimmer`, and `verse`.\r\n     */\r\n    voice?:\r\n      | (string & {})\r\n      | 'alloy'\r\n      | 'ash'\r\n      | 'ballad'\r\n      | 'coral'\r\n      | 'echo'\r\n      | 'fable'\r\n      | 'onyx'\r\n      | 'nova'\r\n      | 'sage'\r\n      | 'shimmer'\r\n      | 'verse';\r\n  }\r\n\r\n  export namespace Session {\r\n    /**\r\n     * Configuration options for the generated client secret.\r\n     */\r\n    export interface ClientSecret {\r\n      /**\r\n       * Configuration for the ephemeral token expiration.\r\n       */\r\n      expires_at?: ClientSecret.ExpiresAt;\r\n    }\r\n\r\n    export namespace ClientSecret {\r\n      /**\r\n       * Configuration for the ephemeral token expiration.\r\n       */\r\n      export interface ExpiresAt {\r\n        /**\r\n         * The anchor point for the ephemeral token expiration. Only `created_at` is\r\n         * currently supported.\r\n         */\r\n        anchor?: 'created_at';\r\n\r\n        /**\r\n         * The number of seconds from the anchor point to the expiration. Select a value\r\n         * between `10` and `7200`.\r\n         */\r\n        seconds?: number;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Configuration for input audio noise reduction. This can be set to `null` to turn\r\n     * off. Noise reduction filters audio added to the input audio buffer before it is\r\n     * sent to VAD and the model. Filtering the audio can improve VAD and turn\r\n     * detection accuracy (reducing false positives) and model performance by improving\r\n     * perception of the input audio.\r\n     */\r\n    export interface InputAudioNoiseReduction {\r\n      /**\r\n       * Type of noise reduction. `near_field` is for close-talking microphones such as\r\n       * headphones, `far_field` is for far-field microphones such as laptop or\r\n       * conference room microphones.\r\n       */\r\n      type?: 'near_field' | 'far_field';\r\n    }\r\n\r\n    /**\r\n     * Configuration for input audio transcription, defaults to off and can be set to\r\n     * `null` to turn off once on. Input audio transcription is not native to the\r\n     * model, since the model consumes audio directly. Transcription runs\r\n     * asynchronously through\r\n     * [the /audio/transcriptions endpoint](https://platform.openai.com/docs/api-reference/audio/createTranscription)\r\n     * and should be treated as guidance of input audio content rather than precisely\r\n     * what the model heard. The client can optionally set the language and prompt for\r\n     * transcription, these offer additional guidance to the transcription service.\r\n     */\r\n    export interface InputAudioTranscription {\r\n      /**\r\n       * The language of the input audio. Supplying the input language in\r\n       * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`)\r\n       * format will improve accuracy and latency.\r\n       */\r\n      language?: string;\r\n\r\n      /**\r\n       * The model to use for transcription, current options are `gpt-4o-transcribe`,\r\n       * `gpt-4o-mini-transcribe`, and `whisper-1`.\r\n       */\r\n      model?: string;\r\n\r\n      /**\r\n       * An optional text to guide the model's style or continue a previous audio\r\n       * segment. For `whisper-1`, the\r\n       * [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).\r\n       * For `gpt-4o-transcribe` models, the prompt is a free text string, for example\r\n       * \"expect words related to technology\".\r\n       */\r\n      prompt?: string;\r\n    }\r\n\r\n    export interface Tool {\r\n      /**\r\n       * The description of the function, including guidance on when and how to call it,\r\n       * and guidance about what to tell the user when calling (if anything).\r\n       */\r\n      description?: string;\r\n\r\n      /**\r\n       * The name of the function.\r\n       */\r\n      name?: string;\r\n\r\n      /**\r\n       * Parameters of the function in JSON Schema.\r\n       */\r\n      parameters?: unknown;\r\n\r\n      /**\r\n       * The type of the tool, i.e. `function`.\r\n       */\r\n      type?: 'function';\r\n    }\r\n\r\n    /**\r\n     * Granular configuration for tracing.\r\n     */\r\n    export interface TracingConfiguration {\r\n      /**\r\n       * The group id to attach to this trace to enable filtering and grouping in the\r\n       * traces dashboard.\r\n       */\r\n      group_id?: string;\r\n\r\n      /**\r\n       * The arbitrary metadata to attach to this trace to enable filtering in the traces\r\n       * dashboard.\r\n       */\r\n      metadata?: unknown;\r\n\r\n      /**\r\n       * The name of the workflow to attach to this trace. This is used to name the trace\r\n       * in the traces dashboard.\r\n       */\r\n      workflow_name?: string;\r\n    }\r\n\r\n    /**\r\n     * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\r\n     * set to `null` to turn off, in which case the client must manually trigger model\r\n     * response. Server VAD means that the model will detect the start and end of\r\n     * speech based on audio volume and respond at the end of user speech. Semantic VAD\r\n     * is more advanced and uses a turn detection model (in conjuction with VAD) to\r\n     * semantically estimate whether the user has finished speaking, then dynamically\r\n     * sets a timeout based on this probability. For example, if user audio trails off\r\n     * with \"uhhm\", the model will score a low probability of turn end and wait longer\r\n     * for the user to continue speaking. This can be useful for more natural\r\n     * conversations, but may have a higher latency.\r\n     */\r\n    export interface TurnDetection {\r\n      /**\r\n       * Whether or not to automatically generate a response when a VAD stop event\r\n       * occurs.\r\n       */\r\n      create_response?: boolean;\r\n\r\n      /**\r\n       * Used only for `semantic_vad` mode. The eagerness of the model to respond. `low`\r\n       * will wait longer for the user to continue speaking, `high` will respond more\r\n       * quickly. `auto` is the default and is equivalent to `medium`.\r\n       */\r\n      eagerness?: 'low' | 'medium' | 'high' | 'auto';\r\n\r\n      /**\r\n       * Whether or not to automatically interrupt any ongoing response with output to\r\n       * the default conversation (i.e. `conversation` of `auto`) when a VAD start event\r\n       * occurs.\r\n       */\r\n      interrupt_response?: boolean;\r\n\r\n      /**\r\n       * Used only for `server_vad` mode. Amount of audio to include before the VAD\r\n       * detected speech (in milliseconds). Defaults to 300ms.\r\n       */\r\n      prefix_padding_ms?: number;\r\n\r\n      /**\r\n       * Used only for `server_vad` mode. Duration of silence to detect speech stop (in\r\n       * milliseconds). Defaults to 500ms. With shorter values the model will respond\r\n       * more quickly, but may jump in on short pauses from the user.\r\n       */\r\n      silence_duration_ms?: number;\r\n\r\n      /**\r\n       * Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this\r\n       * defaults to 0.5. A higher threshold will require louder audio to activate the\r\n       * model, and thus might perform better in noisy environments.\r\n       */\r\n      threshold?: number;\r\n\r\n      /**\r\n       * Type of turn detection.\r\n       */\r\n      type?: 'server_vad' | 'semantic_vad';\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returned when a session is updated with a `session.update` event, unless there\r\n * is an error.\r\n */\r\nexport interface SessionUpdatedEvent {\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * Realtime session object configuration.\r\n   */\r\n  session: SessionsAPI.Session;\r\n\r\n  /**\r\n   * The event type, must be `session.updated`.\r\n   */\r\n  type: 'session.updated';\r\n}\r\n\r\n/**\r\n * Send this event to update a transcription session.\r\n */\r\nexport interface TranscriptionSessionUpdate {\r\n  /**\r\n   * Realtime transcription session object configuration.\r\n   */\r\n  session: TranscriptionSessionUpdate.Session;\r\n\r\n  /**\r\n   * The event type, must be `transcription_session.update`.\r\n   */\r\n  type: 'transcription_session.update';\r\n\r\n  /**\r\n   * Optional client-generated ID used to identify this event.\r\n   */\r\n  event_id?: string;\r\n}\r\n\r\nexport namespace TranscriptionSessionUpdate {\r\n  /**\r\n   * Realtime transcription session object configuration.\r\n   */\r\n  export interface Session {\r\n    /**\r\n     * Configuration options for the generated client secret.\r\n     */\r\n    client_secret?: Session.ClientSecret;\r\n\r\n    /**\r\n     * The set of items to include in the transcription. Current available items are:\r\n     *\r\n     * - `item.input_audio_transcription.logprobs`\r\n     */\r\n    include?: Array<string>;\r\n\r\n    /**\r\n     * The format of input audio. Options are `pcm16`, `g711_ulaw`, or `g711_alaw`. For\r\n     * `pcm16`, input audio must be 16-bit PCM at a 24kHz sample rate, single channel\r\n     * (mono), and little-endian byte order.\r\n     */\r\n    input_audio_format?: 'pcm16' | 'g711_ulaw' | 'g711_alaw';\r\n\r\n    /**\r\n     * Configuration for input audio noise reduction. This can be set to `null` to turn\r\n     * off. Noise reduction filters audio added to the input audio buffer before it is\r\n     * sent to VAD and the model. Filtering the audio can improve VAD and turn\r\n     * detection accuracy (reducing false positives) and model performance by improving\r\n     * perception of the input audio.\r\n     */\r\n    input_audio_noise_reduction?: Session.InputAudioNoiseReduction;\r\n\r\n    /**\r\n     * Configuration for input audio transcription. The client can optionally set the\r\n     * language and prompt for transcription, these offer additional guidance to the\r\n     * transcription service.\r\n     */\r\n    input_audio_transcription?: Session.InputAudioTranscription;\r\n\r\n    /**\r\n     * The set of modalities the model can respond with. To disable audio, set this to\r\n     * [\"text\"].\r\n     */\r\n    modalities?: Array<'text' | 'audio'>;\r\n\r\n    /**\r\n     * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\r\n     * set to `null` to turn off, in which case the client must manually trigger model\r\n     * response. Server VAD means that the model will detect the start and end of\r\n     * speech based on audio volume and respond at the end of user speech. Semantic VAD\r\n     * is more advanced and uses a turn detection model (in conjuction with VAD) to\r\n     * semantically estimate whether the user has finished speaking, then dynamically\r\n     * sets a timeout based on this probability. For example, if user audio trails off\r\n     * with \"uhhm\", the model will score a low probability of turn end and wait longer\r\n     * for the user to continue speaking. This can be useful for more natural\r\n     * conversations, but may have a higher latency.\r\n     */\r\n    turn_detection?: Session.TurnDetection;\r\n  }\r\n\r\n  export namespace Session {\r\n    /**\r\n     * Configuration options for the generated client secret.\r\n     */\r\n    export interface ClientSecret {\r\n      /**\r\n       * Configuration for the ephemeral token expiration.\r\n       */\r\n      expires_at?: ClientSecret.ExpiresAt;\r\n    }\r\n\r\n    export namespace ClientSecret {\r\n      /**\r\n       * Configuration for the ephemeral token expiration.\r\n       */\r\n      export interface ExpiresAt {\r\n        /**\r\n         * The anchor point for the ephemeral token expiration. Only `created_at` is\r\n         * currently supported.\r\n         */\r\n        anchor?: 'created_at';\r\n\r\n        /**\r\n         * The number of seconds from the anchor point to the expiration. Select a value\r\n         * between `10` and `7200`.\r\n         */\r\n        seconds?: number;\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Configuration for input audio noise reduction. This can be set to `null` to turn\r\n     * off. Noise reduction filters audio added to the input audio buffer before it is\r\n     * sent to VAD and the model. Filtering the audio can improve VAD and turn\r\n     * detection accuracy (reducing false positives) and model performance by improving\r\n     * perception of the input audio.\r\n     */\r\n    export interface InputAudioNoiseReduction {\r\n      /**\r\n       * Type of noise reduction. `near_field` is for close-talking microphones such as\r\n       * headphones, `far_field` is for far-field microphones such as laptop or\r\n       * conference room microphones.\r\n       */\r\n      type?: 'near_field' | 'far_field';\r\n    }\r\n\r\n    /**\r\n     * Configuration for input audio transcription. The client can optionally set the\r\n     * language and prompt for transcription, these offer additional guidance to the\r\n     * transcription service.\r\n     */\r\n    export interface InputAudioTranscription {\r\n      /**\r\n       * The language of the input audio. Supplying the input language in\r\n       * [ISO-639-1](https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes) (e.g. `en`)\r\n       * format will improve accuracy and latency.\r\n       */\r\n      language?: string;\r\n\r\n      /**\r\n       * The model to use for transcription, current options are `gpt-4o-transcribe`,\r\n       * `gpt-4o-mini-transcribe`, and `whisper-1`.\r\n       */\r\n      model?: 'gpt-4o-transcribe' | 'gpt-4o-mini-transcribe' | 'whisper-1';\r\n\r\n      /**\r\n       * An optional text to guide the model's style or continue a previous audio\r\n       * segment. For `whisper-1`, the\r\n       * [prompt is a list of keywords](https://platform.openai.com/docs/guides/speech-to-text#prompting).\r\n       * For `gpt-4o-transcribe` models, the prompt is a free text string, for example\r\n       * \"expect words related to technology\".\r\n       */\r\n      prompt?: string;\r\n    }\r\n\r\n    /**\r\n     * Configuration for turn detection, ether Server VAD or Semantic VAD. This can be\r\n     * set to `null` to turn off, in which case the client must manually trigger model\r\n     * response. Server VAD means that the model will detect the start and end of\r\n     * speech based on audio volume and respond at the end of user speech. Semantic VAD\r\n     * is more advanced and uses a turn detection model (in conjuction with VAD) to\r\n     * semantically estimate whether the user has finished speaking, then dynamically\r\n     * sets a timeout based on this probability. For example, if user audio trails off\r\n     * with \"uhhm\", the model will score a low probability of turn end and wait longer\r\n     * for the user to continue speaking. This can be useful for more natural\r\n     * conversations, but may have a higher latency.\r\n     */\r\n    export interface TurnDetection {\r\n      /**\r\n       * Whether or not to automatically generate a response when a VAD stop event\r\n       * occurs. Not available for transcription sessions.\r\n       */\r\n      create_response?: boolean;\r\n\r\n      /**\r\n       * Used only for `semantic_vad` mode. The eagerness of the model to respond. `low`\r\n       * will wait longer for the user to continue speaking, `high` will respond more\r\n       * quickly. `auto` is the default and is equivalent to `medium`.\r\n       */\r\n      eagerness?: 'low' | 'medium' | 'high' | 'auto';\r\n\r\n      /**\r\n       * Whether or not to automatically interrupt any ongoing response with output to\r\n       * the default conversation (i.e. `conversation` of `auto`) when a VAD start event\r\n       * occurs. Not available for transcription sessions.\r\n       */\r\n      interrupt_response?: boolean;\r\n\r\n      /**\r\n       * Used only for `server_vad` mode. Amount of audio to include before the VAD\r\n       * detected speech (in milliseconds). Defaults to 300ms.\r\n       */\r\n      prefix_padding_ms?: number;\r\n\r\n      /**\r\n       * Used only for `server_vad` mode. Duration of silence to detect speech stop (in\r\n       * milliseconds). Defaults to 500ms. With shorter values the model will respond\r\n       * more quickly, but may jump in on short pauses from the user.\r\n       */\r\n      silence_duration_ms?: number;\r\n\r\n      /**\r\n       * Used only for `server_vad` mode. Activation threshold for VAD (0.0 to 1.0), this\r\n       * defaults to 0.5. A higher threshold will require louder audio to activate the\r\n       * model, and thus might perform better in noisy environments.\r\n       */\r\n      threshold?: number;\r\n\r\n      /**\r\n       * Type of turn detection.\r\n       */\r\n      type?: 'server_vad' | 'semantic_vad';\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Returned when a transcription session is updated with a\r\n * `transcription_session.update` event, unless there is an error.\r\n */\r\nexport interface TranscriptionSessionUpdatedEvent {\r\n  /**\r\n   * The unique ID of the server event.\r\n   */\r\n  event_id: string;\r\n\r\n  /**\r\n   * A new Realtime transcription session configuration.\r\n   *\r\n   * When a session is created on the server via REST API, the session object also\r\n   * contains an ephemeral key. Default TTL for keys is 10 minutes. This property is\r\n   * not present when a session is updated via the WebSocket API.\r\n   */\r\n  session: TranscriptionSessionsAPI.TranscriptionSession;\r\n\r\n  /**\r\n   * The event type, must be `transcription_session.updated`.\r\n   */\r\n  type: 'transcription_session.updated';\r\n}\r\n\r\nRealtime.Sessions = Sessions;\r\nRealtime.TranscriptionSessions = TranscriptionSessions;\r\n\r\nexport declare namespace Realtime {\r\n  export {\r\n    type ConversationCreatedEvent as ConversationCreatedEvent,\r\n    type ConversationItem as ConversationItem,\r\n    type ConversationItemContent as ConversationItemContent,\r\n    type ConversationItemCreateEvent as ConversationItemCreateEvent,\r\n    type ConversationItemCreatedEvent as ConversationItemCreatedEvent,\r\n    type ConversationItemDeleteEvent as ConversationItemDeleteEvent,\r\n    type ConversationItemDeletedEvent as ConversationItemDeletedEvent,\r\n    type ConversationItemInputAudioTranscriptionCompletedEvent as ConversationItemInputAudioTranscriptionCompletedEvent,\r\n    type ConversationItemInputAudioTranscriptionDeltaEvent as ConversationItemInputAudioTranscriptionDeltaEvent,\r\n    type ConversationItemInputAudioTranscriptionFailedEvent as ConversationItemInputAudioTranscriptionFailedEvent,\r\n    type ConversationItemRetrieveEvent as ConversationItemRetrieveEvent,\r\n    type ConversationItemTruncateEvent as ConversationItemTruncateEvent,\r\n    type ConversationItemTruncatedEvent as ConversationItemTruncatedEvent,\r\n    type ConversationItemWithReference as ConversationItemWithReference,\r\n    type ErrorEvent as ErrorEvent,\r\n    type InputAudioBufferAppendEvent as InputAudioBufferAppendEvent,\r\n    type InputAudioBufferClearEvent as InputAudioBufferClearEvent,\r\n    type InputAudioBufferClearedEvent as InputAudioBufferClearedEvent,\r\n    type InputAudioBufferCommitEvent as InputAudioBufferCommitEvent,\r\n    type InputAudioBufferCommittedEvent as InputAudioBufferCommittedEvent,\r\n    type InputAudioBufferSpeechStartedEvent as InputAudioBufferSpeechStartedEvent,\r\n    type InputAudioBufferSpeechStoppedEvent as InputAudioBufferSpeechStoppedEvent,\r\n    type RateLimitsUpdatedEvent as RateLimitsUpdatedEvent,\r\n    type RealtimeClientEvent as RealtimeClientEvent,\r\n    type RealtimeResponse as RealtimeResponse,\r\n    type RealtimeResponseStatus as RealtimeResponseStatus,\r\n    type RealtimeResponseUsage as RealtimeResponseUsage,\r\n    type RealtimeServerEvent as RealtimeServerEvent,\r\n    type ResponseAudioDeltaEvent as ResponseAudioDeltaEvent,\r\n    type ResponseAudioDoneEvent as ResponseAudioDoneEvent,\r\n    type ResponseAudioTranscriptDeltaEvent as ResponseAudioTranscriptDeltaEvent,\r\n    type ResponseAudioTranscriptDoneEvent as ResponseAudioTranscriptDoneEvent,\r\n    type ResponseCancelEvent as ResponseCancelEvent,\r\n    type ResponseContentPartAddedEvent as ResponseContentPartAddedEvent,\r\n    type ResponseContentPartDoneEvent as ResponseContentPartDoneEvent,\r\n    type ResponseCreateEvent as ResponseCreateEvent,\r\n    type ResponseCreatedEvent as ResponseCreatedEvent,\r\n    type ResponseDoneEvent as ResponseDoneEvent,\r\n    type ResponseFunctionCallArgumentsDeltaEvent as ResponseFunctionCallArgumentsDeltaEvent,\r\n    type ResponseFunctionCallArgumentsDoneEvent as ResponseFunctionCallArgumentsDoneEvent,\r\n    type ResponseOutputItemAddedEvent as ResponseOutputItemAddedEvent,\r\n    type ResponseOutputItemDoneEvent as ResponseOutputItemDoneEvent,\r\n    type ResponseTextDeltaEvent as ResponseTextDeltaEvent,\r\n    type ResponseTextDoneEvent as ResponseTextDoneEvent,\r\n    type SessionCreatedEvent as SessionCreatedEvent,\r\n    type SessionUpdateEvent as SessionUpdateEvent,\r\n    type SessionUpdatedEvent as SessionUpdatedEvent,\r\n    type TranscriptionSessionUpdate as TranscriptionSessionUpdate,\r\n    type TranscriptionSessionUpdatedEvent as TranscriptionSessionUpdatedEvent,\r\n  };\r\n\r\n  export {\r\n    Sessions as Sessions,\r\n    type SessionsAPISession as Session,\r\n    type SessionCreateResponse as SessionCreateResponse,\r\n    type SessionCreateParams as SessionCreateParams,\r\n  };\r\n\r\n  export {\r\n    TranscriptionSessions as TranscriptionSessions,\r\n    type TranscriptionSession as TranscriptionSession,\r\n    type TranscriptionSessionCreateParams as TranscriptionSessionCreateParams,\r\n  };\r\n}\r\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;OAGf,KAAKC,WAAW;SAKrBC,QAAQ,QACT;OACM,KAAKC,wBAAwB;SAIlCC,qBAAqB,QACtB;AAED,OAAM,MAAOC,QAAS,SAAQL,WAAW;EAAzCM,YAAA;;IACE,KAAAC,QAAQ,GAAyB,IAAIN,WAAW,CAACC,QAAQ,CAAC,IAAI,CAACM,OAAO,CAAC;IACvE,KAAAC,qBAAqB,GACnB,IAAIN,wBAAwB,CAACC,qBAAqB,CAAC,IAAI,CAACI,OAAO,CAAC;EACpE;;AA6mFAH,QAAQ,CAACH,QAAQ,GAAGA,QAAQ;AAC5BG,QAAQ,CAACD,qBAAqB,GAAGA,qBAAqB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}