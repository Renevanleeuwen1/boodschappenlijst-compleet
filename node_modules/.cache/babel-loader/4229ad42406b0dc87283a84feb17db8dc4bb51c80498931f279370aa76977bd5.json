{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nexport {};","map":{"version":3,"names":[],"sources":["C:\\boodschappenlijst\\boodschappenlijst-compleet\\node_modules\\openai\\src\\resources\\shared.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nexport type AllModels =\r\n  | (string & {})\r\n  | ChatModel\r\n  | 'o1-pro'\r\n  | 'o1-pro-2025-03-19'\r\n  | 'o3-pro'\r\n  | 'o3-pro-2025-06-10'\r\n  | 'computer-use-preview'\r\n  | 'computer-use-preview-2025-03-11';\r\n\r\nexport type ChatModel =\r\n  | 'gpt-4.1'\r\n  | 'gpt-4.1-mini'\r\n  | 'gpt-4.1-nano'\r\n  | 'gpt-4.1-2025-04-14'\r\n  | 'gpt-4.1-mini-2025-04-14'\r\n  | 'gpt-4.1-nano-2025-04-14'\r\n  | 'o4-mini'\r\n  | 'o4-mini-2025-04-16'\r\n  | 'o3'\r\n  | 'o3-2025-04-16'\r\n  | 'o3-mini'\r\n  | 'o3-mini-2025-01-31'\r\n  | 'o1'\r\n  | 'o1-2024-12-17'\r\n  | 'o1-preview'\r\n  | 'o1-preview-2024-09-12'\r\n  | 'o1-mini'\r\n  | 'o1-mini-2024-09-12'\r\n  | 'gpt-4o'\r\n  | 'gpt-4o-2024-11-20'\r\n  | 'gpt-4o-2024-08-06'\r\n  | 'gpt-4o-2024-05-13'\r\n  | 'gpt-4o-audio-preview'\r\n  | 'gpt-4o-audio-preview-2024-10-01'\r\n  | 'gpt-4o-audio-preview-2024-12-17'\r\n  | 'gpt-4o-audio-preview-2025-06-03'\r\n  | 'gpt-4o-mini-audio-preview'\r\n  | 'gpt-4o-mini-audio-preview-2024-12-17'\r\n  | 'gpt-4o-search-preview'\r\n  | 'gpt-4o-mini-search-preview'\r\n  | 'gpt-4o-search-preview-2025-03-11'\r\n  | 'gpt-4o-mini-search-preview-2025-03-11'\r\n  | 'chatgpt-4o-latest'\r\n  | 'codex-mini-latest'\r\n  | 'gpt-4o-mini'\r\n  | 'gpt-4o-mini-2024-07-18'\r\n  | 'gpt-4-turbo'\r\n  | 'gpt-4-turbo-2024-04-09'\r\n  | 'gpt-4-0125-preview'\r\n  | 'gpt-4-turbo-preview'\r\n  | 'gpt-4-1106-preview'\r\n  | 'gpt-4-vision-preview'\r\n  | 'gpt-4'\r\n  | 'gpt-4-0314'\r\n  | 'gpt-4-0613'\r\n  | 'gpt-4-32k'\r\n  | 'gpt-4-32k-0314'\r\n  | 'gpt-4-32k-0613'\r\n  | 'gpt-3.5-turbo'\r\n  | 'gpt-3.5-turbo-16k'\r\n  | 'gpt-3.5-turbo-0301'\r\n  | 'gpt-3.5-turbo-0613'\r\n  | 'gpt-3.5-turbo-1106'\r\n  | 'gpt-3.5-turbo-0125'\r\n  | 'gpt-3.5-turbo-16k-0613';\r\n\r\n/**\r\n * A filter used to compare a specified attribute key to a given value using a\r\n * defined comparison operation.\r\n */\r\nexport interface ComparisonFilter {\r\n  /**\r\n   * The key to compare against the value.\r\n   */\r\n  key: string;\r\n\r\n  /**\r\n   * Specifies the comparison operator: `eq`, `ne`, `gt`, `gte`, `lt`, `lte`.\r\n   *\r\n   * - `eq`: equals\r\n   * - `ne`: not equal\r\n   * - `gt`: greater than\r\n   * - `gte`: greater than or equal\r\n   * - `lt`: less than\r\n   * - `lte`: less than or equal\r\n   */\r\n  type: 'eq' | 'ne' | 'gt' | 'gte' | 'lt' | 'lte';\r\n\r\n  /**\r\n   * The value to compare against the attribute key; supports string, number, or\r\n   * boolean types.\r\n   */\r\n  value: string | number | boolean;\r\n}\r\n\r\n/**\r\n * Combine multiple filters using `and` or `or`.\r\n */\r\nexport interface CompoundFilter {\r\n  /**\r\n   * Array of filters to combine. Items can be `ComparisonFilter` or\r\n   * `CompoundFilter`.\r\n   */\r\n  filters: Array<ComparisonFilter | unknown>;\r\n\r\n  /**\r\n   * Type of operation: `and` or `or`.\r\n   */\r\n  type: 'and' | 'or';\r\n}\r\n\r\nexport interface ErrorObject {\r\n  code: string | null;\r\n\r\n  message: string;\r\n\r\n  param: string | null;\r\n\r\n  type: string;\r\n}\r\n\r\nexport interface FunctionDefinition {\r\n  /**\r\n   * The name of the function to be called. Must be a-z, A-Z, 0-9, or contain\r\n   * underscores and dashes, with a maximum length of 64.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * A description of what the function does, used by the model to choose when and\r\n   * how to call the function.\r\n   */\r\n  description?: string;\r\n\r\n  /**\r\n   * The parameters the functions accepts, described as a JSON Schema object. See the\r\n   * [guide](https://platform.openai.com/docs/guides/function-calling) for examples,\r\n   * and the\r\n   * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\r\n   * documentation about the format.\r\n   *\r\n   * Omitting `parameters` defines a function with an empty parameter list.\r\n   */\r\n  parameters?: FunctionParameters;\r\n\r\n  /**\r\n   * Whether to enable strict schema adherence when generating the function call. If\r\n   * set to true, the model will follow the exact schema defined in the `parameters`\r\n   * field. Only a subset of JSON Schema is supported when `strict` is `true`. Learn\r\n   * more about Structured Outputs in the\r\n   * [function calling guide](docs/guides/function-calling).\r\n   */\r\n  strict?: boolean | null;\r\n}\r\n\r\n/**\r\n * The parameters the functions accepts, described as a JSON Schema object. See the\r\n * [guide](https://platform.openai.com/docs/guides/function-calling) for examples,\r\n * and the\r\n * [JSON Schema reference](https://json-schema.org/understanding-json-schema/) for\r\n * documentation about the format.\r\n *\r\n * Omitting `parameters` defines a function with an empty parameter list.\r\n */\r\nexport type FunctionParameters = Record<string, unknown>;\r\n\r\n/**\r\n * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n * for storing additional information about the object in a structured format, and\r\n * querying for objects via API or the dashboard.\r\n *\r\n * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n * a maximum length of 512 characters.\r\n */\r\nexport type Metadata = Record<string, string>;\r\n\r\n/**\r\n * **o-series models only**\r\n *\r\n * Configuration options for\r\n * [reasoning models](https://platform.openai.com/docs/guides/reasoning).\r\n */\r\nexport interface Reasoning {\r\n  /**\r\n   * **o-series models only**\r\n   *\r\n   * Constrains effort on reasoning for\r\n   * [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\r\n   * supported values are `low`, `medium`, and `high`. Reducing reasoning effort can\r\n   * result in faster responses and fewer tokens used on reasoning in a response.\r\n   */\r\n  effort?: ReasoningEffort | null;\r\n\r\n  /**\r\n   * @deprecated **Deprecated:** use `summary` instead.\r\n   *\r\n   * A summary of the reasoning performed by the model. This can be useful for\r\n   * debugging and understanding the model's reasoning process. One of `auto`,\r\n   * `concise`, or `detailed`.\r\n   */\r\n  generate_summary?: 'auto' | 'concise' | 'detailed' | null;\r\n\r\n  /**\r\n   * A summary of the reasoning performed by the model. This can be useful for\r\n   * debugging and understanding the model's reasoning process. One of `auto`,\r\n   * `concise`, or `detailed`.\r\n   */\r\n  summary?: 'auto' | 'concise' | 'detailed' | null;\r\n}\r\n\r\n/**\r\n * **o-series models only**\r\n *\r\n * Constrains effort on reasoning for\r\n * [reasoning models](https://platform.openai.com/docs/guides/reasoning). Currently\r\n * supported values are `low`, `medium`, and `high`. Reducing reasoning effort can\r\n * result in faster responses and fewer tokens used on reasoning in a response.\r\n */\r\nexport type ReasoningEffort = 'low' | 'medium' | 'high' | null;\r\n\r\n/**\r\n * JSON object response format. An older method of generating JSON responses. Using\r\n * `json_schema` is recommended for models that support it. Note that the model\r\n * will not generate JSON without a system or user message instructing it to do so.\r\n */\r\nexport interface ResponseFormatJSONObject {\r\n  /**\r\n   * The type of response format being defined. Always `json_object`.\r\n   */\r\n  type: 'json_object';\r\n}\r\n\r\n/**\r\n * JSON Schema response format. Used to generate structured JSON responses. Learn\r\n * more about\r\n * [Structured Outputs](https://platform.openai.com/docs/guides/structured-outputs).\r\n */\r\nexport interface ResponseFormatJSONSchema {\r\n  /**\r\n   * Structured Outputs configuration options, including a JSON Schema.\r\n   */\r\n  json_schema: ResponseFormatJSONSchema.JSONSchema;\r\n\r\n  /**\r\n   * The type of response format being defined. Always `json_schema`.\r\n   */\r\n  type: 'json_schema';\r\n}\r\n\r\nexport namespace ResponseFormatJSONSchema {\r\n  /**\r\n   * Structured Outputs configuration options, including a JSON Schema.\r\n   */\r\n  export interface JSONSchema {\r\n    /**\r\n     * The name of the response format. Must be a-z, A-Z, 0-9, or contain underscores\r\n     * and dashes, with a maximum length of 64.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * A description of what the response format is for, used by the model to determine\r\n     * how to respond in the format.\r\n     */\r\n    description?: string;\r\n\r\n    /**\r\n     * The schema for the response format, described as a JSON Schema object. Learn how\r\n     * to build JSON schemas [here](https://json-schema.org/).\r\n     */\r\n    schema?: Record<string, unknown>;\r\n\r\n    /**\r\n     * Whether to enable strict schema adherence when generating the output. If set to\r\n     * true, the model will always follow the exact schema defined in the `schema`\r\n     * field. Only a subset of JSON Schema is supported when `strict` is `true`. To\r\n     * learn more, read the\r\n     * [Structured Outputs guide](https://platform.openai.com/docs/guides/structured-outputs).\r\n     */\r\n    strict?: boolean | null;\r\n  }\r\n}\r\n\r\n/**\r\n * Default response format. Used to generate text responses.\r\n */\r\nexport interface ResponseFormatText {\r\n  /**\r\n   * The type of response format being defined. Always `text`.\r\n   */\r\n  type: 'text';\r\n}\r\n\r\nexport type ResponsesModel =\r\n  | (string & {})\r\n  | ChatModel\r\n  | 'o1-pro'\r\n  | 'o1-pro-2025-03-19'\r\n  | 'o3-pro'\r\n  | 'o3-pro-2025-06-10'\r\n  | 'computer-use-preview'\r\n  | 'computer-use-preview-2025-03-11';\r\n"],"mappings":"AAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}