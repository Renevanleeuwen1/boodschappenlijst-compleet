{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport { multipartFormRequestOptions } from \"../../internal/uploads.mjs\";\nexport class Translations extends APIResource {\n  create(body, options) {\n    return this._client.post('/audio/translations', multipartFormRequestOptions({\n      body,\n      ...options,\n      __metadata: {\n        model: body.model\n      }\n    }, this._client));\n  }\n}","map":{"version":3,"names":["APIResource","multipartFormRequestOptions","Translations","create","body","options","_client","post","__metadata","model"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-nieuw\\node_modules\\openai\\src\\resources\\audio\\translations.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../../core/resource';\r\nimport * as AudioAPI from './audio';\r\nimport * as TranscriptionsAPI from './transcriptions';\r\nimport { APIPromise } from '../../core/api-promise';\r\nimport { type Uploadable } from '../../core/uploads';\r\nimport { RequestOptions } from '../../internal/request-options';\r\nimport { multipartFormRequestOptions } from '../../internal/uploads';\r\n\r\nexport class Translations extends APIResource {\r\n  /**\r\n   * Translates audio into English.\r\n   *\r\n   * @example\r\n   * ```ts\r\n   * const translation = await client.audio.translations.create({\r\n   *   file: fs.createReadStream('speech.mp3'),\r\n   *   model: 'whisper-1',\r\n   * });\r\n   * ```\r\n   */\r\n  create(\r\n    body: TranslationCreateParams<'json' | undefined>,\r\n    options?: RequestOptions,\r\n  ): APIPromise<Translation>;\r\n  create(\r\n    body: TranslationCreateParams<'verbose_json'>,\r\n    options?: RequestOptions,\r\n  ): APIPromise<TranslationVerbose>;\r\n  create(body: TranslationCreateParams<'text' | 'srt' | 'vtt'>, options?: RequestOptions): APIPromise<string>;\r\n  create(body: TranslationCreateParams, options?: RequestOptions): APIPromise<Translation>;\r\n  create(\r\n    body: TranslationCreateParams,\r\n    options?: RequestOptions,\r\n  ): APIPromise<TranslationCreateResponse | string> {\r\n    return this._client.post(\r\n      '/audio/translations',\r\n      multipartFormRequestOptions({ body, ...options, __metadata: { model: body.model } }, this._client),\r\n    );\r\n  }\r\n}\r\n\r\nexport interface Translation {\r\n  text: string;\r\n}\r\n\r\nexport interface TranslationVerbose {\r\n  /**\r\n   * The duration of the input audio.\r\n   */\r\n  duration: number;\r\n\r\n  /**\r\n   * The language of the output translation (always `english`).\r\n   */\r\n  language: string;\r\n\r\n  /**\r\n   * The translated text.\r\n   */\r\n  text: string;\r\n\r\n  /**\r\n   * Segments of the translated text and their corresponding details.\r\n   */\r\n  segments?: Array<TranscriptionsAPI.TranscriptionSegment>;\r\n}\r\n\r\nexport type TranslationCreateResponse = Translation | TranslationVerbose;\r\n\r\nexport interface TranslationCreateParams<\r\n  ResponseFormat extends AudioAPI.AudioResponseFormat | undefined = AudioAPI.AudioResponseFormat | undefined,\r\n> {\r\n  /**\r\n   * The audio file object (not file name) translate, in one of these formats: flac,\r\n   * mp3, mp4, mpeg, mpga, m4a, ogg, wav, or webm.\r\n   */\r\n  file: Uploadable;\r\n\r\n  /**\r\n   * ID of the model to use. Only `whisper-1` (which is powered by our open source\r\n   * Whisper V2 model) is currently available.\r\n   */\r\n  model: (string & {}) | AudioAPI.AudioModel;\r\n\r\n  /**\r\n   * An optional text to guide the model's style or continue a previous audio\r\n   * segment. The\r\n   * [prompt](https://platform.openai.com/docs/guides/speech-to-text#prompting)\r\n   * should be in English.\r\n   */\r\n  prompt?: string;\r\n\r\n  /**\r\n   * The format of the output, in one of these options: `json`, `text`, `srt`,\r\n   * `verbose_json`, or `vtt`.\r\n   */\r\n  response_format?: 'json' | 'text' | 'srt' | 'verbose_json' | 'vtt';\r\n\r\n  /**\r\n   * The sampling temperature, between 0 and 1. Higher values like 0.8 will make the\r\n   * output more random, while lower values like 0.2 will make it more focused and\r\n   * deterministic. If set to 0, the model will use\r\n   * [log probability](https://en.wikipedia.org/wiki/Log_probability) to\r\n   * automatically increase the temperature until certain thresholds are hit.\r\n   */\r\n  temperature?: number;\r\n}\r\n\r\nexport declare namespace Translations {\r\n  export {\r\n    type Translation as Translation,\r\n    type TranslationVerbose as TranslationVerbose,\r\n    type TranslationCreateResponse as TranslationCreateResponse,\r\n    type TranslationCreateParams as TranslationCreateParams,\r\n  };\r\n}\r\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;SAMbC,2BAA2B,QAAE;AAEtC,OAAM,MAAOC,YAAa,SAAQF,WAAW;EAsB3CG,MAAMA,CACJC,IAA6B,EAC7BC,OAAwB;IAExB,OAAO,IAAI,CAACC,OAAO,CAACC,IAAI,CACtB,qBAAqB,EACrBN,2BAA2B,CAAC;MAAEG,IAAI;MAAE,GAAGC,OAAO;MAAEG,UAAU,EAAE;QAAEC,KAAK,EAAEL,IAAI,CAACK;MAAK;IAAE,CAAE,EAAE,IAAI,CAACH,OAAO,CAAC,CACnG;EACH","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}