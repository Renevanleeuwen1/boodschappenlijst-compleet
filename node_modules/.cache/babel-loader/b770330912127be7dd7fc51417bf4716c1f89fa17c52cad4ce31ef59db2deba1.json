{"ast":null,"code":"export function isRunnableFunctionWithParse(fn) {\n  return typeof fn.parse === 'function';\n}\n/**\r\n * This is helper class for passing a `function` and `parse` where the `function`\r\n * argument type matches the `parse` return type.\r\n */\nexport class ParsingToolFunction {\n  constructor(input) {\n    this.type = 'function';\n    this.function = input;\n  }\n}","map":{"version":3,"names":["isRunnableFunctionWithParse","fn","parse","ParsingToolFunction","constructor","input","type","function"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-nieuw\\node_modules\\openai\\src\\lib\\RunnableFunction.ts"],"sourcesContent":["import { type ChatCompletionRunner } from './ChatCompletionRunner';\r\nimport { type ChatCompletionStreamingRunner } from './ChatCompletionStreamingRunner';\r\nimport { JSONSchema } from './jsonschema';\r\n\r\ntype PromiseOrValue<T> = T | Promise<T>;\r\n\r\nexport type RunnableFunctionWithParse<Args extends object> = {\r\n  /**\r\n   * @param args the return value from `parse`.\r\n   * @param runner the runner evaluating this callback.\r\n   * @returns a string to send back to OpenAI.\r\n   */\r\n  function: (\r\n    args: Args,\r\n    runner: ChatCompletionRunner<unknown> | ChatCompletionStreamingRunner<unknown>,\r\n  ) => PromiseOrValue<unknown>;\r\n  /**\r\n   * @param input the raw args from the OpenAI function call.\r\n   * @returns the parsed arguments to pass to `function`\r\n   */\r\n  parse: (input: string) => PromiseOrValue<Args>;\r\n  /**\r\n   * The parameters the function accepts, describes as a JSON Schema object.\r\n   */\r\n  parameters: JSONSchema;\r\n  /**\r\n   * A description of what the function does, used by the model to choose when and how to call the function.\r\n   */\r\n  description: string;\r\n  /**\r\n   * The name of the function to be called. Will default to function.name if omitted.\r\n   */\r\n  name?: string | undefined;\r\n  strict?: boolean | undefined;\r\n};\r\n\r\nexport type RunnableFunctionWithoutParse = {\r\n  /**\r\n   * @param args the raw args from the OpenAI function call.\r\n   * @returns a string to send back to OpenAI\r\n   */\r\n  function: (\r\n    args: string,\r\n    runner: ChatCompletionRunner<unknown> | ChatCompletionStreamingRunner<unknown>,\r\n  ) => PromiseOrValue<unknown>;\r\n  /**\r\n   * The parameters the function accepts, describes as a JSON Schema object.\r\n   */\r\n  parameters: JSONSchema;\r\n  /**\r\n   * A description of what the function does, used by the model to choose when and how to call the function.\r\n   */\r\n  description: string;\r\n  /**\r\n   * The name of the function to be called. Will default to function.name if omitted.\r\n   */\r\n  name?: string | undefined;\r\n  strict?: boolean | undefined;\r\n};\r\n\r\nexport type RunnableFunction<Args extends object | string> =\r\n  Args extends string ? RunnableFunctionWithoutParse\r\n  : Args extends object ? RunnableFunctionWithParse<Args>\r\n  : never;\r\n\r\nexport type RunnableToolFunction<Args extends object | string> =\r\n  Args extends string ? RunnableToolFunctionWithoutParse\r\n  : Args extends object ? RunnableToolFunctionWithParse<Args>\r\n  : never;\r\n\r\nexport type RunnableToolFunctionWithoutParse = {\r\n  type: 'function';\r\n  function: RunnableFunctionWithoutParse;\r\n};\r\nexport type RunnableToolFunctionWithParse<Args extends object> = {\r\n  type: 'function';\r\n  function: RunnableFunctionWithParse<Args>;\r\n};\r\n\r\nexport function isRunnableFunctionWithParse<Args extends object>(\r\n  fn: any,\r\n): fn is RunnableFunctionWithParse<Args> {\r\n  return typeof (fn as any).parse === 'function';\r\n}\r\n\r\nexport type BaseFunctionsArgs = readonly (object | string)[];\r\n\r\nexport type RunnableFunctions<FunctionsArgs extends BaseFunctionsArgs> =\r\n  [any[]] extends [FunctionsArgs] ? readonly RunnableFunction<any>[]\r\n  : {\r\n      [Index in keyof FunctionsArgs]: Index extends number ? RunnableFunction<FunctionsArgs[Index]>\r\n      : FunctionsArgs[Index];\r\n    };\r\n\r\nexport type RunnableTools<FunctionsArgs extends BaseFunctionsArgs> =\r\n  [any[]] extends [FunctionsArgs] ? readonly RunnableToolFunction<any>[]\r\n  : {\r\n      [Index in keyof FunctionsArgs]: Index extends number ? RunnableToolFunction<FunctionsArgs[Index]>\r\n      : FunctionsArgs[Index];\r\n    };\r\n\r\n/**\r\n * This is helper class for passing a `function` and `parse` where the `function`\r\n * argument type matches the `parse` return type.\r\n */\r\nexport class ParsingToolFunction<Args extends object> {\r\n  type: 'function';\r\n  function: RunnableFunctionWithParse<Args>;\r\n\r\n  constructor(input: RunnableFunctionWithParse<Args>) {\r\n    this.type = 'function';\r\n    this.function = input;\r\n  }\r\n}\r\n"],"mappings":"AA+EA,OAAM,SAAUA,2BAA2BA,CACzCC,EAAO;EAEP,OAAO,OAAQA,EAAU,CAACC,KAAK,KAAK,UAAU;AAChD;AAkBA;;;;AAIA,OAAM,MAAOC,mBAAmB;EAI9BC,YAAYC,KAAsC;IAChD,IAAI,CAACC,IAAI,GAAG,UAAU;IACtB,IAAI,CAACC,QAAQ,GAAGF,KAAK;EACvB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}