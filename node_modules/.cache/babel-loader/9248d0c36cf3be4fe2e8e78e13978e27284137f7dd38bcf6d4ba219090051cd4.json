{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as PartsAPI from \"./parts.mjs\";\nimport { Parts } from \"./parts.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Uploads extends APIResource {\n  constructor() {\n    super(...arguments);\n    this.parts = new PartsAPI.Parts(this._client);\n  }\n  /**\r\n   * Creates an intermediate\r\n   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object\r\n   * that you can add\r\n   * [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.\r\n   * Currently, an Upload can accept at most 8 GB in total and expires after an hour\r\n   * after you create it.\r\n   *\r\n   * Once you complete the Upload, we will create a\r\n   * [File](https://platform.openai.com/docs/api-reference/files/object) object that\r\n   * contains all the parts you uploaded. This File is usable in the rest of our\r\n   * platform as a regular File object.\r\n   *\r\n   * For certain `purpose` values, the correct `mime_type` must be specified. Please\r\n   * refer to documentation for the\r\n   * [supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).\r\n   *\r\n   * For guidance on the proper filename extensions for each purpose, please follow\r\n   * the documentation on\r\n   * [creating a File](https://platform.openai.com/docs/api-reference/files/create).\r\n   */\n  create(body, options) {\n    return this._client.post('/uploads', {\n      body,\n      ...options\n    });\n  }\n  /**\r\n   * Cancels the Upload. No Parts may be added after an Upload is cancelled.\r\n   */\n  cancel(uploadID, options) {\n    return this._client.post(path`/uploads/${uploadID}/cancel`, options);\n  }\n  /**\r\n   * Completes the\r\n   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object).\r\n   *\r\n   * Within the returned Upload object, there is a nested\r\n   * [File](https://platform.openai.com/docs/api-reference/files/object) object that\r\n   * is ready to use in the rest of the platform.\r\n   *\r\n   * You can specify the order of the Parts by passing in an ordered list of the Part\r\n   * IDs.\r\n   *\r\n   * The number of bytes uploaded upon completion must match the number of bytes\r\n   * initially specified when creating the Upload object. No Parts may be added after\r\n   * an Upload is completed.\r\n   */\n  complete(uploadID, body, options) {\n    return this._client.post(path`/uploads/${uploadID}/complete`, {\n      body,\n      ...options\n    });\n  }\n}\nUploads.Parts = Parts;","map":{"version":3,"names":["APIResource","PartsAPI","Parts","path","Uploads","constructor","parts","_client","create","body","options","post","cancel","uploadID","complete"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-compleet\\node_modules\\openai\\src\\resources\\uploads\\uploads.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../../core/resource';\r\nimport * as FilesAPI from '../files';\r\nimport * as PartsAPI from './parts';\r\nimport { PartCreateParams, Parts, UploadPart } from './parts';\r\nimport { APIPromise } from '../../core/api-promise';\r\nimport { RequestOptions } from '../../internal/request-options';\r\nimport { path } from '../../internal/utils/path';\r\n\r\nexport class Uploads extends APIResource {\r\n  parts: PartsAPI.Parts = new PartsAPI.Parts(this._client);\r\n\r\n  /**\r\n   * Creates an intermediate\r\n   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object) object\r\n   * that you can add\r\n   * [Parts](https://platform.openai.com/docs/api-reference/uploads/part-object) to.\r\n   * Currently, an Upload can accept at most 8 GB in total and expires after an hour\r\n   * after you create it.\r\n   *\r\n   * Once you complete the Upload, we will create a\r\n   * [File](https://platform.openai.com/docs/api-reference/files/object) object that\r\n   * contains all the parts you uploaded. This File is usable in the rest of our\r\n   * platform as a regular File object.\r\n   *\r\n   * For certain `purpose` values, the correct `mime_type` must be specified. Please\r\n   * refer to documentation for the\r\n   * [supported MIME types for your use case](https://platform.openai.com/docs/assistants/tools/file-search#supported-files).\r\n   *\r\n   * For guidance on the proper filename extensions for each purpose, please follow\r\n   * the documentation on\r\n   * [creating a File](https://platform.openai.com/docs/api-reference/files/create).\r\n   */\r\n  create(body: UploadCreateParams, options?: RequestOptions): APIPromise<Upload> {\r\n    return this._client.post('/uploads', { body, ...options });\r\n  }\r\n\r\n  /**\r\n   * Cancels the Upload. No Parts may be added after an Upload is cancelled.\r\n   */\r\n  cancel(uploadID: string, options?: RequestOptions): APIPromise<Upload> {\r\n    return this._client.post(path`/uploads/${uploadID}/cancel`, options);\r\n  }\r\n\r\n  /**\r\n   * Completes the\r\n   * [Upload](https://platform.openai.com/docs/api-reference/uploads/object).\r\n   *\r\n   * Within the returned Upload object, there is a nested\r\n   * [File](https://platform.openai.com/docs/api-reference/files/object) object that\r\n   * is ready to use in the rest of the platform.\r\n   *\r\n   * You can specify the order of the Parts by passing in an ordered list of the Part\r\n   * IDs.\r\n   *\r\n   * The number of bytes uploaded upon completion must match the number of bytes\r\n   * initially specified when creating the Upload object. No Parts may be added after\r\n   * an Upload is completed.\r\n   */\r\n  complete(uploadID: string, body: UploadCompleteParams, options?: RequestOptions): APIPromise<Upload> {\r\n    return this._client.post(path`/uploads/${uploadID}/complete`, { body, ...options });\r\n  }\r\n}\r\n\r\n/**\r\n * The Upload object can accept byte chunks in the form of Parts.\r\n */\r\nexport interface Upload {\r\n  /**\r\n   * The Upload unique identifier, which can be referenced in API endpoints.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The intended number of bytes to be uploaded.\r\n   */\r\n  bytes: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the Upload was created.\r\n   */\r\n  created_at: number;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the Upload will expire.\r\n   */\r\n  expires_at: number;\r\n\r\n  /**\r\n   * The name of the file to be uploaded.\r\n   */\r\n  filename: string;\r\n\r\n  /**\r\n   * The object type, which is always \"upload\".\r\n   */\r\n  object: 'upload';\r\n\r\n  /**\r\n   * The intended purpose of the file.\r\n   * [Please refer here](https://platform.openai.com/docs/api-reference/files/object#files/object-purpose)\r\n   * for acceptable values.\r\n   */\r\n  purpose: string;\r\n\r\n  /**\r\n   * The status of the Upload.\r\n   */\r\n  status: 'pending' | 'completed' | 'cancelled' | 'expired';\r\n\r\n  /**\r\n   * The `File` object represents a document that has been uploaded to OpenAI.\r\n   */\r\n  file?: FilesAPI.FileObject | null;\r\n}\r\n\r\nexport interface UploadCreateParams {\r\n  /**\r\n   * The number of bytes in the file you are uploading.\r\n   */\r\n  bytes: number;\r\n\r\n  /**\r\n   * The name of the file to upload.\r\n   */\r\n  filename: string;\r\n\r\n  /**\r\n   * The MIME type of the file.\r\n   *\r\n   * This must fall within the supported MIME types for your file purpose. See the\r\n   * supported MIME types for assistants and vision.\r\n   */\r\n  mime_type: string;\r\n\r\n  /**\r\n   * The intended purpose of the uploaded file.\r\n   *\r\n   * See the\r\n   * [documentation on File purposes](https://platform.openai.com/docs/api-reference/files/create#files-create-purpose).\r\n   */\r\n  purpose: FilesAPI.FilePurpose;\r\n}\r\n\r\nexport interface UploadCompleteParams {\r\n  /**\r\n   * The ordered list of Part IDs.\r\n   */\r\n  part_ids: Array<string>;\r\n\r\n  /**\r\n   * The optional md5 checksum for the file contents to verify if the bytes uploaded\r\n   * matches what you expect.\r\n   */\r\n  md5?: string;\r\n}\r\n\r\nUploads.Parts = Parts;\r\n\r\nexport declare namespace Uploads {\r\n  export {\r\n    type Upload as Upload,\r\n    type UploadCreateParams as UploadCreateParams,\r\n    type UploadCompleteParams as UploadCompleteParams,\r\n  };\r\n\r\n  export { Parts as Parts, type UploadPart as UploadPart, type PartCreateParams as PartCreateParams };\r\n}\r\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;OAEf,KAAKC,QAAQ;SACOC,KAAK,QAAc;SAGrCC,IAAI,QAAE;AAEf,OAAM,MAAOC,OAAQ,SAAQJ,WAAW;EAAxCK,YAAA;;IACE,KAAAC,KAAK,GAAmB,IAAIL,QAAQ,CAACC,KAAK,CAAC,IAAI,CAACK,OAAO,CAAC;EAoD1D;EAlDE;;;;;;;;;;;;;;;;;;;;;EAqBAC,MAAMA,CAACC,IAAwB,EAAEC,OAAwB;IACvD,OAAO,IAAI,CAACH,OAAO,CAACI,IAAI,CAAC,UAAU,EAAE;MAAEF,IAAI;MAAE,GAAGC;IAAO,CAAE,CAAC;EAC5D;EAEA;;;EAGAE,MAAMA,CAACC,QAAgB,EAAEH,OAAwB;IAC/C,OAAO,IAAI,CAACH,OAAO,CAACI,IAAI,CAACR,IAAI,YAAYU,QAAQ,SAAS,EAAEH,OAAO,CAAC;EACtE;EAEA;;;;;;;;;;;;;;;EAeAI,QAAQA,CAACD,QAAgB,EAAEJ,IAA0B,EAAEC,OAAwB;IAC7E,OAAO,IAAI,CAACH,OAAO,CAACI,IAAI,CAACR,IAAI,YAAYU,QAAQ,WAAW,EAAE;MAAEJ,IAAI;MAAE,GAAGC;IAAO,CAAE,CAAC;EACrF;;AAgGFN,OAAO,CAACF,KAAK,GAAGA,KAAK","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}