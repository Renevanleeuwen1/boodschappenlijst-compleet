{"ast":null,"code":"// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\nimport { APIResource } from \"../../core/resource.mjs\";\nimport * as RunsAPI from \"./runs/runs.mjs\";\nimport { Runs } from \"./runs/runs.mjs\";\nimport { CursorPage } from \"../../core/pagination.mjs\";\nimport { path } from \"../../internal/utils/path.mjs\";\nexport class Evals extends APIResource {\n  constructor() {\n    super(...arguments);\n    this.runs = new RunsAPI.Runs(this._client);\n  }\n  /**\r\n   * Create the structure of an evaluation that can be used to test a model's\r\n   * performance. An evaluation is a set of testing criteria and the config for a\r\n   * data source, which dictates the schema of the data used in the evaluation. After\r\n   * creating an evaluation, you can run it on different models and model parameters.\r\n   * We support several types of graders and datasources. For more information, see\r\n   * the [Evals guide](https://platform.openai.com/docs/guides/evals).\r\n   */\n  create(body, options) {\n    return this._client.post('/evals', {\n      body,\n      ...options\n    });\n  }\n  /**\r\n   * Get an evaluation by ID.\r\n   */\n  retrieve(evalID, options) {\n    return this._client.get(path`/evals/${evalID}`, options);\n  }\n  /**\r\n   * Update certain properties of an evaluation.\r\n   */\n  update(evalID, body, options) {\n    return this._client.post(path`/evals/${evalID}`, {\n      body,\n      ...options\n    });\n  }\n  /**\r\n   * List evaluations for a project.\r\n   */\n  list(query = {}, options) {\n    return this._client.getAPIList('/evals', CursorPage, {\n      query,\n      ...options\n    });\n  }\n  /**\r\n   * Delete an evaluation.\r\n   */\n  delete(evalID, options) {\n    return this._client.delete(path`/evals/${evalID}`, options);\n  }\n}\nEvals.Runs = Runs;","map":{"version":3,"names":["APIResource","RunsAPI","Runs","CursorPage","path","Evals","constructor","runs","_client","create","body","options","post","retrieve","evalID","get","update","list","query","getAPIList","delete"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-nieuw\\node_modules\\openai\\src\\resources\\evals\\evals.ts"],"sourcesContent":["// File generated from our OpenAPI spec by Stainless. See CONTRIBUTING.md for details.\r\n\r\nimport { APIResource } from '../../core/resource';\r\nimport * as Shared from '../shared';\r\nimport * as GraderModelsAPI from '../graders/grader-models';\r\nimport * as ResponsesAPI from '../responses/responses';\r\nimport * as RunsAPI from './runs/runs';\r\nimport {\r\n  CreateEvalCompletionsRunDataSource,\r\n  CreateEvalJSONLRunDataSource,\r\n  EvalAPIError,\r\n  RunCancelParams,\r\n  RunCancelResponse,\r\n  RunCreateParams,\r\n  RunCreateResponse,\r\n  RunDeleteParams,\r\n  RunDeleteResponse,\r\n  RunListParams,\r\n  RunListResponse,\r\n  RunListResponsesPage,\r\n  RunRetrieveParams,\r\n  RunRetrieveResponse,\r\n  Runs,\r\n} from './runs/runs';\r\nimport { APIPromise } from '../../core/api-promise';\r\nimport { CursorPage, type CursorPageParams, PagePromise } from '../../core/pagination';\r\nimport { RequestOptions } from '../../internal/request-options';\r\nimport { path } from '../../internal/utils/path';\r\n\r\nexport class Evals extends APIResource {\r\n  runs: RunsAPI.Runs = new RunsAPI.Runs(this._client);\r\n\r\n  /**\r\n   * Create the structure of an evaluation that can be used to test a model's\r\n   * performance. An evaluation is a set of testing criteria and the config for a\r\n   * data source, which dictates the schema of the data used in the evaluation. After\r\n   * creating an evaluation, you can run it on different models and model parameters.\r\n   * We support several types of graders and datasources. For more information, see\r\n   * the [Evals guide](https://platform.openai.com/docs/guides/evals).\r\n   */\r\n  create(body: EvalCreateParams, options?: RequestOptions): APIPromise<EvalCreateResponse> {\r\n    return this._client.post('/evals', { body, ...options });\r\n  }\r\n\r\n  /**\r\n   * Get an evaluation by ID.\r\n   */\r\n  retrieve(evalID: string, options?: RequestOptions): APIPromise<EvalRetrieveResponse> {\r\n    return this._client.get(path`/evals/${evalID}`, options);\r\n  }\r\n\r\n  /**\r\n   * Update certain properties of an evaluation.\r\n   */\r\n  update(evalID: string, body: EvalUpdateParams, options?: RequestOptions): APIPromise<EvalUpdateResponse> {\r\n    return this._client.post(path`/evals/${evalID}`, { body, ...options });\r\n  }\r\n\r\n  /**\r\n   * List evaluations for a project.\r\n   */\r\n  list(\r\n    query: EvalListParams | null | undefined = {},\r\n    options?: RequestOptions,\r\n  ): PagePromise<EvalListResponsesPage, EvalListResponse> {\r\n    return this._client.getAPIList('/evals', CursorPage<EvalListResponse>, { query, ...options });\r\n  }\r\n\r\n  /**\r\n   * Delete an evaluation.\r\n   */\r\n  delete(evalID: string, options?: RequestOptions): APIPromise<EvalDeleteResponse> {\r\n    return this._client.delete(path`/evals/${evalID}`, options);\r\n  }\r\n}\r\n\r\nexport type EvalListResponsesPage = CursorPage<EvalListResponse>;\r\n\r\n/**\r\n * A CustomDataSourceConfig which specifies the schema of your `item` and\r\n * optionally `sample` namespaces. The response schema defines the shape of the\r\n * data that will be:\r\n *\r\n * - Used to define your testing criteria and\r\n * - What data is required when creating a run\r\n */\r\nexport interface EvalCustomDataSourceConfig {\r\n  /**\r\n   * The json schema for the run data source items. Learn how to build JSON schemas\r\n   * [here](https://json-schema.org/).\r\n   */\r\n  schema: Record<string, unknown>;\r\n\r\n  /**\r\n   * The type of data source. Always `custom`.\r\n   */\r\n  type: 'custom';\r\n}\r\n\r\n/**\r\n * @deprecated Deprecated in favor of LogsDataSourceConfig.\r\n */\r\nexport interface EvalStoredCompletionsDataSourceConfig {\r\n  /**\r\n   * The json schema for the run data source items. Learn how to build JSON schemas\r\n   * [here](https://json-schema.org/).\r\n   */\r\n  schema: Record<string, unknown>;\r\n\r\n  /**\r\n   * The type of data source. Always `stored_completions`.\r\n   */\r\n  type: 'stored_completions';\r\n\r\n  /**\r\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n   * for storing additional information about the object in a structured format, and\r\n   * querying for objects via API or the dashboard.\r\n   *\r\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n   * a maximum length of 512 characters.\r\n   */\r\n  metadata?: Shared.Metadata | null;\r\n}\r\n\r\n/**\r\n * An Eval object with a data source config and testing criteria. An Eval\r\n * represents a task to be done for your LLM integration. Like:\r\n *\r\n * - Improve the quality of my chatbot\r\n * - See how well my chatbot handles customer support\r\n * - Check if o4-mini is better at my usecase than gpt-4o\r\n */\r\nexport interface EvalCreateResponse {\r\n  /**\r\n   * Unique identifier for the evaluation.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the eval was created.\r\n   */\r\n  created_at: number;\r\n\r\n  /**\r\n   * Configuration of data sources used in runs of the evaluation.\r\n   */\r\n  data_source_config:\r\n    | EvalCustomDataSourceConfig\r\n    | EvalCreateResponse.Logs\r\n    | EvalStoredCompletionsDataSourceConfig;\r\n\r\n  /**\r\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n   * for storing additional information about the object in a structured format, and\r\n   * querying for objects via API or the dashboard.\r\n   *\r\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n   * a maximum length of 512 characters.\r\n   */\r\n  metadata: Shared.Metadata | null;\r\n\r\n  /**\r\n   * The name of the evaluation.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * The object type.\r\n   */\r\n  object: 'eval';\r\n\r\n  /**\r\n   * A list of testing criteria.\r\n   */\r\n  testing_criteria: Array<\r\n    | GraderModelsAPI.LabelModelGrader\r\n    | GraderModelsAPI.StringCheckGrader\r\n    | EvalCreateResponse.EvalGraderTextSimilarity\r\n    | EvalCreateResponse.EvalGraderPython\r\n    | EvalCreateResponse.EvalGraderScoreModel\r\n  >;\r\n}\r\n\r\nexport namespace EvalCreateResponse {\r\n  /**\r\n   * A LogsDataSourceConfig which specifies the metadata property of your logs query.\r\n   * This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc. The\r\n   * schema returned by this data source config is used to defined what variables are\r\n   * available in your evals. `item` and `sample` are both defined when using this\r\n   * data source config.\r\n   */\r\n  export interface Logs {\r\n    /**\r\n     * The json schema for the run data source items. Learn how to build JSON schemas\r\n     * [here](https://json-schema.org/).\r\n     */\r\n    schema: Record<string, unknown>;\r\n\r\n    /**\r\n     * The type of data source. Always `logs`.\r\n     */\r\n    type: 'logs';\r\n\r\n    /**\r\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n     * for storing additional information about the object in a structured format, and\r\n     * querying for objects via API or the dashboard.\r\n     *\r\n     * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n     * a maximum length of 512 characters.\r\n     */\r\n    metadata?: Shared.Metadata | null;\r\n  }\r\n\r\n  /**\r\n   * A TextSimilarityGrader object which grades text based on similarity metrics.\r\n   */\r\n  export interface EvalGraderTextSimilarity extends GraderModelsAPI.TextSimilarityGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold: number;\r\n  }\r\n\r\n  /**\r\n   * A PythonGrader object that runs a python script on the input.\r\n   */\r\n  export interface EvalGraderPython extends GraderModelsAPI.PythonGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold?: number;\r\n  }\r\n\r\n  /**\r\n   * A ScoreModelGrader object that uses a model to assign a score to the input.\r\n   */\r\n  export interface EvalGraderScoreModel extends GraderModelsAPI.ScoreModelGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold?: number;\r\n  }\r\n}\r\n\r\n/**\r\n * An Eval object with a data source config and testing criteria. An Eval\r\n * represents a task to be done for your LLM integration. Like:\r\n *\r\n * - Improve the quality of my chatbot\r\n * - See how well my chatbot handles customer support\r\n * - Check if o4-mini is better at my usecase than gpt-4o\r\n */\r\nexport interface EvalRetrieveResponse {\r\n  /**\r\n   * Unique identifier for the evaluation.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the eval was created.\r\n   */\r\n  created_at: number;\r\n\r\n  /**\r\n   * Configuration of data sources used in runs of the evaluation.\r\n   */\r\n  data_source_config:\r\n    | EvalCustomDataSourceConfig\r\n    | EvalRetrieveResponse.Logs\r\n    | EvalStoredCompletionsDataSourceConfig;\r\n\r\n  /**\r\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n   * for storing additional information about the object in a structured format, and\r\n   * querying for objects via API or the dashboard.\r\n   *\r\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n   * a maximum length of 512 characters.\r\n   */\r\n  metadata: Shared.Metadata | null;\r\n\r\n  /**\r\n   * The name of the evaluation.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * The object type.\r\n   */\r\n  object: 'eval';\r\n\r\n  /**\r\n   * A list of testing criteria.\r\n   */\r\n  testing_criteria: Array<\r\n    | GraderModelsAPI.LabelModelGrader\r\n    | GraderModelsAPI.StringCheckGrader\r\n    | EvalRetrieveResponse.EvalGraderTextSimilarity\r\n    | EvalRetrieveResponse.EvalGraderPython\r\n    | EvalRetrieveResponse.EvalGraderScoreModel\r\n  >;\r\n}\r\n\r\nexport namespace EvalRetrieveResponse {\r\n  /**\r\n   * A LogsDataSourceConfig which specifies the metadata property of your logs query.\r\n   * This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc. The\r\n   * schema returned by this data source config is used to defined what variables are\r\n   * available in your evals. `item` and `sample` are both defined when using this\r\n   * data source config.\r\n   */\r\n  export interface Logs {\r\n    /**\r\n     * The json schema for the run data source items. Learn how to build JSON schemas\r\n     * [here](https://json-schema.org/).\r\n     */\r\n    schema: Record<string, unknown>;\r\n\r\n    /**\r\n     * The type of data source. Always `logs`.\r\n     */\r\n    type: 'logs';\r\n\r\n    /**\r\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n     * for storing additional information about the object in a structured format, and\r\n     * querying for objects via API or the dashboard.\r\n     *\r\n     * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n     * a maximum length of 512 characters.\r\n     */\r\n    metadata?: Shared.Metadata | null;\r\n  }\r\n\r\n  /**\r\n   * A TextSimilarityGrader object which grades text based on similarity metrics.\r\n   */\r\n  export interface EvalGraderTextSimilarity extends GraderModelsAPI.TextSimilarityGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold: number;\r\n  }\r\n\r\n  /**\r\n   * A PythonGrader object that runs a python script on the input.\r\n   */\r\n  export interface EvalGraderPython extends GraderModelsAPI.PythonGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold?: number;\r\n  }\r\n\r\n  /**\r\n   * A ScoreModelGrader object that uses a model to assign a score to the input.\r\n   */\r\n  export interface EvalGraderScoreModel extends GraderModelsAPI.ScoreModelGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold?: number;\r\n  }\r\n}\r\n\r\n/**\r\n * An Eval object with a data source config and testing criteria. An Eval\r\n * represents a task to be done for your LLM integration. Like:\r\n *\r\n * - Improve the quality of my chatbot\r\n * - See how well my chatbot handles customer support\r\n * - Check if o4-mini is better at my usecase than gpt-4o\r\n */\r\nexport interface EvalUpdateResponse {\r\n  /**\r\n   * Unique identifier for the evaluation.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the eval was created.\r\n   */\r\n  created_at: number;\r\n\r\n  /**\r\n   * Configuration of data sources used in runs of the evaluation.\r\n   */\r\n  data_source_config:\r\n    | EvalCustomDataSourceConfig\r\n    | EvalUpdateResponse.Logs\r\n    | EvalStoredCompletionsDataSourceConfig;\r\n\r\n  /**\r\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n   * for storing additional information about the object in a structured format, and\r\n   * querying for objects via API or the dashboard.\r\n   *\r\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n   * a maximum length of 512 characters.\r\n   */\r\n  metadata: Shared.Metadata | null;\r\n\r\n  /**\r\n   * The name of the evaluation.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * The object type.\r\n   */\r\n  object: 'eval';\r\n\r\n  /**\r\n   * A list of testing criteria.\r\n   */\r\n  testing_criteria: Array<\r\n    | GraderModelsAPI.LabelModelGrader\r\n    | GraderModelsAPI.StringCheckGrader\r\n    | EvalUpdateResponse.EvalGraderTextSimilarity\r\n    | EvalUpdateResponse.EvalGraderPython\r\n    | EvalUpdateResponse.EvalGraderScoreModel\r\n  >;\r\n}\r\n\r\nexport namespace EvalUpdateResponse {\r\n  /**\r\n   * A LogsDataSourceConfig which specifies the metadata property of your logs query.\r\n   * This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc. The\r\n   * schema returned by this data source config is used to defined what variables are\r\n   * available in your evals. `item` and `sample` are both defined when using this\r\n   * data source config.\r\n   */\r\n  export interface Logs {\r\n    /**\r\n     * The json schema for the run data source items. Learn how to build JSON schemas\r\n     * [here](https://json-schema.org/).\r\n     */\r\n    schema: Record<string, unknown>;\r\n\r\n    /**\r\n     * The type of data source. Always `logs`.\r\n     */\r\n    type: 'logs';\r\n\r\n    /**\r\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n     * for storing additional information about the object in a structured format, and\r\n     * querying for objects via API or the dashboard.\r\n     *\r\n     * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n     * a maximum length of 512 characters.\r\n     */\r\n    metadata?: Shared.Metadata | null;\r\n  }\r\n\r\n  /**\r\n   * A TextSimilarityGrader object which grades text based on similarity metrics.\r\n   */\r\n  export interface EvalGraderTextSimilarity extends GraderModelsAPI.TextSimilarityGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold: number;\r\n  }\r\n\r\n  /**\r\n   * A PythonGrader object that runs a python script on the input.\r\n   */\r\n  export interface EvalGraderPython extends GraderModelsAPI.PythonGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold?: number;\r\n  }\r\n\r\n  /**\r\n   * A ScoreModelGrader object that uses a model to assign a score to the input.\r\n   */\r\n  export interface EvalGraderScoreModel extends GraderModelsAPI.ScoreModelGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold?: number;\r\n  }\r\n}\r\n\r\n/**\r\n * An Eval object with a data source config and testing criteria. An Eval\r\n * represents a task to be done for your LLM integration. Like:\r\n *\r\n * - Improve the quality of my chatbot\r\n * - See how well my chatbot handles customer support\r\n * - Check if o4-mini is better at my usecase than gpt-4o\r\n */\r\nexport interface EvalListResponse {\r\n  /**\r\n   * Unique identifier for the evaluation.\r\n   */\r\n  id: string;\r\n\r\n  /**\r\n   * The Unix timestamp (in seconds) for when the eval was created.\r\n   */\r\n  created_at: number;\r\n\r\n  /**\r\n   * Configuration of data sources used in runs of the evaluation.\r\n   */\r\n  data_source_config:\r\n    | EvalCustomDataSourceConfig\r\n    | EvalListResponse.Logs\r\n    | EvalStoredCompletionsDataSourceConfig;\r\n\r\n  /**\r\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n   * for storing additional information about the object in a structured format, and\r\n   * querying for objects via API or the dashboard.\r\n   *\r\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n   * a maximum length of 512 characters.\r\n   */\r\n  metadata: Shared.Metadata | null;\r\n\r\n  /**\r\n   * The name of the evaluation.\r\n   */\r\n  name: string;\r\n\r\n  /**\r\n   * The object type.\r\n   */\r\n  object: 'eval';\r\n\r\n  /**\r\n   * A list of testing criteria.\r\n   */\r\n  testing_criteria: Array<\r\n    | GraderModelsAPI.LabelModelGrader\r\n    | GraderModelsAPI.StringCheckGrader\r\n    | EvalListResponse.EvalGraderTextSimilarity\r\n    | EvalListResponse.EvalGraderPython\r\n    | EvalListResponse.EvalGraderScoreModel\r\n  >;\r\n}\r\n\r\nexport namespace EvalListResponse {\r\n  /**\r\n   * A LogsDataSourceConfig which specifies the metadata property of your logs query.\r\n   * This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc. The\r\n   * schema returned by this data source config is used to defined what variables are\r\n   * available in your evals. `item` and `sample` are both defined when using this\r\n   * data source config.\r\n   */\r\n  export interface Logs {\r\n    /**\r\n     * The json schema for the run data source items. Learn how to build JSON schemas\r\n     * [here](https://json-schema.org/).\r\n     */\r\n    schema: Record<string, unknown>;\r\n\r\n    /**\r\n     * The type of data source. Always `logs`.\r\n     */\r\n    type: 'logs';\r\n\r\n    /**\r\n     * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n     * for storing additional information about the object in a structured format, and\r\n     * querying for objects via API or the dashboard.\r\n     *\r\n     * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n     * a maximum length of 512 characters.\r\n     */\r\n    metadata?: Shared.Metadata | null;\r\n  }\r\n\r\n  /**\r\n   * A TextSimilarityGrader object which grades text based on similarity metrics.\r\n   */\r\n  export interface EvalGraderTextSimilarity extends GraderModelsAPI.TextSimilarityGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold: number;\r\n  }\r\n\r\n  /**\r\n   * A PythonGrader object that runs a python script on the input.\r\n   */\r\n  export interface EvalGraderPython extends GraderModelsAPI.PythonGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold?: number;\r\n  }\r\n\r\n  /**\r\n   * A ScoreModelGrader object that uses a model to assign a score to the input.\r\n   */\r\n  export interface EvalGraderScoreModel extends GraderModelsAPI.ScoreModelGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold?: number;\r\n  }\r\n}\r\n\r\nexport interface EvalDeleteResponse {\r\n  deleted: boolean;\r\n\r\n  eval_id: string;\r\n\r\n  object: string;\r\n}\r\n\r\nexport interface EvalCreateParams {\r\n  /**\r\n   * The configuration for the data source used for the evaluation runs. Dictates the\r\n   * schema of the data used in the evaluation.\r\n   */\r\n  data_source_config: EvalCreateParams.Custom | EvalCreateParams.Logs | EvalCreateParams.StoredCompletions;\r\n\r\n  /**\r\n   * A list of graders for all eval runs in this group. Graders can reference\r\n   * variables in the data source using double curly braces notation, like\r\n   * `{{item.variable_name}}`. To reference the model's output, use the `sample`\r\n   * namespace (ie, `{{sample.output_text}}`).\r\n   */\r\n  testing_criteria: Array<\r\n    | EvalCreateParams.LabelModel\r\n    | GraderModelsAPI.StringCheckGrader\r\n    | EvalCreateParams.TextSimilarity\r\n    | EvalCreateParams.Python\r\n    | EvalCreateParams.ScoreModel\r\n  >;\r\n\r\n  /**\r\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n   * for storing additional information about the object in a structured format, and\r\n   * querying for objects via API or the dashboard.\r\n   *\r\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n   * a maximum length of 512 characters.\r\n   */\r\n  metadata?: Shared.Metadata | null;\r\n\r\n  /**\r\n   * The name of the evaluation.\r\n   */\r\n  name?: string;\r\n}\r\n\r\nexport namespace EvalCreateParams {\r\n  /**\r\n   * A CustomDataSourceConfig object that defines the schema for the data source used\r\n   * for the evaluation runs. This schema is used to define the shape of the data\r\n   * that will be:\r\n   *\r\n   * - Used to define your testing criteria and\r\n   * - What data is required when creating a run\r\n   */\r\n  export interface Custom {\r\n    /**\r\n     * The json schema for each row in the data source.\r\n     */\r\n    item_schema: Record<string, unknown>;\r\n\r\n    /**\r\n     * The type of data source. Always `custom`.\r\n     */\r\n    type: 'custom';\r\n\r\n    /**\r\n     * Whether the eval should expect you to populate the sample namespace (ie, by\r\n     * generating responses off of your data source)\r\n     */\r\n    include_sample_schema?: boolean;\r\n  }\r\n\r\n  /**\r\n   * A data source config which specifies the metadata property of your logs query.\r\n   * This is usually metadata like `usecase=chatbot` or `prompt-version=v2`, etc.\r\n   */\r\n  export interface Logs {\r\n    /**\r\n     * The type of data source. Always `logs`.\r\n     */\r\n    type: 'logs';\r\n\r\n    /**\r\n     * Metadata filters for the logs data source.\r\n     */\r\n    metadata?: Record<string, unknown>;\r\n  }\r\n\r\n  /**\r\n   * @deprecated Deprecated in favor of LogsDataSourceConfig.\r\n   */\r\n  export interface StoredCompletions {\r\n    /**\r\n     * The type of data source. Always `stored_completions`.\r\n     */\r\n    type: 'stored_completions';\r\n\r\n    /**\r\n     * Metadata filters for the stored completions data source.\r\n     */\r\n    metadata?: Record<string, unknown>;\r\n  }\r\n\r\n  /**\r\n   * A LabelModelGrader object which uses a model to assign labels to each item in\r\n   * the evaluation.\r\n   */\r\n  export interface LabelModel {\r\n    /**\r\n     * A list of chat messages forming the prompt or context. May include variable\r\n     * references to the `item` namespace, ie {{item.name}}.\r\n     */\r\n    input: Array<LabelModel.SimpleInputMessage | LabelModel.EvalItem>;\r\n\r\n    /**\r\n     * The labels to classify to each item in the evaluation.\r\n     */\r\n    labels: Array<string>;\r\n\r\n    /**\r\n     * The model to use for the evaluation. Must support structured outputs.\r\n     */\r\n    model: string;\r\n\r\n    /**\r\n     * The name of the grader.\r\n     */\r\n    name: string;\r\n\r\n    /**\r\n     * The labels that indicate a passing result. Must be a subset of labels.\r\n     */\r\n    passing_labels: Array<string>;\r\n\r\n    /**\r\n     * The object type, which is always `label_model`.\r\n     */\r\n    type: 'label_model';\r\n  }\r\n\r\n  export namespace LabelModel {\r\n    export interface SimpleInputMessage {\r\n      /**\r\n       * The content of the message.\r\n       */\r\n      content: string;\r\n\r\n      /**\r\n       * The role of the message (e.g. \"system\", \"assistant\", \"user\").\r\n       */\r\n      role: string;\r\n    }\r\n\r\n    /**\r\n     * A message input to the model with a role indicating instruction following\r\n     * hierarchy. Instructions given with the `developer` or `system` role take\r\n     * precedence over instructions given with the `user` role. Messages with the\r\n     * `assistant` role are presumed to have been generated by the model in previous\r\n     * interactions.\r\n     */\r\n    export interface EvalItem {\r\n      /**\r\n       * Text inputs to the model - can contain template strings.\r\n       */\r\n      content: string | ResponsesAPI.ResponseInputText | EvalItem.OutputText;\r\n\r\n      /**\r\n       * The role of the message input. One of `user`, `assistant`, `system`, or\r\n       * `developer`.\r\n       */\r\n      role: 'user' | 'assistant' | 'system' | 'developer';\r\n\r\n      /**\r\n       * The type of the message input. Always `message`.\r\n       */\r\n      type?: 'message';\r\n    }\r\n\r\n    export namespace EvalItem {\r\n      /**\r\n       * A text output from the model.\r\n       */\r\n      export interface OutputText {\r\n        /**\r\n         * The text output from the model.\r\n         */\r\n        text: string;\r\n\r\n        /**\r\n         * The type of the output text. Always `output_text`.\r\n         */\r\n        type: 'output_text';\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * A TextSimilarityGrader object which grades text based on similarity metrics.\r\n   */\r\n  export interface TextSimilarity extends GraderModelsAPI.TextSimilarityGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold: number;\r\n  }\r\n\r\n  /**\r\n   * A PythonGrader object that runs a python script on the input.\r\n   */\r\n  export interface Python extends GraderModelsAPI.PythonGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold?: number;\r\n  }\r\n\r\n  /**\r\n   * A ScoreModelGrader object that uses a model to assign a score to the input.\r\n   */\r\n  export interface ScoreModel extends GraderModelsAPI.ScoreModelGrader {\r\n    /**\r\n     * The threshold for the score.\r\n     */\r\n    pass_threshold?: number;\r\n  }\r\n}\r\n\r\nexport interface EvalUpdateParams {\r\n  /**\r\n   * Set of 16 key-value pairs that can be attached to an object. This can be useful\r\n   * for storing additional information about the object in a structured format, and\r\n   * querying for objects via API or the dashboard.\r\n   *\r\n   * Keys are strings with a maximum length of 64 characters. Values are strings with\r\n   * a maximum length of 512 characters.\r\n   */\r\n  metadata?: Shared.Metadata | null;\r\n\r\n  /**\r\n   * Rename the evaluation.\r\n   */\r\n  name?: string;\r\n}\r\n\r\nexport interface EvalListParams extends CursorPageParams {\r\n  /**\r\n   * Sort order for evals by timestamp. Use `asc` for ascending order or `desc` for\r\n   * descending order.\r\n   */\r\n  order?: 'asc' | 'desc';\r\n\r\n  /**\r\n   * Evals can be ordered by creation time or last updated time. Use `created_at` for\r\n   * creation time or `updated_at` for last updated time.\r\n   */\r\n  order_by?: 'created_at' | 'updated_at';\r\n}\r\n\r\nEvals.Runs = Runs;\r\n\r\nexport declare namespace Evals {\r\n  export {\r\n    type EvalCustomDataSourceConfig as EvalCustomDataSourceConfig,\r\n    type EvalStoredCompletionsDataSourceConfig as EvalStoredCompletionsDataSourceConfig,\r\n    type EvalCreateResponse as EvalCreateResponse,\r\n    type EvalRetrieveResponse as EvalRetrieveResponse,\r\n    type EvalUpdateResponse as EvalUpdateResponse,\r\n    type EvalListResponse as EvalListResponse,\r\n    type EvalDeleteResponse as EvalDeleteResponse,\r\n    type EvalListResponsesPage as EvalListResponsesPage,\r\n    type EvalCreateParams as EvalCreateParams,\r\n    type EvalUpdateParams as EvalUpdateParams,\r\n    type EvalListParams as EvalListParams,\r\n  };\r\n\r\n  export {\r\n    Runs as Runs,\r\n    type CreateEvalCompletionsRunDataSource as CreateEvalCompletionsRunDataSource,\r\n    type CreateEvalJSONLRunDataSource as CreateEvalJSONLRunDataSource,\r\n    type EvalAPIError as EvalAPIError,\r\n    type RunCreateResponse as RunCreateResponse,\r\n    type RunRetrieveResponse as RunRetrieveResponse,\r\n    type RunListResponse as RunListResponse,\r\n    type RunDeleteResponse as RunDeleteResponse,\r\n    type RunCancelResponse as RunCancelResponse,\r\n    type RunListResponsesPage as RunListResponsesPage,\r\n    type RunCreateParams as RunCreateParams,\r\n    type RunRetrieveParams as RunRetrieveParams,\r\n    type RunListParams as RunListParams,\r\n    type RunDeleteParams as RunDeleteParams,\r\n    type RunCancelParams as RunCancelParams,\r\n  };\r\n}\r\n"],"mappings":"AAAA;SAESA,WAAW,QAAE;OAIf,KAAKC,OAAO;SAgBjBC,IAAI,QACL;SAEQC,UAAU,QAAsC;SAEhDC,IAAI,QAAE;AAEf,OAAM,MAAOC,KAAM,SAAQL,WAAW;EAAtCM,YAAA;;IACE,KAAAC,IAAI,GAAiB,IAAIN,OAAO,CAACC,IAAI,CAAC,IAAI,CAACM,OAAO,CAAC;EA4CrD;EA1CE;;;;;;;;EAQAC,MAAMA,CAACC,IAAsB,EAAEC,OAAwB;IACrD,OAAO,IAAI,CAACH,OAAO,CAACI,IAAI,CAAC,QAAQ,EAAE;MAAEF,IAAI;MAAE,GAAGC;IAAO,CAAE,CAAC;EAC1D;EAEA;;;EAGAE,QAAQA,CAACC,MAAc,EAAEH,OAAwB;IAC/C,OAAO,IAAI,CAACH,OAAO,CAACO,GAAG,CAACX,IAAI,UAAUU,MAAM,EAAE,EAAEH,OAAO,CAAC;EAC1D;EAEA;;;EAGAK,MAAMA,CAACF,MAAc,EAAEJ,IAAsB,EAAEC,OAAwB;IACrE,OAAO,IAAI,CAACH,OAAO,CAACI,IAAI,CAACR,IAAI,UAAUU,MAAM,EAAE,EAAE;MAAEJ,IAAI;MAAE,GAAGC;IAAO,CAAE,CAAC;EACxE;EAEA;;;EAGAM,IAAIA,CACFC,KAAA,GAA2C,EAAE,EAC7CP,OAAwB;IAExB,OAAO,IAAI,CAACH,OAAO,CAACW,UAAU,CAAC,QAAQ,EAAEhB,UAA4B,EAAE;MAAEe,KAAK;MAAE,GAAGP;IAAO,CAAE,CAAC;EAC/F;EAEA;;;EAGAS,MAAMA,CAACN,MAAc,EAAEH,OAAwB;IAC7C,OAAO,IAAI,CAACH,OAAO,CAACY,MAAM,CAAChB,IAAI,UAAUU,MAAM,EAAE,EAAEH,OAAO,CAAC;EAC7D;;AA0xBFN,KAAK,CAACH,IAAI,GAAGA,IAAI","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}