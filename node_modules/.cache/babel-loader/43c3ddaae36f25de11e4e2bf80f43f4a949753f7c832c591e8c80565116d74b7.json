{"ast":null,"code":"import { AbstractChatCompletionRunner } from \"./AbstractChatCompletionRunner.mjs\";\nimport { isAssistantMessage } from \"./chatCompletionUtils.mjs\";\nexport class ChatCompletionRunner extends AbstractChatCompletionRunner {\n  static runTools(client, params, options) {\n    const runner = new ChatCompletionRunner();\n    const opts = {\n      ...options,\n      headers: {\n        ...options?.headers,\n        'X-Stainless-Helper-Method': 'runTools'\n      }\n    };\n    runner._run(() => runner._runTools(client, params, opts));\n    return runner;\n  }\n  _addMessage(message, emit = true) {\n    super._addMessage(message, emit);\n    if (isAssistantMessage(message) && message.content) {\n      this._emit('content', message.content);\n    }\n  }\n}","map":{"version":3,"names":["AbstractChatCompletionRunner","isAssistantMessage","ChatCompletionRunner","runTools","client","params","options","runner","opts","headers","_run","_runTools","_addMessage","message","emit","content","_emit"],"sources":["C:\\boodschappenlijst\\boodschappenlijst-nieuw\\node_modules\\openai\\src\\lib\\ChatCompletionRunner.ts"],"sourcesContent":["import {\r\n  type ChatCompletionMessageParam,\r\n  type ChatCompletionCreateParamsNonStreaming,\r\n} from '../resources/chat/completions';\r\nimport { type BaseFunctionsArgs, RunnableTools } from './RunnableFunction';\r\nimport {\r\n  AbstractChatCompletionRunner,\r\n  AbstractChatCompletionRunnerEvents,\r\n  RunnerOptions,\r\n} from './AbstractChatCompletionRunner';\r\nimport { isAssistantMessage } from './chatCompletionUtils';\r\nimport OpenAI from '../index';\r\nimport { AutoParseableTool } from '../lib/parser';\r\n\r\nexport interface ChatCompletionRunnerEvents extends AbstractChatCompletionRunnerEvents {\r\n  content: (content: string) => void;\r\n}\r\n\r\nexport type ChatCompletionToolRunnerParams<FunctionsArgs extends BaseFunctionsArgs> = Omit<\r\n  ChatCompletionCreateParamsNonStreaming,\r\n  'tools'\r\n> & {\r\n  tools: RunnableTools<FunctionsArgs> | AutoParseableTool<any, true>[];\r\n};\r\n\r\nexport class ChatCompletionRunner<ParsedT = null> extends AbstractChatCompletionRunner<\r\n  ChatCompletionRunnerEvents,\r\n  ParsedT\r\n> {\r\n  static runTools<ParsedT>(\r\n    client: OpenAI,\r\n    params: ChatCompletionToolRunnerParams<any[]>,\r\n    options?: RunnerOptions,\r\n  ): ChatCompletionRunner<ParsedT> {\r\n    const runner = new ChatCompletionRunner<ParsedT>();\r\n    const opts = {\r\n      ...options,\r\n      headers: { ...options?.headers, 'X-Stainless-Helper-Method': 'runTools' },\r\n    };\r\n    runner._run(() => runner._runTools(client, params, opts));\r\n    return runner;\r\n  }\r\n\r\n  override _addMessage(\r\n    this: ChatCompletionRunner<ParsedT>,\r\n    message: ChatCompletionMessageParam,\r\n    emit: boolean = true,\r\n  ) {\r\n    super._addMessage(message, emit);\r\n    if (isAssistantMessage(message) && message.content) {\r\n      this._emit('content', message.content as string);\r\n    }\r\n  }\r\n}\r\n"],"mappings":"SAMEA,4BAA4B,QAG7B;SACQC,kBAAkB,QAAE;AAe7B,OAAM,MAAOC,oBAAqC,SAAQF,4BAGzD;EACC,OAAOG,QAAQA,CACbC,MAAc,EACdC,MAA6C,EAC7CC,OAAuB;IAEvB,MAAMC,MAAM,GAAG,IAAIL,oBAAoB,EAAW;IAClD,MAAMM,IAAI,GAAG;MACX,GAAGF,OAAO;MACVG,OAAO,EAAE;QAAE,GAAGH,OAAO,EAAEG,OAAO;QAAE,2BAA2B,EAAE;MAAU;KACxE;IACDF,MAAM,CAACG,IAAI,CAAC,MAAMH,MAAM,CAACI,SAAS,CAACP,MAAM,EAAEC,MAAM,EAAEG,IAAI,CAAC,CAAC;IACzD,OAAOD,MAAM;EACf;EAESK,WAAWA,CAElBC,OAAmC,EACnCC,IAAA,GAAgB,IAAI;IAEpB,KAAK,CAACF,WAAW,CAACC,OAAO,EAAEC,IAAI,CAAC;IAChC,IAAIb,kBAAkB,CAACY,OAAO,CAAC,IAAIA,OAAO,CAACE,OAAO,EAAE;MAClD,IAAI,CAACC,KAAK,CAAC,SAAS,EAAEH,OAAO,CAACE,OAAiB,CAAC;IAClD;EACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}